import"./p-476cf7c4.js";import{z as e,y as r,aS as t,D as p,F as i,E as s,K as o}from"./p-dc4230e0.js";import"./p-643e1e47.js";import"./p-66f366a9.js";import"./p-365c5902.js";import"./p-76e49c46.js";import"./p-540c739d.js";import"./p-b415e09b.js";import{l as a,b as n}from"./p-05aa0405.js";import"./p-f1856c76.js";import"./p-6e5ff36c.js";import{l}from"./p-5e52b0f8.js";import"./p-6a7ee25c.js";import"./p-6d77caaa.js";import{d as m}from"./p-536a38f2.js";import"./p-5f01bb6f.js";import"./p-aedb886e.js";import"./p-0a74e573.js";import"./p-46a6b4f6.js";import"./p-a1a69fdc.js";import"./p-0038f454.js";import"./p-1f2c53c6.js";import"./p-0c52ed76.js";import c from"./p-cbbd4609.js";import"./p-725a886f.js";import"./p-b3fbb570.js";import{t as d}from"./p-4cc1d148.js";import"./p-d69473fe.js";import"./p-3ce6769f.js";import{s as j}from"./p-3a5e7221.js";import"./p-25ae7985.js";import"./p-40809110.js";import"./p-d5b5a48a.js";import"./p-f7d3c7de.js";import"./p-311069c2.js";import"./p-44614414.js";import"./p-ab0e571f.js";import"./p-ae978389.js";import"./p-43e6d0b9.js";import"./p-24476141.js";import{u as f,h as u}from"./p-06ee2632.js";let b=class extends(d(j(l(m(a(n)))))){constructor(e){super(e),this.capabilities={operations:{supportsEditing:!0}},this.legendEnabled=!1,this.lineGraphics=new f,this.opacity=1,this.pointGraphics=new f,this.polygonGraphics=new f,this.textGraphics=new f,this.type="map-notes"}readFullExtent(t,p){if(!p.layers.length)return new e({xmin:-180,ymin:-90,xmax:180,ymax:90,spatialReference:r.WGS84});const i=r.fromJSON(p.layers[0].layerDefinition.spatialReference);return p.layers.reduce(((r,t)=>{const p=t.layerDefinition.extent;return p?e.fromJSON(p).union(r):r}),new e({spatialReference:i}))}readCapabilities(e,r){return{operations:{supportsEditing:!r.layers.some((e=>!!e.layerDefinition.drawingInfo))}}}readFeatureCollections(e,r,p){const i=r.layers.map((e=>{const r=new c;return r.read(e,p),r}));return new t({items:i})}readMinScale(e,r){for(const e of r.layers)if(null!=e.layerDefinition.minScale)return e.layerDefinition.minScale;return 0}readMaxScale(e,r){for(const e of r.layers)if(null!=e.layerDefinition.maxScale)return e.layerDefinition.maxScale;return 0}load(e){return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Feature Collection"]},e)),Promise.resolve(this)}read(e,r){"featureCollection"in e&&super.read(e.featureCollection,r),super.read(e,r)}};p([i(["web-map","portal-item"],"fullExtent",["layers"])],b.prototype,"readFullExtent",null),p([s({readOnly:!0})],b.prototype,"capabilities",void 0),p([i(["portal-item","web-map"],"capabilities",["layers"])],b.prototype,"readCapabilities",null),p([s({readOnly:!0})],b.prototype,"featureCollections",void 0),p([i(["web-map","portal-item"],"featureCollections",["layers"])],b.prototype,"readFeatureCollections",null),p([s({readOnly:!0,json:{origins:{service:{read:{enabled:!1}}},name:"showLegend",write:!0}})],b.prototype,"legendEnabled",void 0),p([s(u("lineGraphics"))],b.prototype,"lineGraphics",void 0),p([s({type:["show","hide"]})],b.prototype,"listMode",void 0),p([i(["web-map","portal-item"],"minScale",["layers"])],b.prototype,"readMinScale",null),p([i(["web-map","portal-item"],"maxScale",["layers"])],b.prototype,"readMaxScale",null),p([s({type:Number,json:{name:"opacity",write:!0}})],b.prototype,"opacity",void 0),p([s(u("pointGraphics"))],b.prototype,"pointGraphics",void 0),p([s(u("polygonGraphics"))],b.prototype,"polygonGraphics",void 0),p([s(u("textGraphics"))],b.prototype,"textGraphics",void 0),p([s({readOnly:!0,json:{read:!1}})],b.prototype,"type",void 0),b=p([o("esri.layers.MapNotesLayer")],b);var h=b;export default h;
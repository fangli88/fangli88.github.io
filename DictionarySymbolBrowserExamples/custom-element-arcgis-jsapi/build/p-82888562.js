import{b as t,dr as e,l as i}from"./p-ab028778.js";import{o as s}from"./p-098cc742.js";import{a as n}from"./p-a8e713de.js";function o(){return[0,0]}function r(t,e){return[t,e]}function a(t,e){return new Float64Array(t,e,2)}function h(){return r(1,1)}function l(){return r(1,0)}function c(){return r(0,1)}const u=h(),f=l(),d=c();function g(t,e,i,s,n,o,r,a,h,l){return t[0]=e,t[1]=i,t[2]=s,t[3]=n,t[4]=o,t[5]=r,t[6]=a,t[7]=h,t[8]=l,t}function p(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t}function m(t,e,i){const s=e[0],n=e[1],o=e[2],r=e[3],a=e[4],h=e[5],l=e[6],c=e[7],u=e[8],f=i[0],d=i[1],g=i[2],p=i[3],m=i[4],M=i[5],_=i[6],x=i[7],T=i[8];return t[0]=f*s+d*r+g*l,t[1]=f*n+d*a+g*c,t[2]=f*o+d*h+g*u,t[3]=p*s+m*r+M*l,t[4]=p*n+m*a+M*c,t[5]=p*o+m*h+M*u,t[6]=_*s+x*r+T*l,t[7]=_*n+x*a+T*c,t[8]=_*o+x*h+T*u,t}function M(t,e,i){const s=e[0],n=e[1],o=e[2],r=e[3],a=e[4],h=e[5],l=e[6],c=e[7],u=e[8],f=i[0],d=i[1];return t[0]=s,t[1]=n,t[2]=o,t[3]=r,t[4]=a,t[5]=h,t[6]=f*s+d*r+l,t[7]=f*n+d*a+c,t[8]=f*o+d*h+u,t}function _(t,e,i){const s=e[0],n=e[1],o=e[2],r=e[3],a=e[4],h=e[5],l=e[6],c=e[7],u=e[8],f=Math.sin(i),d=Math.cos(i);return t[0]=d*s+f*r,t[1]=d*n+f*a,t[2]=d*o+f*h,t[3]=d*r-f*s,t[4]=d*a-f*n,t[5]=d*h-f*o,t[6]=l,t[7]=c,t[8]=u,t}function x(t,e){const i=e[0],s=e[1],n=e[2],o=e[3],r=e[4],a=e[5],h=e[6],l=e[7],c=e[8],u=e[9],f=e[10],d=e[11],g=e[12],p=e[13],m=e[14],M=e[15],_=i*a-s*r,x=i*h-n*r,T=i*l-o*r,v=s*h-n*a,b=s*l-o*a,E=n*l-o*h,w=c*p-u*g,C=c*m-f*g,P=c*M-d*g,D=u*m-f*p,y=u*M-d*p,F=f*M-d*m;let L=_*F-x*y+T*D+v*P-b*C+E*w;return L?(L=1/L,t[0]=(a*F-h*y+l*D)*L,t[1]=(h*P-r*F-l*C)*L,t[2]=(r*y-a*P+l*w)*L,t[3]=(n*y-s*F-o*D)*L,t[4]=(i*F-n*P+o*C)*L,t[5]=(s*P-i*y-o*w)*L,t[6]=(p*E-m*b+M*v)*L,t[7]=(m*T-g*E-M*x)*L,t[8]=(g*b-p*T+M*_)*L,t):null}function T(t,e,i){return t[0]=e[0]-i[0],t[1]=e[1]-i[1],t[2]=e[2]-i[2],t[3]=e[3]-i[3],t[4]=e[4]-i[4],t[5]=e[5]-i[5],t[6]=e[6]-i[6],t[7]=e[7]-i[7],t[8]=e[8]-i[8],t}Object.freeze({__proto__:null,create:o,clone:function(t){return[t[0],t[1]]},fromValues:r,fromArray:function(t){const e=[0,0],i=Math.min(2,t.length);for(let s=0;s<i;++s)e[s]=t[s];return e},createView:a,zeros:function(){return[0,0]},ones:h,unitX:l,unitY:c,ZEROS:[0,0],ONES:u,UNIT_X:f,UNIT_Y:d}),Object.freeze({__proto__:null,fromMat4:function(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[4],t[4]=e[5],t[5]=e[6],t[6]=e[8],t[7]=e[9],t[8]=e[10],t},copy:function(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t},set:g,identity:p,transpose:function(t,e){if(t===e){const i=e[1],s=e[2],n=e[5];t[1]=e[3],t[2]=e[6],t[3]=i,t[5]=e[7],t[6]=s,t[7]=n}else t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8];return t},invert:function(t,e){const i=e[0],s=e[1],n=e[2],o=e[3],r=e[4],a=e[5],h=e[6],l=e[7],c=e[8],u=c*r-a*l,f=-c*o+a*h,d=l*o-r*h;let g=i*u+s*f+n*d;return g?(g=1/g,t[0]=u*g,t[1]=(-c*s+n*l)*g,t[2]=(a*s-n*r)*g,t[3]=f*g,t[4]=(c*i-n*h)*g,t[5]=(-a*i+n*o)*g,t[6]=d*g,t[7]=(-l*i+s*h)*g,t[8]=(r*i-s*o)*g,t):null},adjoint:function(t,e){const i=e[0],s=e[1],n=e[2],o=e[3],r=e[4],a=e[5],h=e[6],l=e[7],c=e[8];return t[0]=r*c-a*l,t[1]=n*l-s*c,t[2]=s*a-n*r,t[3]=a*h-o*c,t[4]=i*c-n*h,t[5]=n*o-i*a,t[6]=o*l-r*h,t[7]=s*h-i*l,t[8]=i*r-s*o,t},determinant:function(t){const e=t[3],i=t[4],s=t[5],n=t[6],o=t[7],r=t[8];return t[0]*(r*i-s*o)+t[1]*(-r*e+s*n)+t[2]*(o*e-i*n)},multiply:m,translate:M,rotate:_,scale:function(t,e,i){const s=i[0],n=i[1],o=i[2];return t[0]=s*e[0],t[1]=s*e[1],t[2]=s*e[2],t[3]=n*e[3],t[4]=n*e[4],t[5]=n*e[5],t[6]=o*e[6],t[7]=o*e[7],t[8]=o*e[8],t},scaleByVec2:function(t,e,i){const s=i[0],n=i[1];return t[0]=s*e[0],t[1]=s*e[1],t[2]=s*e[2],t[3]=n*e[3],t[4]=n*e[4],t[5]=n*e[5],t},fromTranslation:function(t,e){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=e[0],t[7]=e[1],t[8]=1,t},fromRotation:function(t,e){const i=Math.sin(e),s=Math.cos(e);return t[0]=s,t[1]=i,t[2]=0,t[3]=-i,t[4]=s,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t},fromScaling:function(t,e){return t[0]=e[0],t[1]=0,t[2]=0,t[3]=0,t[4]=e[1],t[5]=0,t[6]=0,t[7]=0,t[8]=1,t},fromMat2d:function(t,e){return t[0]=e[0],t[1]=e[1],t[2]=0,t[3]=e[2],t[4]=e[3],t[5]=0,t[6]=e[4],t[7]=e[5],t[8]=1,t},fromQuat:function(t,e){const i=e[0],s=e[1],n=e[2],o=e[3],r=i+i,a=s+s,h=n+n,l=i*r,c=s*r,u=s*a,f=n*r,d=n*a,g=n*h,p=o*r,m=o*a,M=o*h;return t[0]=1-u-g,t[3]=c-M,t[6]=f+m,t[1]=c+M,t[4]=1-l-g,t[7]=d-p,t[2]=f-m,t[5]=d+p,t[8]=1-l-u,t},normalFromMat4Legacy:function(t,e){const i=e[0],s=e[1],n=e[2],o=e[4],r=e[5],a=e[6],h=e[8],l=e[9],c=e[10],u=c*r-a*l,f=-c*o+a*h,d=l*o-r*h,g=i*u+s*f+n*d;if(!g)return null;const p=1/g;return t[0]=u*p,t[1]=(-c*s+n*l)*p,t[2]=(a*s-n*r)*p,t[3]=f*p,t[4]=(c*i-n*h)*p,t[5]=(-a*i+n*o)*p,t[6]=d*p,t[7]=(-l*i+s*h)*p,t[8]=(r*i-s*o)*p,t},normalFromMat4:x,projection:function(t,e,i){return t[0]=2/e,t[1]=0,t[2]=0,t[3]=0,t[4]=-2/i,t[5]=0,t[6]=-1,t[7]=1,t[8]=1,t},str:function(t){return"mat3("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+", "+t[8]+")"},frob:function(t){return Math.sqrt(Math.pow(t[0],2)+Math.pow(t[1],2)+Math.pow(t[2],2)+Math.pow(t[3],2)+Math.pow(t[4],2)+Math.pow(t[5],2)+Math.pow(t[6],2)+Math.pow(t[7],2)+Math.pow(t[8],2))},add:function(t,e,i){return t[0]=e[0]+i[0],t[1]=e[1]+i[1],t[2]=e[2]+i[2],t[3]=e[3]+i[3],t[4]=e[4]+i[4],t[5]=e[5]+i[5],t[6]=e[6]+i[6],t[7]=e[7]+i[7],t[8]=e[8]+i[8],t},subtract:T,multiplyScalar:function(t,e,i){return t[0]=e[0]*i,t[1]=e[1]*i,t[2]=e[2]*i,t[3]=e[3]*i,t[4]=e[4]*i,t[5]=e[5]*i,t[6]=e[6]*i,t[7]=e[7]*i,t[8]=e[8]*i,t},multiplyScalarAndAdd:function(t,e,i,s){return t[0]=e[0]+i[0]*s,t[1]=e[1]+i[1]*s,t[2]=e[2]+i[2]*s,t[3]=e[3]+i[3]*s,t[4]=e[4]+i[4]*s,t[5]=e[5]+i[5]*s,t[6]=e[6]+i[6]*s,t[7]=e[7]+i[7]*s,t[8]=e[8]+i[8]*s,t},exactEquals:function(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]&&t[4]===e[4]&&t[5]===e[5]&&t[6]===e[6]&&t[7]===e[7]&&t[8]===e[8]},equals:function(t,e){const i=t[0],s=t[1],o=t[2],r=t[3],a=t[4],h=t[5],l=t[6],c=t[7],u=t[8],f=e[0],d=e[1],g=e[2],p=e[3],m=e[4],M=e[5],_=e[6],x=e[7],T=e[8];return Math.abs(i-f)<=n*Math.max(1,Math.abs(i),Math.abs(f))&&Math.abs(s-d)<=n*Math.max(1,Math.abs(s),Math.abs(d))&&Math.abs(o-g)<=n*Math.max(1,Math.abs(o),Math.abs(g))&&Math.abs(r-p)<=n*Math.max(1,Math.abs(r),Math.abs(p))&&Math.abs(a-m)<=n*Math.max(1,Math.abs(a),Math.abs(m))&&Math.abs(h-M)<=n*Math.max(1,Math.abs(h),Math.abs(M))&&Math.abs(l-_)<=n*Math.max(1,Math.abs(l),Math.abs(_))&&Math.abs(c-x)<=n*Math.max(1,Math.abs(c),Math.abs(x))&&Math.abs(u-T)<=n*Math.max(1,Math.abs(u),Math.abs(T))},mul:m,sub:T});var v=s((function(t){var e;void 0!==(e=["precision","highp","mediump","lowp","attribute","const","uniform","varying","break","continue","do","for","while","if","else","in","out","inout","float","int","void","bool","true","false","discard","return","mat2","mat3","mat4","vec2","vec3","vec4","ivec2","ivec3","ivec4","bvec2","bvec3","bvec4","sampler1D","sampler2D","sampler3D","samplerCube","sampler1DShadow","sampler2DShadow","struct","asm","class","union","enum","typedef","template","this","packed","goto","switch","default","inline","noinline","volatile","public","static","extern","external","interface","long","short","double","half","fixed","unsigned","input","output","hvec2","hvec3","hvec4","dvec2","dvec3","dvec4","fvec2","fvec3","fvec4","sampler2DRect","sampler3DRect","sampler2DRectShadow","sizeof","cast","namespace","using"])&&(t.exports=e)})),b=s((function(t){var e;void 0!==(e=["<<=",">>=","++","--","<<",">>","<=",">=","==","!=","&&","||","+=","-=","*=","/=","%=","&=","^^","^=","|=","(",")","[","]",".","!","~","*","/","%","+","-","<",">","&","^","|","?",":","=",",",";","{","}"])&&(t.exports=e)})),E=s((function(t){var e;void 0!==(e=["abs","acos","all","any","asin","atan","ceil","clamp","cos","cross","dFdx","dFdy","degrees","distance","dot","equal","exp","exp2","faceforward","floor","fract","gl_BackColor","gl_BackLightModelProduct","gl_BackLightProduct","gl_BackMaterial","gl_BackSecondaryColor","gl_ClipPlane","gl_ClipVertex","gl_Color","gl_DepthRange","gl_DepthRangeParameters","gl_EyePlaneQ","gl_EyePlaneR","gl_EyePlaneS","gl_EyePlaneT","gl_Fog","gl_FogCoord","gl_FogFragCoord","gl_FogParameters","gl_FragColor","gl_FragCoord","gl_FragData","gl_FragDepth","gl_FragDepthEXT","gl_FrontColor","gl_FrontFacing","gl_FrontLightModelProduct","gl_FrontLightProduct","gl_FrontMaterial","gl_FrontSecondaryColor","gl_LightModel","gl_LightModelParameters","gl_LightModelProducts","gl_LightProducts","gl_LightSource","gl_LightSourceParameters","gl_MaterialParameters","gl_MaxClipPlanes","gl_MaxCombinedTextureImageUnits","gl_MaxDrawBuffers","gl_MaxFragmentUniformComponents","gl_MaxLights","gl_MaxTextureCoords","gl_MaxTextureImageUnits","gl_MaxTextureUnits","gl_MaxVaryingFloats","gl_MaxVertexAttribs","gl_MaxVertexTextureImageUnits","gl_MaxVertexUniformComponents","gl_ModelViewMatrix","gl_ModelViewMatrixInverse","gl_ModelViewMatrixInverseTranspose","gl_ModelViewMatrixTranspose","gl_ModelViewProjectionMatrix","gl_ModelViewProjectionMatrixInverse","gl_ModelViewProjectionMatrixInverseTranspose","gl_ModelViewProjectionMatrixTranspose","gl_MultiTexCoord0","gl_MultiTexCoord1","gl_MultiTexCoord2","gl_MultiTexCoord3","gl_MultiTexCoord4","gl_MultiTexCoord5","gl_MultiTexCoord6","gl_MultiTexCoord7","gl_Normal","gl_NormalMatrix","gl_NormalScale","gl_ObjectPlaneQ","gl_ObjectPlaneR","gl_ObjectPlaneS","gl_ObjectPlaneT","gl_Point","gl_PointCoord","gl_PointParameters","gl_PointSize","gl_Position","gl_ProjectionMatrix","gl_ProjectionMatrixInverse","gl_ProjectionMatrixInverseTranspose","gl_ProjectionMatrixTranspose","gl_SecondaryColor","gl_TexCoord","gl_TextureEnvColor","gl_TextureMatrix","gl_TextureMatrixInverse","gl_TextureMatrixInverseTranspose","gl_TextureMatrixTranspose","gl_Vertex","greaterThan","greaterThanEqual","inversesqrt","length","lessThan","lessThanEqual","log","log2","matrixCompMult","max","min","mix","mod","normalize","not","notEqual","pow","radians","reflect","refract","sign","sin","smoothstep","sqrt","step","tan","texture2D","texture2DLod","texture2DProj","texture2DProjLod","textureCube","textureCubeLod","texture2DLodEXT","texture2DProjLodEXT","textureCubeLodEXT","texture2DGradEXT","texture2DProjGradEXT","textureCubeGradEXT"])&&(t.exports=e)}));class w{constructor(t,e,i=null){this._context=null,this._glName=null,this.id=C++,this._descriptor=void 0,this._samplingModeDirty=!1,this._wrapModeDirty=!1,this._boundToUnits=new Set,t.instanceCounter.increment(0,this),this._context=t,this._descriptor={target:3553,samplingMode:9729,wrapMode:10497,flipped:!1,hasMipmap:!1,isOpaque:!1,unpackAlignment:4,preMultiplyAlpha:!1,...e},this.setData(i)}get glName(){return this._glName}get descriptor(){return this._descriptor}dispose(){if(this._context&&this._context.gl){if(this._glName){const t=this._context.gl;this._boundToUnits.forEach((t=>{this._context.bindTexture(null,t)})),t.deleteTexture(this._glName),this._glName=null}this._context.instanceCounter.decrement(0,this),this._context=null}}release(){this.dispose()}resize(t,e){const i=this._descriptor;i.width===t&&i.height===e||(i.width=t,i.height=e,this.setData(null))}setData(e){if(!this._context||!this._context.gl)return;const i=this._context.gl;this._glName||(this._glName=i.createTexture()),void 0===e&&(e=null),null===e&&(this._descriptor.width=this._descriptor.width||4,this._descriptor.height=this._descriptor.height||4);const s=this._context.getBoundTexture(0);this._context.bindTexture(this,0);const n=this._descriptor;w._validateTexture(n),i.pixelStorei(i.UNPACK_ALIGNMENT,n.unpackAlignment),i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL,n.flipped?1:0),i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL,n.preMultiplyAlpha?1:0);const o=n.pixelFormat;let r=n.internalFormat?n.internalFormat:o;if(e instanceof ImageData||e instanceof HTMLImageElement||e instanceof HTMLCanvasElement||e instanceof HTMLVideoElement){let t=e.width,s=e.height;e instanceof HTMLVideoElement&&(t=e.videoWidth,s=e.videoHeight),n.width&&n.height&&console.assert(t===n.width&&s===n.height),i.texImage2D(i.TEXTURE_2D,0,r,o,n.dataType,e),n.hasMipmap&&this.generateMipmap(),void 0===n.width&&(n.width=t),void 0===n.height&&(n.height=s)}else{null!=n.width&&null!=n.height||console.error("Width and height must be specified!"),i.DEPTH24_STENCIL8&&r===i.DEPTH_STENCIL&&(r=i.DEPTH24_STENCIL8);let s=n.width,a=n.height;if(function(e){return t(e)&&"type"in e&&"compressed"===e.type}(e)){const t=Math.round(Math.log(Math.max(s,a))/Math.LN2)+1;n.hasMipmap=n.hasMipmap&&t===e.levels.length;for(let t=0;;++t){const o=e.levels[Math.min(t,e.levels.length-1)];if(i.compressedTexImage2D(i.TEXTURE_2D,t,r,s,a,0,o),1===s&&1===a||!n.hasMipmap)break;s=Math.max(1,s>>1),a=Math.max(1,a>>1)}}else if(t(e))i.texImage2D(i.TEXTURE_2D,0,r,s,a,0,o,n.dataType,e),n.hasMipmap&&this.generateMipmap();else for(let t=0;i.texImage2D(i.TEXTURE_2D,t,r,s,a,0,o,n.dataType,null),(1!==s||1!==a)&&n.hasMipmap;++t)s=Math.max(1,s>>1),a=Math.max(1,a>>1)}w._applySamplingMode(i,this._descriptor),w._applyWrapMode(i,this._descriptor),w._applyAnisotropicFilteringParameters(this._context,this._descriptor),this._context.bindTexture(s,0)}updateData(t,e,i,s,n,o){o||console.error("An attempt to use uninitialized data!"),this._glName||console.error("An attempt to update uninitialized texture!");const r=this._context.gl,a=this._descriptor,h=this._context.getBoundTexture(0);this._context.bindTexture(this,0),(e<0||i<0||s>a.width||n>a.height||e+s>a.width||i+n>a.height)&&console.error("An attempt to update out of bounds of the texture!"),r.pixelStorei(r.UNPACK_ALIGNMENT,a.unpackAlignment),r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL,a.flipped?1:0),r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL,a.preMultiplyAlpha?1:0),o instanceof ImageData||o instanceof HTMLImageElement||o instanceof HTMLCanvasElement||o instanceof HTMLVideoElement?r.texSubImage2D(r.TEXTURE_2D,t,e,i,a.pixelFormat,a.dataType,o):r.texSubImage2D(r.TEXTURE_2D,t,e,i,s,n,a.pixelFormat,a.dataType,o),this._context.bindTexture(h,0)}generateMipmap(){const t=this._descriptor;t.hasMipmap||(t.hasMipmap=!0,this._samplingModeDirty=!0,w._validateTexture(t)),9729===t.samplingMode?(this._samplingModeDirty=!0,t.samplingMode=9985):9728===t.samplingMode&&(this._samplingModeDirty=!0,t.samplingMode=9984);const e=this._context.getBoundTexture(0);this._context.bindTexture(this,0);const i=this._context.gl;i.generateMipmap(i.TEXTURE_2D),this._context.bindTexture(e,0)}setSamplingMode(t){t!==this._descriptor.samplingMode&&(this._descriptor.samplingMode=t,w._validateTexture(this._descriptor),this._samplingModeDirty=!0)}setWrapMode(t){t!==this._descriptor.wrapMode&&(this._descriptor.wrapMode=t,w._validateTexture(this._descriptor),this._wrapModeDirty=!0)}applyChanges(){const t=this._context.gl,e=this._descriptor;this._samplingModeDirty&&(w._applySamplingMode(t,e),this._samplingModeDirty=!1),this._wrapModeDirty&&(w._applyWrapMode(t,e),this._wrapModeDirty=!1)}setBoundToUnit(t,e){e?this._boundToUnits.add(t):this._boundToUnits.delete(t)}static _validateTexture(t){(t.width<0||t.height<0)&&console.error("Negative dimension parameters are not allowed!"),e(t.width)&&e(t.height)||("number"==typeof t.wrapMode?33071!==t.wrapMode&&console.error("Non-power-of-two textures must have a wrap mode of CLAMP_TO_EDGE!"):33071===t.wrapMode.s&&33071===t.wrapMode.t||console.error("Non-power-of-two textures must have a wrap mode of CLAMP_TO_EDGE!"),t.hasMipmap&&console.error("Mipmapping requires power-of-two textures!"))}static _applySamplingMode(t,e){let i=e.samplingMode,s=e.samplingMode;9985===i||9987===i?(i=9729,e.hasMipmap||(s=9729)):9984!==i&&9986!==i||(i=9728,e.hasMipmap||(s=9728)),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,i),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,s)}static _applyWrapMode(t,e){"number"==typeof e.wrapMode?(t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,e.wrapMode),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,e.wrapMode)):(t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,e.wrapMode.s),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,e.wrapMode.t))}static _applyAnisotropicFilteringParameters(t,e){if(null==e.maxAnisotropy)return;const i=t.capabilities.textureFilterAnisotropic;if(!i)return;const s=t.gl;s.texParameterf(s.TEXTURE_2D,i.TEXTURE_MAX_ANISOTROPY,e.maxAnisotropy)}}let C=0,P=0;class D{constructor(t,e){this._context=t,this._desc=e,this.id=++P,this._context.instanceCounter.increment(5,this);const i=this._context.gl;this.glName=i.createRenderbuffer(),this._context.bindRenderbuffer(this),i.renderbufferStorage(i.RENDERBUFFER,e.internalFormat,e.width,e.height)}get descriptor(){return this._desc}resize(t,e){const i=this._desc;if(i.width===t&&i.height===e)return;i.width=t,i.height=e;const s=this._context.gl;this._context.bindRenderbuffer(this),s.renderbufferStorage(s.RENDERBUFFER,i.internalFormat,i.width,i.height)}dispose(){this._context&&(this._context.gl.deleteRenderbuffer(this.glName),this._context.instanceCounter.decrement(5,this),this._context=null)}}const y=i.getLogger("esri.views.webgl.FrameBufferObject");class F{constructor(t,e,i,s){if(this._context=null,this._glName=null,this.id=L++,this._depthAttachment=null,this._stencilAttachment=null,this._colorAttachments=new Map,this._initialized=!1,t.instanceCounter.increment(4,this),this._context=t,this._desc={...e},i){let e;var n;if(Array.isArray(i))for(const s of i){const{attachmentPoint:i,texture:n}=s,o=n instanceof w?n:new w(t,n);e=o.descriptor,this._colorAttachments.set(i,o),this._validateColorAttachmentPoint(i),this._validateTextureDimensions(e,this._desc)}else i instanceof w?(e=i.descriptor,this._colorAttachments.set(36064,i)):(e=i,this._colorAttachments.set(36064,new w(t,i))),0!==(null==(n=this._desc)?void 0:n.colorTarget)&&console.error("Framebuffer is initialized with a texture however the descriptor indicates using a renderbuffer color attachment!"),this._validateTextureDimensions(e,this._desc)}if(s instanceof D){var o;const t=null!=(o=this._desc.depthStencilTarget)?o:3;2===t?this._stencilAttachment=s:1===t||3===t?this._depthAttachment=s:console.error('If a Renderbuffer is provided, "depthStencilTarget" must be one of STENCIL_RENDER_BUFFER, DEPTH_RENDER_BUFFER or DEPTH_STENCIL_RENDER_BUFFER'),F._validateBufferDimensions(s.descriptor,this._desc)}else if(s){let t;this._context.capabilities.depthTexture||console.error("Extension WEBGL_depth_texture isn't supported therefore it is no possible to set the depth/stencil texture as an attachment!"),s instanceof w?(this._depthStencilTexture=s,t=this._depthStencilTexture.descriptor):(t=s,this._depthStencilTexture=new w(this._context,t)),this._validateTextureDimensions(t,this._desc)}}dispose(){if(!this._context)return;const t=this._context,e=t.getBoundFramebufferObject();this._disposeColorAttachments(),this._disposeDepthStencilAttachments(),this._glName&&(t.gl.deleteFramebuffer(this._glName),this._glName=null),t.bindFramebuffer(e),t.instanceCounter.decrement(4,this),this._context=null}get glName(){return this._glName}get descriptor(){return this._desc}get colorTexture(){const t=this._colorAttachments.get(36064);return t&&t instanceof w?t:null}get colorAttachment(){return this._colorAttachments.get(36064)}get depthStencilAttachment(){return this._depthStencilTexture||this._depthAttachment||this._stencilAttachment}get depthStencilTexture(){return this._depthStencilTexture}get width(){return this._desc.width}get height(){return this._desc.height}getColorTexture(t){const e=this._colorAttachments.get(t);return e&&e instanceof w?e:null}attachColorTexture(t,e=36064){if(t){if(this._validateColorAttachmentPoint(e),this._validateTextureDimensions(t.descriptor,this._desc),this._disposeColorAttachments(),this._initialized){this._context.bindFramebuffer(this);const i=this._context.gl;i.framebufferTexture2D(i.FRAMEBUFFER,e,i.TEXTURE_2D,t.glName,0)}this._colorAttachments.set(e,t)}}detachColorTexture(t=36064){const e=this._colorAttachments.get(t);if(e instanceof w){const i=e;if(this._initialized){this._context.bindFramebuffer(this);const e=this._context.gl;e.framebufferTexture2D(e.FRAMEBUFFER,t,e.TEXTURE_2D,null,0)}return this._colorAttachments.delete(t),i}}attachDepthStencilTexture(t){if(!t)return;const e=t.descriptor;if(34041!==e.pixelFormat&&console.error("Depth/Stencil texture must have a pixel type of DEPTH_STENCIL!"),34042!==e.dataType&&console.error("Depth/Stencil texture must have data type of UNSIGNED_INT_24_8_WEBGL!"),this._context.capabilities.depthTexture||console.error("Extension WEBGL_depth_texture isn't supported therefore it is no possible to set the depth/stencil texture!"),this._validateTextureDimensions(e,this._desc),this._desc.depthStencilTarget&&4!==this._desc.depthStencilTarget&&(this._desc.depthStencilTarget=4),this._disposeDepthStencilAttachments(),this._initialized){this._context.bindFramebuffer(this);const e=this._context.gl;e.framebufferTexture2D(e.FRAMEBUFFER,e.DEPTH_STENCIL_ATTACHMENT,e.TEXTURE_2D,t.glName,0)}this._depthStencilTexture=t}detachDepthStencilTexture(){const t=this._depthStencilTexture;if(t&&this._initialized){this._context.bindFramebuffer(this);const t=this._context.gl;this._context.gl.framebufferTexture2D(t.FRAMEBUFFER,t.DEPTH_STENCIL_ATTACHMENT,t.TEXTURE_2D,null,0)}return this._depthStencilTexture=null,t}attachDepthStencilBuffer(t){if(!t)return;const e=t.descriptor;if(34041!==e.internalFormat&&33189!==e.internalFormat&&console.error("Depth/Stencil buffer must have correct internalFormat"),F._validateBufferDimensions(e,this._desc),this._disposeDepthStencilAttachments(),this._desc.depthStencilTarget=34041===e.internalFormat?3:1,this._initialized){this._context.bindFramebuffer(this);const e=this._context.gl;e.framebufferRenderbuffer(e.FRAMEBUFFER,1===this._desc.depthStencilTarget?e.DEPTH_ATTACHMENT:e.DEPTH_STENCIL_ATTACHMENT,e.RENDERBUFFER,t.glName)}this._depthAttachment=t}detachDepthStencilBuffer(){const t=this._context.gl,e=this._depthAttachment;return e&&this._initialized&&(this._context.bindFramebuffer(this),t.framebufferRenderbuffer(t.FRAMEBUFFER,1===this._desc.depthStencilTarget?t.DEPTH_ATTACHMENT:t.DEPTH_STENCIL_ATTACHMENT,t.RENDERBUFFER,null)),this._depthAttachment=null,e}copyToTexture(t,e,i,s,n,o,r){(t<0||e<0||n<0||o<0)&&console.error("Offsets cannot be negative!"),(i<=0||s<=0)&&console.error("Copy width and height must be greater than zero!");const a=this._desc,h=r.descriptor;3553!==r.descriptor.target&&console.error("Texture target must be TEXTURE_2D!"),(t+i>a.width||e+s>a.height||n+i>h.width||o+s>h.height)&&console.error("Bad dimensions, the current input values will attempt to read or copy out of bounds!");const l=this._context;l.bindTexture(r,0),l.bindFramebuffer(this),l.gl.copyTexSubImage2D(3553,0,n,o,t,e,i,s)}readPixels(t,e,i,s,n,o,r){(i<=0||s<=0)&&console.error("Copy width and height must be greater than zero!"),r||console.error("Target memory is not initialized!"),this._context.bindFramebuffer(this),this._context.gl.readPixels(t,e,i,s,n,o,r)}resize(t,e){const i=this._desc;if(i.width!==t||i.height!==e){if(!this._initialized)return i.width=t,i.height=e,this._colorAttachments.forEach((i=>{i&&i.resize(t,e)})),void(this._depthStencilTexture&&this._depthStencilTexture.resize(t,e));i.width=t,i.height=e,this._colorAttachments.forEach((i=>{i&&i.resize(t,e)})),null!=this._depthStencilTexture?this._depthStencilTexture.resize(t,e):(this._depthAttachment||this._stencilAttachment)&&(this._depthAttachment&&this._depthAttachment.resize(t,e),this._stencilAttachment&&this._stencilAttachment.resize(t,e)),this._context.getBoundFramebufferObject()===this&&this._context.bindFramebuffer(null),this._initialized=!1}}initialize(){var t,e,i,s;if(this._initialized)return!1;const n=this._context,o=n.gl;this._glName&&o.deleteFramebuffer(this._glName);const r=o.createFramebuffer(),a=this._desc,h=null!=(t=a.colorTarget)?t:1,l=null!=(e=a.width)?e:1,c=null!=(i=a.height)?i:1;if(o.bindFramebuffer(o.FRAMEBUFFER,r),0===this._colorAttachments.size)if(0===h)this._colorAttachments.set(36064,S(n,a));else{const t=new D(n,{internalFormat:32854,width:l,height:c});this._colorAttachments.set(36064,t)}this._colorAttachments.forEach(((t,e)=>{t&&(t instanceof w?o.framebufferTexture2D(o.FRAMEBUFFER,e,o.TEXTURE_2D,t.glName,0):o.framebufferRenderbuffer(o.FRAMEBUFFER,o.COLOR_ATTACHMENT0,o.RENDERBUFFER,t.glName))}));const u=null!=(s=a.depthStencilTarget)?s:0;switch(u){case 1:case 3:this._depthAttachment||(this._depthAttachment=new D(n,{internalFormat:1===a.depthStencilTarget?33189:34041,width:l,height:c})),o.framebufferRenderbuffer(o.FRAMEBUFFER,1===u?o.DEPTH_ATTACHMENT:o.DEPTH_STENCIL_ATTACHMENT,o.RENDERBUFFER,this._depthAttachment.glName);break;case 2:this._stencilAttachment||(this._stencilAttachment=new D(n,{internalFormat:36168,width:l,height:c})),o.framebufferRenderbuffer(o.FRAMEBUFFER,o.STENCIL_ATTACHMENT,o.RENDERBUFFER,this._stencilAttachment.glName);break;case 4:this._depthStencilTexture||(n.capabilities.depthTexture||console.error("Extension WEBGL_depth_texture isn't supported therefore it is no possible to set the depth/stencil texture as an attachment!"),this._depthStencilTexture=new w(n,{target:3553,pixelFormat:34041,dataType:34042,samplingMode:9728,wrapMode:33071,width:l,height:c})),o.framebufferTexture2D(o.FRAMEBUFFER,o.DEPTH_STENCIL_ATTACHMENT,o.TEXTURE_2D,this._depthStencilTexture.glName,0)}return this._glName=r,this._initialized=!0,!0}_disposeColorAttachments(){this._colorAttachments.forEach(((t,e)=>{if(t instanceof w){if(this._initialized){this._context.bindFramebuffer(this);const t=this._context.gl;t.framebufferTexture2D(t.FRAMEBUFFER,e,t.TEXTURE_2D,null,0)}t.dispose()}else if(t instanceof WebGLRenderbuffer){const i=this._context.gl;this._initialized&&(this._context.bindFramebuffer(this),i.framebufferRenderbuffer(i.FRAMEBUFFER,e,i.RENDERBUFFER,null)),this._context.gl.deleteRenderbuffer(t)}})),this._colorAttachments.clear()}_disposeDepthStencilAttachments(){const t=this._context.gl;this._depthAttachment&&(this._initialized&&(this._context.bindFramebuffer(this),t.framebufferRenderbuffer(t.FRAMEBUFFER,1===this._desc.depthStencilTarget?t.DEPTH_ATTACHMENT:t.DEPTH_STENCIL_ATTACHMENT,t.RENDERBUFFER,null)),this._depthAttachment.dispose(),this._depthAttachment=null),this._stencilAttachment&&(this._initialized&&(this._context.bindFramebuffer(this),t.framebufferRenderbuffer(t.FRAMEBUFFER,t.STENCIL_ATTACHMENT,t.RENDERBUFFER,null)),this._stencilAttachment.dispose(),this._stencilAttachment=null),this._depthStencilTexture&&(this._initialized&&(this._context.bindFramebuffer(this),t.framebufferTexture2D(t.FRAMEBUFFER,t.DEPTH_STENCIL_ATTACHMENT,t.TEXTURE_2D,null,0)),this._depthStencilTexture.dispose(),this._depthStencilTexture=null)}static _validateBufferDimensions(t,e){console.assert(t.width>=0&&t.height>=0),void 0!==e.width&&e.width>=0&&void 0!==e.height&&e.height>=0?e.width===t.width&&e.height===t.height||console.error("Renderbuffer dimensions must match the framebuffer's!"):(e.width=t.width,e.height=t.height)}_validateTextureDimensions(t,e){console.assert(t.width>=0&&t.height>=0),3553!==t.target&&console.error("Texture type must be TEXTURE_2D!"),void 0!==e.width&&e.width>=0&&void 0!==e.height&&e.height>=0?e.width===t.width&&e.height===t.height||console.error("Color attachment texture must match the framebuffer's!"):(e.width=t.width,e.height=t.height)}_validateColorAttachmentPoint(t){if(-1===F._MAX_COLOR_ATTACHMENTS){const t=this._context.capabilities.drawBuffers;F._MAX_COLOR_ATTACHMENTS=t?this._context.gl.getParameter(t.MAX_COLOR_ATTACHMENTS):1}const e=t-36064;e+1>F._MAX_COLOR_ATTACHMENTS&&y.error("esri.FrameBufferObject",`illegal attachment point for color attachment: ${e+1}. Implementation supports up to ${F._MAX_COLOR_ATTACHMENTS} color attachments`)}}F._MAX_COLOR_ATTACHMENTS=-1;let L=0;const S=(t,e)=>new w(t,{target:3553,pixelFormat:6408,dataType:5121,samplingMode:9728,wrapMode:33071,width:e.width,height:e.height});export{m as M,a,v as b,F as c,w as d,M as h,_ as i,o as n,E as o,p as r,g as s,b as t,x as y}
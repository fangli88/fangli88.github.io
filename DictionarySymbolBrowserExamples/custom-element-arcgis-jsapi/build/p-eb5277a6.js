import"./p-476cf7c4.js";import{l as t,m as s,bi as i,i as e,c$ as r,b as p}from"./p-ab028778.js";import"./p-2ef6e039.js";import"./p-7575e94f.js";import"./p-ebb65ba7.js";import"./p-fd91cc88.js";import"./p-43d5e67f.js";import"./p-6dae6b5e.js";import"./p-babdd7a5.js";import"./p-098cc742.js";import"./p-73b795c3.js";import"./p-e07a8dfe.js";import"./p-c6c7c9c2.js";import"./p-f16fbea1.js";import"./p-8fc84c2d.js";import"./p-e7501203.js";import"./p-8a0d1aa6.js";import"./p-f3cc8f75.js";import{R as a}from"./p-e2c62b7c.js";import"./p-a1a69fdc.js";import"./p-89accc4e.js";import"./p-8509ef38.js";import"./p-15538a25.js";import"./p-8bb40e65.js";import"./p-50ee3927.js";import"./p-05d2fbdb.js";import"./p-02a4b6c8.js";import"./p-abda1e64.js";import"./p-a8e713de.js";import"./p-fb40af74.js";import"./p-4f43bb64.js";import{W as o,Y as n,n as h}from"./p-2b439a2e.js";import"./p-4561de0e.js";import"./p-3db2569b.js";import"./p-a6dff060.js";import"./p-920b2088.js";import"./p-fa359158.js";import"./p-004e9de0.js";import"./p-65bdc41d.js";import{g as m}from"./p-9029ef66.js";import"./p-82888562.js";import"./p-b37db934.js";import"./p-237dc417.js";import"./p-f6aca36e.js";const c=t.getLogger("esri.views.2d.layers.features.support.whereUtils"),l={getAttribute:(t,s)=>t.field(s)};async function d(t,i){const e=await import("./p-babdd7a5.js");try{const r=e.WhereClause.create(t,i);if(!r.isStandardized){const t=new s("mapview - bad input","Unable to apply filter's definition expression, as expression is not standardized.",r);c.error(t)}return t=>{const s=t.readArcadeFeature();return r.testFeature(s,l)}}catch(s){return c.warn("mapview-bad-where-clause","Encountered an error when evaluating where clause",t),()=>!0}}const f=t.getLogger("esri.views.2d.layers.features.controllers.FeatureFilter");export default class{constructor(t){this._geometryBounds=i(),this._idToVisibility=new Map,this._serviceInfo=t}get hash(){return this._hash}check(t){return this._applyFilter(t)}clear(){const t=this._resetAllHiddenIds();return this.update(),{show:t,hide:[]}}invalidate(){this._idToVisibility.forEach(((t,s)=>{this._idToVisibility.set(s,0)}))}setKnownIds(t){for(const s of t)this._idToVisibility.set(s,1)}setTrue(t){const s=[],i=[],e=new Set(t);return this._idToVisibility.forEach(((t,r)=>{const p=!!(1&this._idToVisibility.get(r)),a=e.has(r);!p&&a?s.push(r):p&&!a&&i.push(r),this._idToVisibility.set(r,a?3:0)})),{show:s,hide:i}}createQuery(){const{geometry:t,spatialRel:s,where:i,timeExtent:e,objectIds:r}=this;return a.fromJSON({geometry:t,spatialRel:s,where:i,timeExtent:e,objectIds:r})}async update(t,s){this._hash=JSON.stringify(t);const i=await o(t,null,s);await e([this._setGeometryFilter(i),this._setIdFilter(i),this._setAttributeFilter(i),this._setTimeFilter(i)])}async _setAttributeFilter(t){if(!t||!t.where)return this._clause=null,void(this.where=null);this._clause=await d(t.where,this._serviceInfo.fieldsIndex),this.where=t.where}_setIdFilter(t){this._idsToShow=t&&t.objectIds&&new Set(t.objectIds),this._idsToHide=t&&t.hiddenIds&&new Set(t.hiddenIds),this.objectIds=t&&t.objectIds}async _setGeometryFilter(t){if(!t||!t.geometry)return this._spatialQueryOperator=null,this.geometry=null,void(this.spatialRel=null);const s=t.geometry,i=t.spatialRel||"esriSpatialRelIntersects",e=await n(i,s,this._serviceInfo.geometryType,this._serviceInfo.hasZ,this._serviceInfo.hasM);r(this._geometryBounds,s),this._spatialQueryOperator=e,this.geometry=s,this.spatialRel=i}_setTimeFilter(t){if(this.timeExtent=this._timeOperator=null,t&&t.timeExtent)if(this._serviceInfo.timeInfo)this.timeExtent=t.timeExtent,this._timeOperator=h(this._serviceInfo.timeInfo,t.timeExtent,m);else{const i=new s("feature-layer-view:time-filter-not-available","Unable to apply time filter, as layer doesn't have time metadata.",t.timeExtent);f.error(i)}}_applyFilter(t){return this._filterByGeometry(t)&&this._filterById(t)&&this._filterByTime(t)&&this._filterByExpression(t)}_filterByExpression(t){return!this.where||this._clause(t)}_filterById(t){return(!this._idsToHide||!this._idsToHide.size||!this._idsToHide.has(t.getObjectId()))&&(!this._idsToShow||!this._idsToShow.size||this._idsToShow.has(t.getObjectId()))}_filterByGeometry(t){if(!this.geometry)return!0;const s=t.readHydratedGeometry();return!!s&&this._spatialQueryOperator(s)}_filterByTime(t){return!p(this._timeOperator)||this._timeOperator(t)}_resetAllHiddenIds(){const t=[];return this._idToVisibility.forEach(((s,i)=>{1&s||(this._idToVisibility.set(i,1),t.push(i))})),t}}
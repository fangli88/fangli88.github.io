import"./p-476cf7c4.js";import{D as e,E as t,F as i,b9 as r,J as s,K as n,L as a,s as o,eo as l,bl as u,I as c,aU as d,w as h,C as p,cp as m,b as y,M as f,al as g,l as v,z as w,y as R,a3 as b,t as S,m as I,O as j,ep as x,i as T,h as N,x as M,U as O,bd as D,eq as F,cB as A,cc as V}from"./p-dc4230e0.js";import"./p-643e1e47.js";import{y as P}from"./p-66f366a9.js";import"./p-ebb65ba7.js";import"./p-78c83631.js";import"./p-098cc742.js";import"./p-76e49c46.js";import"./p-540c739d.js";import{P as C}from"./p-00eed204.js";import{i as _}from"./p-505542c8.js";import q from"./p-b415e09b.js";import{l as k,b as J}from"./p-05aa0405.js";import{m as U}from"./p-6e5ff36c.js";import{y as E,p as z,l as B,c as G,b as L}from"./p-5e52b0f8.js";import"./p-6a7ee25c.js";import{p as H}from"./p-6d77caaa.js";import{d as Q}from"./p-536a38f2.js";import"./p-5f01bb6f.js";import{r as W,n as $,e as K}from"./p-b5c5bff9.js";import{R as X}from"./p-aedb886e.js";import"./p-0a74e573.js";import"./p-46a6b4f6.js";import"./p-8493f348.js";import{s as Y}from"./p-a1a69fdc.js";import"./p-0038f454.js";import"./p-1f2c53c6.js";import"./p-725a886f.js";import"./p-b3fbb570.js";import{t as Z}from"./p-4cc1d148.js";import{o as ee}from"./p-3ce6769f.js";import{s as te}from"./p-3a5e7221.js";import{f as ie}from"./p-25ae7985.js";import{a as re}from"./p-43e6d0b9.js";import"./p-24476141.js";import"./p-0e87baef.js";import"./p-80a59d87.js";import"./p-90bfedb8.js";import{O as se}from"./p-a2136a85.js";import"./p-49a8c628.js";import{f as ne,n as ae,b as oe,R as le,U as ue,I as ce,u as de}from"./p-dc84830d.js";import{n as he,a as pe,o as me,l as ye,u as fe,w as ge,T as ve,y as we,f as Re}from"./p-3ff7d073.js";var be;const Se=new Set(["Raster","Raster2","DEM","FillRaster"]),Ie=new Set(["Rasters"]),je=e=>e&&e.rasterFunction?Ne.fromJSON(e):e,xe=e=>e&&e instanceof Ne?e.toJSON():e;var Te;!function(e){e[e.MOSAIC=0]="MOSAIC",e[e.GROUP=1]="GROUP",e[e.ITEM=2]="ITEM"}(Te||(Te={}));let Ne=be=class extends a{constructor(e){super(e),this.functionArguments=null,this.functionName=null,this.outputPixelType="unknown",this.variableName=null,this.description=null,this.functionDefinition=null,this.thumbnail=null}readFunctionArguments(e,t){return(e=>{if(null==e)return null;const t={};for(const i of Object.keys(e))t[i]=Se.has(i)?je(e[i]):Ie.has(i)&&Array.isArray(e[i])?e[i].map(je):e[i];return t})(t.arguments||t.rasterFunctionArguments)}writeFunctionArguments(e,t,i){const r={};for(const t of Object.keys(e))r[t]=Se.has(t)?xe(e[t]):Ie.has(t)&&Array.isArray(e[t])?e[t].map(xe):xe(e[t]);this.functionDefinition?t.arguments=r:t[i]=r}readFunctionName(e,t){const i=t.rasterFunctionInfos;return t.name||(i&&i.length&&"None"!==i[0].name?i[0].name:t.rasterFunction)}writeFunctionName(e,t,i){this.functionDefinition?t.name=e:t[i]=e}readFunctionType(e){return Te[e]}writeFunctionType(e,t,i){t[i]=Te[e]}clone(){return new be({functionName:this.functionName,functionArguments:o(this.functionArguments),outputPixelType:this.outputPixelType,variableName:this.variableName,description:this.description,functionType:this.functionType,functionDefinition:this.functionDefinition,thumbnail:this.thumbnail})}};e([t({json:{type:Object,write:{target:"rasterFunctionArguments"}}})],Ne.prototype,"functionArguments",void 0),e([i("functionArguments",["rasterFunctionArguments","arguments"])],Ne.prototype,"readFunctionArguments",null),e([r("functionArguments")],Ne.prototype,"writeFunctionArguments",null),e([t({json:{type:String,write:{target:"rasterFunction"}}})],Ne.prototype,"functionName",void 0),e([i("functionName",["rasterFunction","rasterFunctionInfos","name"])],Ne.prototype,"readFunctionName",null),e([r("functionName")],Ne.prototype,"writeFunctionName",null),e([s({C128:"c128",C64:"c64",F32:"f32",F64:"f64",S16:"s16",S32:"s32",S8:"s8",U1:"u1",U16:"u16",U2:"u2",U32:"u32",U4:"u4",U8:"u8",UNKNOWN:"unknown"},{ignoreUnknown:!1}),t({json:{default:"unknown"}})],Ne.prototype,"outputPixelType",void 0),e([t({type:String,json:{read:!0,write:!0}})],Ne.prototype,"variableName",void 0),e([t({type:String,json:{read:!0,write:!0,origins:{"web-document":{read:!1,write:!1}}}})],Ne.prototype,"description",void 0),e([t({json:{origins:{"web-document":{read:!1,write:!1}}}})],Ne.prototype,"functionType",void 0),e([i("functionType")],Ne.prototype,"readFunctionType",null),e([r("functionType")],Ne.prototype,"writeFunctionType",null),e([t({type:Object,json:{read:{source:"function"},write:{target:"function"},origins:{"web-document":{read:!1,write:!1}}}})],Ne.prototype,"functionDefinition",void 0),e([t({type:String,json:{read:!0,write:!0,origins:{"web-document":{read:!1,write:!1}}}})],Ne.prototype,"thumbnail",void 0),Ne=be=e([n("esri.layers.support.RasterFunction")],Ne);var Me=Ne;const Oe={u1:[0,1],u2:[0,3],u4:[0,15],u8:[0,255],s8:[-128,127],u16:[0,65535],s16:[-32768,32767],u32:[0,4294967295],s32:[-2147483648,2147483647],f32:[-34e38,34e38],f64:[-Number.MAX_VALUE,Number.MAX_VALUE]},De={simple_scalar:"Simple Scalar",wind_barb:"Wind Barb",single_arrow:"Single Arrow",beaufort_kn:"Beaufort Wind (Knots)",beaufort_m:"Beaufort Wind (MetersPerSecond)",ocean_current_m:"Ocean Current (MetersPerSecond)",ocean_current_kn:"Ocean Current (Knots)"},Fe=new Set(["raster-stretch","unique-value","class-breaks","raster-shaded-relief","vector-field","raster-colormap"]);function Ae(e){return Fe.has(e.type)}function Ve(e,t){if(!e||!t)return o(e||t);const i=o(e);return"none"!==t.functionName.toLowerCase()&&(Pe(i.functionArguments).Raster=t),i}function Pe(e){const t=e.Raster;return t&&"esri.layers.support.RasterFunction"===t.declaredClass?Pe(t.functionArguments):e}const Ce={none:0,standardDeviation:3,histogramEqualization:4,minMax:5,percentClip:6,sigmoid:9};function _e(e,t){const i=Oe[String(t).toLowerCase()];return i&&e.push([Math.floor(i[0]-1),0,0,0],[Math.ceil(i[1]+1),0,0,0]),e}function qe(e){if(!e)return;const{fields:t}=e,i=t&&t.find((e=>e&&e.name&&"value"===e.name.toLowerCase()));return i&&i.name}var ke;const Je=u()({MT_FIRST:"first",MT_LAST:"last",MT_MIN:"min",MT_MAX:"max",MT_MEAN:"mean",MT_BLEND:"blend",MT_SUM:"sum"}),Ue=u()({esriMosaicNone:"none",esriMosaicCenter:"center",esriMosaicNadir:"nadir",esriMosaicViewpoint:"viewpoint",esriMosaicAttribute:"attribute",esriMosaicLockRaster:"lock-raster",esriMosaicNorthwest:"northwest",esriMosaicSeamline:"seamline"});let Ee=ke=class extends a{constructor(e){super(e),this.ascending=!0,this.itemRenderingRule=null,this.lockRasterIds=null,this.method=null,this.multidimensionalDefinition=null,this.objectIds=null,this.operation=null,this.sortField=null,this.sortValue=null,this.viewpoint=null,this.where=null}readAscending(e,t){return null!=t.ascending?t.ascending:null==t.sortAscending||t.sortAscending}readMethod(e,t){return function(e){let t;switch(e?e.toLowerCase().replace("esrimosaic",""):""){case"byattribute":case"attribute":t="esriMosaicAttribute";break;case"lockraster":t="esriMosaicLockRaster";break;case"center":t="esriMosaicCenter";break;case"northwest":t="esriMosaicNorthwest";break;case"nadir":t="esriMosaicNadir";break;case"viewpoint":t="esriMosaicViewpoint";break;case"seamline":t="esriMosaicSeamline";break;case"none":default:t="esriMosaicNone"}return Ue.fromJSON(t)}(t.mosaicMethod||t.defaultMosaicMethod)}readOperation(e,t){const i=t.mosaicOperation,r=t.mosaicOperator&&t.mosaicOperator.toLowerCase(),s=i||(r?Je.toJSON(r):null);return Je.fromJSON(s)||"first"}castSortValue(e){return null==e||"string"==typeof e||"number"==typeof e?e:`${e}`}clone(){return new ke({ascending:this.ascending,itemRenderingRule:o(this.itemRenderingRule),lockRasterIds:o(this.lockRasterIds),method:this.method,multidimensionalDefinition:o(this.multidimensionalDefinition),objectIds:o(this.objectIds),operation:this.operation,sortField:this.sortField,sortValue:this.sortValue,viewpoint:o(this.viewpoint),where:this.where})}};e([t({type:Boolean,json:{write:!0}})],Ee.prototype,"ascending",void 0),e([i("ascending",["ascending","sortAscending"])],Ee.prototype,"readAscending",null),e([t({type:Me,json:{write:!0}})],Ee.prototype,"itemRenderingRule",void 0),e([t({type:[c],json:{write:{overridePolicy(){return{enabled:"lock-raster"===this.method}}}}})],Ee.prototype,"lockRasterIds",void 0),e([t({type:String,json:{type:Ue.jsonValues,write:{target:"mosaicMethod",writer:Ue.write}}})],Ee.prototype,"method",void 0),e([i("method",["mosaicMethod","defaultMosaicMethod"])],Ee.prototype,"readMethod",null),e([t({type:[pe],json:{write:!0}})],Ee.prototype,"multidimensionalDefinition",void 0),e([t({type:[c],json:{name:"fids",write:!0}})],Ee.prototype,"objectIds",void 0),e([t({json:{type:Je.jsonValues,read:{reader:Je.read},write:{target:"mosaicOperation",writer:Je.write}}})],Ee.prototype,"operation",void 0),e([i("operation",["mosaicOperation","mosaicOperator"])],Ee.prototype,"readOperation",null),e([t({type:String,json:{write:{overridePolicy(){return{enabled:"attribute"===this.method}}}}})],Ee.prototype,"sortField",void 0),e([t({type:[String,Number],json:{write:{allowNull:!0,overridePolicy(){return{enabled:"attribute"===this.method,allowNull:!0}}}}})],Ee.prototype,"sortValue",void 0),e([d("sortValue")],Ee.prototype,"castSortValue",null),e([t({type:h,json:{write:!0}})],Ee.prototype,"viewpoint",void 0),e([t({type:String,json:{write:!0}})],Ee.prototype,"where",void 0),Ee=ke=e([n("esri.layers.support.MosaicRule")],Ee);var ze=Ee;const Be=new p({RSP_NearestNeighbor:"nearest",RSP_BilinearInterpolation:"bilinear",RSP_CubicConvolution:"cubic",RSP_Majority:"majority"}),Ge=new p({esriNoDataMatchAny:"any",esriNoDataMatchAll:"all"});let Le=class extends a{constructor(){super(...arguments),this.layer=null,this.adjustAspectRatio=void 0,this.bandIds=void 0,this.compression=void 0,this.compressionQuality=void 0,this.compressionTolerance=.01,this.format=null,this.interpolation=null,this.noData=null,this.noDataInterpretation=void 0,this.pixelType=void 0,this.lercVersion=2}writeAdjustAspectRatio(e,t,i){this.layer.version<10.3||(t[i]=e)}writeCompressionQuality(e,t,i){this.format&&this.format.toLowerCase().indexOf("jpg")>-1&&null!=e&&(t[i]=e)}writeCompressionTolerance(e,t,i){"lerc"===this.format&&null!=e&&(t[i]=e)}writeLercVersion(e,t,i){"lerc"===this.format&&this.layer.version>=10.5&&(t[i]=e)}get version(){return(this._get("version")||0)+1}set version(e){this._set("version",e)}get mosaicRule(){const e=this.layer;let t=e.mosaicRule;const i=e.definitionExpression;return t?i&&i!==t.where&&(t=t.clone(),t.where=i):i&&(t=new ze({where:i})),t}get renderingRule(){const e=this.layer;let t=e.renderingRule;const i=e.pixelFilter,r=!e.format||e.format.indexOf("jpg")>-1||e.format.indexOf("png")>-1;return t=this._addResampleRasterFunction(t),r&&!i&&(t=this.combineRendererWithRenderingRule()),t}combineRendererWithRenderingRule(){var e;const t=this.layer,{rasterInfo:i,renderingRule:r,renderer:s}=t;return s&&Ae(s)?Ve(function(e,t){switch(t=t||{},e.type){case"raster-stretch":return function(e,t){const i=new Me;i.functionName="Stretch";const r=Ce[he.toJSON(e.stretchType)],s="u8",n={StretchType:r,Statistics:function(e){const t=[];return e.forEach((e=>{const i=e;if(Array.isArray(i))t.push(i);else{if(null==i.min||null==i.max)return;t.push([i.min,i.max,i.avg||0,i.stddev||0])}})),t}(e.statistics),DRA:e.dynamicRangeAdjustment,UseGamma:e.useGamma,Gamma:e.gamma,ComputeGamma:e.computeGamma};if(null!=e.outputMin&&(n.Min=e.outputMin),null!=e.outputMax&&(n.Max=e.outputMax),r===Ce.standardDeviation?(n.NumberOfStandardDeviations=e.numberOfStandardDeviations,i.outputPixelType=s):r===Ce.percentClip?(n.MinPercent=e.minPercent,n.MaxPercent=e.maxPercent,i.outputPixelType=s):r===Ce.minMax?i.outputPixelType=s:r===Ce.sigmoid&&(n.SigmoidStrengthLevel=e.sigmoidStrengthLevel),i.functionArguments=n,i.variableName="Raster",e.colorRamp){const r=e.colorRamp,s=new Me,n=ae(r);return s.functionArguments=n?{colorRamp:n}:!t.convertColorRampToColormap||"algorithmic"!==r.type&&"multipart"!==r.type?{colorRamp:e.colorRamp.toJSON()}:{Colormap:ne(r,256)},s.variableName="Raster",s.functionName="Colormap",s.functionArguments.Raster=i,s}return i}(e,t);case"class-breaks":return function(e,t){const i=[],r=[],s=[],n=[],a=1e-6,{pixelType:o,rasterAttributeTable:l}=t,u=l&&l.features,c=qe(l);if(u&&Array.isArray(u)&&e.classBreakInfos){e.classBreakInfos.forEach(((t,i)=>{const r=t.symbol.color;let s;r.a&&u.forEach((a=>{s=a.attributes[e.field],(s>=t.minValue&&s<t.maxValue||i===e.classBreakInfos.length-1&&s>=t.minValue)&&n.push([a.attributes[c],r.r,r.g,r.b])}))}));const t=o?_e(n,o):n,i=new Me;return i.functionName="Colormap",i.functionArguments={},i.functionArguments.Colormap=t,i.variableName="Raster",i}e.classBreakInfos.forEach(((e,t)=>{const o=e.symbol&&e.symbol.color;o.a?(i.push(0===t?e.minValue:e.minValue+a,e.maxValue+a),r.push(t),n.push([t,o.r,o.g,o.b])):s.push(e.minValue,e.maxValue)}));const d=o?_e(n,o):n,h=new Me;h.functionName="Remap",h.functionArguments={InputRanges:i,OutputValues:r,NoDataRanges:s},h.variableName="Raster";const p=new Me;return p.functionName="Colormap",p.functionArguments={Colormap:d,Raster:h},p}(e,t);case"unique-value":return function(e,t){const i=[],{pixelType:r,rasterAttributeTable:s}=t,n=s&&s.features,a=qe(s);let o=!1;if(e.uniqueValueInfos&&e.uniqueValueInfos.forEach((t=>{const r=t.symbol.color;r.a&&(e.field!==a&&n?n&&n.forEach((s=>{String(s.attributes[e.field])===String(t.value)&&i.push([s.attributes[a],r.r,r.g,r.b])})):isNaN(+t.value)?o=!0:i.push([+t.value,r.r,r.g,r.b]))})),o)return null;const l=r&&i.length>0?_e(i,r):i,u=new Me;return u.functionName="Colormap",u.functionArguments={},u.functionArguments.Colormap=l,u.variableName="Raster",u}(e,t);case"raster-colormap":return function(e,t){const i=e.extractColormap();if(!i||0===i.length)return;const{pixelType:r}=t,s=r?_e(i,r):i,n=new Me;return n.functionName="Colormap",n.functionArguments={},n.functionArguments.Colormap=s,n}(e,t);case"vector-field":return function(e,t){const i=new Me;i.functionName="VectorFieldRenderer";const{dataType:r,bandProperties:s}=t,n="vector-uv"===r;let a,o;s&&2===s.length&&(a=s.map((e=>e.BandName.toLowerCase())).indexOf("magnitude"),o=s.map((e=>e.BandName.toLowerCase())).indexOf("direction")),-1!==a&&null!==a||(a=0,o=1);const u="arithmetic"===e.rotationType?1:2,c="flow-from"===e.flowRepresentation?0:1,d=e.visualVariables?e.visualVariables.filter((e=>"Magnitude"===e.field))[0]:new l,h={magnitudeBandID:a,directionBandID:o,isUVComponents:n,referenceSystem:u,massFlowAngleRepresentation:c,symbolTileSize:50,symbolTileSizeUnits:100,calculationMethod:"Vector Average",symbologyName:De[e.style.toLowerCase().replace("-","_")],minimumMagnitude:d.minDataValue,maximumMagnitude:d.maxDataValue,minimumSymbolSize:d.minSize,maximumSymbolSize:d.maxSize};return i.functionArguments=h,i}(e,t);case"raster-shaded-relief":return function(e,t){if("elevation"!==t.dataType)return new Me;const i=new Me;i.functionName="Hillshade";const r="traditional"===e.hillshadeType?0:1,s="none"===e.scalingType?1:3,n={HillshadeType:r,SlopeType:s,ZFactor:e.zFactor};return 0===r&&(n.Azimuth=e.azimuth,n.Altitude=e.altitude),3===s&&(n.PSPower=e.pixelSizePower,n.PSZFactor=e.pixelSizeFactor),i.functionArguments=n,i.variableName="Raster",e.colorRamp&&(i.functionName="ShadedRelief",n.Colormap=ne(e.colorRamp,256)),i}(e,t)}}(s,{rasterAttributeTable:i.attributeTable,pixelType:i.pixelType,dataType:i.dataType,bandProperties:null==(e=i.keyProperties)?void 0:e.BandProperties,convertColorRampToColormap:t.version<10.6}),r):r}_addResampleRasterFunction(e){var t;let i=null;if("vector-field"===(null==(t=this.layer.renderer)?void 0:t.type)){const e={},t=this.layer.renderingRule;if(!t||"Resample"!==t.functionName){const t="esriImageServiceDataTypeVector-UV"===this.layer.serviceDataType?7:10;e.rasterFunction="Resample",e.rasterFunctionArguments={ResamplingType:t,InputCellSize:{x:this.layer.pixelSizeX,y:this.layer.pixelSizeY}}}i=Me.fromJSON(e)}return Ve(i,e)}};e([t()],Le.prototype,"layer",void 0),e([t({json:{write:!0}})],Le.prototype,"adjustAspectRatio",void 0),e([r("adjustAspectRatio")],Le.prototype,"writeAdjustAspectRatio",null),e([t({json:{write:!0}}),m("layer.bandIds")],Le.prototype,"bandIds",void 0),e([t({json:{write:!0}})],Le.prototype,"compression",void 0),e([t({json:{write:!0}}),m("layer.compressionQuality")],Le.prototype,"compressionQuality",void 0),e([r("compressionQuality")],Le.prototype,"writeCompressionQuality",null),e([t({json:{write:!0}}),m("layer.compressionTolerance")],Le.prototype,"compressionTolerance",void 0),e([r("compressionTolerance")],Le.prototype,"writeCompressionTolerance",null),e([t({json:{write:!0}}),m("layer.format")],Le.prototype,"format",void 0),e([t({type:String,json:{read:{reader:Be.read},write:{writer:Be.write}}}),m("layer.interpolation")],Le.prototype,"interpolation",void 0),e([t({json:{write:!0}}),m("layer.noData")],Le.prototype,"noData",void 0),e([t({type:String,json:{read:{reader:Ge.read},write:{writer:Ge.write}}}),m("layer.noDataInterpretation")],Le.prototype,"noDataInterpretation",void 0),e([t({json:{write:!0}})],Le.prototype,"pixelType",void 0),e([t({json:{write:!0}})],Le.prototype,"lercVersion",void 0),e([r("lercVersion")],Le.prototype,"writeLercVersion",null),e([t({type:Number,dependsOn:["layer.adjustAspectRatio","layer.bandIds","layer.format","layer.compressionQuality","layer.compressionTolerance","layer.definitionExpression","layer.interpolation","layer.noData","layer.noDataInterpretation","layer.mosaicRule","layer.renderingRule","layer.pixelFilter","layer.renderer","lercVersion","pixelType"]})],Le.prototype,"version",null),e([t({dependsOn:["layer.mosaicRule","layer.definitionExpression"],json:{write:!0}})],Le.prototype,"mosaicRule",null),e([t({dependsOn:["layer.renderingRule","layer.renderer","layer.rasterInfo","layer.format"],json:{write:!0}})],Le.prototype,"renderingRule",null),Le=e([n("esri.layers.mixins.ExportImageServiceParameters")],Le);let He=class extends a{constructor(){super(...arguments),this.catalogItemVisibilities=null,this.catalogItems=null,this.location=null,this.name=null,this.objectId=null,this.processedValues=null,this.properties=null,this.value=null}};e([t({json:{write:!0}})],He.prototype,"catalogItemVisibilities",void 0),e([t({type:q,json:{write:!0}})],He.prototype,"catalogItems",void 0),e([t({type:h,json:{write:!0}})],He.prototype,"location",void 0),e([t({json:{write:!0}})],He.prototype,"name",void 0),e([t({json:{write:!0}})],He.prototype,"objectId",void 0),e([t({json:{write:!0}})],He.prototype,"processedValues",void 0),e([t({json:{write:!0}})],He.prototype,"properties",void 0),e([t({json:{write:!0}})],He.prototype,"value",void 0),He=e([n("esri.tasks.support.ImageIdentifyResult")],He);var Qe=He;async function We(e,t,i){const r=K(e),s=t.geometry?[t.geometry]:[],n=await C(s),a=t.toJSON();!function(e){const t=null==e?void 0:e.time;if(t&&(null!=t.start||null!=t.end)){const i=[];null!=t.start&&i.push(t.start),null!=t.end&&-1===i.indexOf(t.end)&&i.push(t.end),e.time=i.join(",")}}(a);const o=n&&n[0];y(o)&&(a.geometry=o.toJSON());const l=W({...r.query,f:"json",...a});return $(l,i)}let $e=class extends _{execute(e,t){return async function(e,t,i){const r=K(e);return C(t.geometry?[t.geometry]:[]).then((e=>{const s=t.toJSON(),n=e&&e[0];y(n)&&(s.geometry=JSON.stringify(n.toJSON()));const a=W({...r.query,f:"json",...s}),o=$(a,i);return f(r.path+"/identify",o)})).then((e=>Qe.fromJSON(e.data)))}(this.url,e,t)}};$e=e([n("esri.tasks.ImageIdentifyTask")],$e);var Ke,Xe=$e;let Ye=Ke=class extends a{constructor(){super(...arguments),this.geometry=null,this.renderingRules=null,this.pixelSize=null,this.returnGeometry=!0,this.returnCatalogItems=!0,this.returnPixelValues=!0,this.maxItemCount=null,this.timeExtent=null,this.raster=void 0,this.viewId=void 0}writeGeometry(e,t,i){null!=e&&(t.geometryType=g(e),t[i]=JSON.stringify(e.toJSON()))}set mosaicRule(e){let t=e;t&&t.mosaicMethod&&(t=ze.fromJSON({...t.toJSON(),mosaicMethod:t.mosaicMethod,mosaicOperation:t.mosaicOperation})),this._set("mosaicRule",t)}writeMosaicRule(e,t,i){null!=e&&(t[i]=JSON.stringify(e.toJSON()))}set renderingRule(e){let t=e;t&&t.rasterFunction&&(t=Me.fromJSON({...t.toJSON(),rasterFunction:t.rasterFunction,rasterFunctionArguments:t.rasterFunctionArguments})),this._set("renderingRule",t)}writeRenderingRule(e,t,i){null!=e&&(t[i]=JSON.stringify(e.toJSON()))}writeRenderingRules(e,t,i){null!=e&&(t[i]=JSON.stringify(e.map((e=>e.toJSON()))))}writePixelSize(e,t,i){null!=e&&(t[i]=JSON.stringify(e))}writeTimeExtent(e,t,i){if(null!=e){const r=e.start?e.start.getTime():null,s=e.end?e.end.getTime():null;t[i]=null!=r?null!=s?`${r},${s}`:`${r}`:null}}clone(){return new Ke(o({geometry:this.geometry,mosaicRule:this.mosaicRule,renderingRule:this.renderingRule,pixelSize:this.pixelSize,returnGeometry:this.returnGeometry,returnCatalogItems:this.returnCatalogItems,returnPixelValues:this.returnPixelValues,maxItemCount:this.maxItemCount,raster:this.raster,viewId:this.viewId,timeExtent:this.timeExtent}))}};e([t({json:{write:!0}})],Ye.prototype,"geometry",void 0),e([r("geometry")],Ye.prototype,"writeGeometry",null),e([t({type:ze,json:{write:!0}})],Ye.prototype,"mosaicRule",null),e([r("mosaicRule")],Ye.prototype,"writeMosaicRule",null),e([t({type:Me,json:{write:!0}})],Ye.prototype,"renderingRule",null),e([r("renderingRule")],Ye.prototype,"writeRenderingRule",null),e([t({type:[Me],json:{write:!0}})],Ye.prototype,"renderingRules",void 0),e([r("renderingRules")],Ye.prototype,"writeRenderingRules",null),e([t({type:h,json:{write:!0}})],Ye.prototype,"pixelSize",void 0),e([r("pixelSize")],Ye.prototype,"writePixelSize",null),e([t({type:Boolean,json:{write:!0}})],Ye.prototype,"returnGeometry",void 0),e([t({type:Boolean,json:{write:!0}})],Ye.prototype,"returnCatalogItems",void 0),e([t({type:Boolean,json:{write:!0}})],Ye.prototype,"returnPixelValues",void 0),e([t({type:Number,json:{write:!0}})],Ye.prototype,"maxItemCount",void 0),e([t({type:U,json:{write:{target:"time"}}})],Ye.prototype,"timeExtent",void 0),e([r("timeExtent")],Ye.prototype,"writeTimeExtent",null),e([t({json:{write:!0}})],Ye.prototype,"raster",void 0),e([t({json:{write:!0}})],Ye.prototype,"viewId",void 0),Ye=Ke=e([n("esri.tasks.support.ImageIdentifyParameters")],Ye);var Ze=Ye;const et=v.getLogger("esri.layers.mixins.ArcGISImageService"),tt=u()({RSP_NearestNeighbor:"nearest",RSP_BilinearInterpolation:"bilinear",RSP_CubicConvolution:"cubic",RSP_Majority:"majority"}),it=u()({esriNoDataMatchAny:"any",esriNoDataMatchAll:"all"}),rt=u()({U1:"u1",U2:"u2",U4:"u4",U8:"u8",S8:"s8",U16:"u16",S16:"s16",U32:"u32",S32:"s32",F32:"f32",F64:"f64",C64:"c64",C128:"c128",UNKNOWN:"unknown"}),st=new Set(["png","png8","png24","png32","jpg","bmp","gif","jpgpng","lerc","tiff"]),nt=F(A,{min:0,max:255}),at=s=>{let a=class extends s{constructor(){super(...arguments),this._functionRasterInfos={},this._rasterJobHandler={instance:null,refCount:0,connectionPromise:null},this._symbolizer=null,this._defaultServiceMosaicRule=null,this.rasterAttributeTableFieldPrefix="Raster.",this.adjustAspectRatio=null,this.bandCount=null,this.bandIds=void 0,this.capabilities=null,this.compressionQuality=void 0,this.compressionTolerance=.01,this.copyright=null,this.definitionExpression=null,this.exportImageServiceParameters=null,this.rasterInfo=null,this.fields=null,this.fullExtent=null,this.hasMultidimensions=!1,this.imageMaxHeight=4100,this.imageMaxWidth=4100,this.interpolation=void 0,this.minScale=0,this.maxScale=0,this.multidimensionalInfo=null,this.noData=null,this.noDataInterpretation=void 0,this.objectIdField=null,this.pixelSizeX=null,this.pixelSizeY=null,this.pixelFilter=null,this.raster=void 0,this.viewId=void 0,this.renderer=null,this.rasterAttributeTable=null,this.rasterFunctionInfos=null,this.serviceDataType=null,this.spatialReference=null,this.pixelType=null,this.serviceRasterInfo=null,this.sourceJSON=null,this.url=null,this.version=null}initialize(){this._set("exportImageServiceParameters",new Le({layer:this}))}readDefaultServiceMosaicRule(e,t){return ze.fromJSON(t)}get rasterFunctionNamesIndex(){const e=new Map;return!this.rasterFunctionInfos||this.rasterFunctionInfos.length<1||this.rasterFunctionInfos.forEach((t=>{e.set(t.name.toLowerCase().replace(/ /gi,"_"),t.name)})),e}get queryTask(){return new se({url:this.url})}readBandIds(e,t){if(Array.isArray(e)&&e.length>0&&e.every((e=>"number"==typeof e)))return e}readCapabilities(e,t){return this._readCapabilities(t)}writeCompressionQuality(e,t,i){null!=e&&"lerc"!==this.format&&(t[i]=e)}writeCompressionTolerance(e,t,i){"lerc"===this.format&&null!=e&&(t[i]=e)}get fieldsIndex(){return this.fields?new Y(this.fields):null}set format(e){e&&st.has(e.toLowerCase())&&this._set("format",e.toLowerCase())}readFormat(e,t){return"esriImageServiceDataTypeVector-UV"===t.serviceDataType||"esriImageServiceDataTypeVector-MagDir"===t.serviceDataType||null!=this.pixelFilter?"lerc":"jpgpng"}readMinScale(e,t){return null!=t.minLOD&&null!=t.maxLOD?e:0}readMaxScale(e,t){return null!=t.minLOD&&null!=t.maxLOD?e:0}set mosaicRule(e){let t=e;t&&t.mosaicMethod&&(t=ze.fromJSON({...t.toJSON(),mosaicMethod:t.mosaicMethod,mosaicOperation:t.mosaicOperation})),this._set("mosaicRule",t)}readMosaicRule(e,t){return ze.fromJSON(e||t.mosaicRule||t)}writeMosaicRule(e,t,i){let r=this.mosaicRule;const s=this.definitionExpression;r?s&&s!==r.where&&(r=r.clone(),r.where=s):s&&(r=new ze({where:s})),this._isValidCustomizedMosaicRule(r)&&(t[i]=r.toJSON())}writeNoData(e,t,i){null!=e&&"number"==typeof e&&(t[i]=nt(e))}readObjectIdField(e,t){if(!e){const i=t.fields.filter((e=>"esriFieldTypeOID"===e.type||"oid"===e.type));e=i&&i[0]&&i[0].name}return e}get parsedUrl(){return this.url?b(this.url):null}readRenderer(e,t,i){const r=fe(t&&t.layerDefinition&&t.layerDefinition.drawingInfo&&t.layerDefinition.drawingInfo.renderer,i)||void 0;if(null!=r)return Ae(r)||et.warn("ArcGISImageService","Imagery layer doesn't support given renderer type."),r}get rasterFields(){const e=this.rasterAttributeTableFieldPrefix||"Raster.",t=new P({name:"Raster.ItemPixelValue",alias:"Item Pixel Value",domain:null,editable:!1,length:50,type:"string"}),i=new P({name:"Raster.ServicePixelValue",alias:"Service Pixel Value",domain:null,editable:!1,length:50,type:"string"}),r=new P({name:"Raster.ServicePixelValue.Raw",alias:"Raw Service Pixel Value",domain:null,editable:!1,length:50,type:"string"});let s=this.fields?o(this.fields):[];s.push(i),this.capabilities.operations.supportsQuery&&this.fields&&this.fields.length>0&&s.push(t),this.version>=10.4&&this.rasterFunctionInfos&&this.rasterFunctionInfos.some((e=>"none"===e.name.toLowerCase()))&&s.push(r),this.rasterFunctionInfos&&this.rasterFunctionInfos.filter((e=>"none"!==e.name.toLowerCase())).forEach((e=>{s.push(new P({name:"Raster.ServicePixelValue."+e.name,alias:e.name,domain:null,editable:!1,length:50,type:"string"}))})),null==this.pixelFilter||"esriImageServiceDataTypeVector-UV"!==this.serviceDataType&&"esriImageServiceDataTypeVector-MagDir"!==this.serviceDataType||(s.push(new P({name:"Raster.Magnitude",alias:"Magnitude",domain:null,editable:!1,type:"double"})),s.push(new P({name:"Raster.Direction",alias:"Direction",domain:null,editable:!1,type:"double"})));const n=this.rasterInfo.attributeTable&&this.rasterInfo.attributeTable.fields||null;if(n&&n.length>0){const t=n.filter((e=>"esriFieldTypeOID"!==e.type&&"value"!==e.name.toLowerCase())).map((t=>{const i=o(t);return i.name=e+t.name,i}));s=s.concat(t)}return s}set renderingRule(e){let t=e;t&&t.rasterFunction&&(t=Me.fromJSON({...t.toJSON(),rasterFunction:t.rasterFunction,rasterFunctionArguments:t.rasterFunctionArguments})),this._set("renderingRule",t)}readRenderingRule(e,t){const i=t.rasterFunctionInfos;return t.renderingRule||i&&i.length&&"None"!==i[0].name?Me.fromJSON(t.renderingRule||{rasterFunctionInfos:t.rasterFunctionInfos}):null}writeRenderingRule(e,t,i){this._isRFTJson(e)||(t[i]=e.toJSON())}readSpatialReference(e,t){const i=e||t.extent.spatialReference;return i?R.fromJSON(i):null}readPixelType(e){return rt.fromJSON(e)||e}writePixelType(e,t,i){(S(this.serviceRasterInfo)||this.pixelType!==this.serviceRasterInfo.pixelType)&&(t[i]=rt.toJSON(e))}readVersion(e,t){let i=t.currentVersion;return i||(i=t.hasOwnProperty("fields")||t.hasOwnProperty("timeInfo")?10:9.3),i}applyFilter(e){let t=e;return this.pixelFilter&&(t=this._clonePixelData(e),this.pixelFilter(t)),t}async applyRenderer(e,t){let i=e;if(!this._isPicture()&&this.renderer&&this._symbolizer&&!this.pixelFilter){const r=JSON.stringify(this._cachedRendererJson)!==JSON.stringify(this.renderer.toJSON()),s=this._rasterJobHandler.instance,{bandIds:n}=this;if(s){r&&(this._symbolizer.bind(),await s.updateSymbolizer(this._symbolizer,t),this._cachedRendererJson=this.renderer.toJSON());const a=await s.symbolize({bandIds:n,...e},t);i={extent:e.extent,pixelBlock:a}}else i={extent:e.extent,pixelBlock:this._symbolizer.symbolize({bandIds:n,...e})}}return i}destroy(){this._shutdownJobHandler()}increaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount++}decreaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount--,this._rasterJobHandler.refCount<=0&&this._shutdownJobHandler()}async computeHistograms(e,t){const i=null==t?void 0:t.signal;if(await this._fetchCapabilities(i),!this.capabilities.operations.supportsComputeHistograms)throw new I("imagery-layer:compute-histograms","this operation is not supported on the input image service");e=e.clone();const{raster:r,mosaicRule:s,renderingRule:n}=this;return n&&null==e.renderingRule&&(e.renderingRule=n),s&&null==e.mosaicRule&&(e.mosaicRule=s),r&&null==e.raster&&(e.raster=r),async function(e,t,i){const r=await We(e,t,i),s=K(e),{data:n}=await f(`${s.path}/computeHistograms`,r);return{histograms:n.histograms}}(this.url,e,{signal:i})}async computeStatisticsHistograms(e,t){const i=null==t?void 0:t.signal;if(await this._fetchCapabilities(i),!this.capabilities.operations.supportsComputeStatisticsHistograms)throw new I("imagery-layer:compute-statistics-histograms","this operation is not supported on the input image service");e=e.clone();const{raster:r,mosaicRule:s,renderingRule:n}=this;return n&&null==e.renderingRule&&(e.renderingRule=n),s&&null==e.mosaicRule&&(e.mosaicRule=s),r&&null==e.raster&&(e.raster=r),async function(e,t,i){const r=await We(e,t,i),s=K(e),{data:n}=await f(`${s.path}/computeStatisticsHistograms`,r),{statistics:a}=n;return null!=a&&a.length&&a.forEach((e=>{e.avg=e.mean,e.stddev=e.standardDeviation})),{statistics:a,histograms:n.histograms}}(this.url,e,{signal:i})}fetchImage(e,t,i,r={}){if(null==e||null==t||null==i)return j(new I("imagery-layer:fetch-image","Insufficient parameters for requesting an image. A valid extent, width and height values are required."));const s=this.renderer||this._symbolizer?this.generateRasterInfo(this.renderingRule,{signal:r.signal}):null;return x(s).then((s=>{s&&(this.rasterInfo=s);const n={imageServiceParameters:this.getExportImageServiceParameters(e,t,i,r.timeExtent),imageProps:{extent:e,width:t,height:i,format:this.format},requestAsImageElement:r.requestAsImageElement&&!this.pixelFilter||!1,signal:r.signal};return this._requestArrayBuffer(n)}))}fetchKeyProperties(e){const t=e&&e.renderingRule&&e.renderingRule.toJSON();return f(this.parsedUrl.path+"/keyProperties",{query:this._getQueryParams({renderingRule:this.version>=10.3&&t?JSON.stringify(t):null})}).then((e=>e.data))}fetchRasterAttributeTable(e){const t=e&&e.renderingRule&&e.renderingRule.toJSON();return this.version<10.1?j(new I("#fetchRasterAttributeTable()","Failed to get rasterAttributeTable")):f(this.parsedUrl.path+"/rasterAttributeTable",{query:this._getQueryParams({renderingRule:this.version>=10.3&&t?JSON.stringify(t):null})}).then((e=>q.fromJSON(e.data)))}async getCatalogItemRasterInfo(e,t){const i=f(this.parsedUrl.path+"/"+e+"/info",{query:this._getQueryParams(),...t}).then((e=>e.data)),r=f(this.parsedUrl.path+"/"+e+"/info/keyProperties",{query:this._getQueryParams(),...t}).then((e=>e.data)).catch((()=>{})),s=await T([i,r]);if(!s[0])return;const n=w.fromJSON(s[0].extent),a=s[0].statistics?s[0].statistics.map((e=>({min:e[0],max:e[1],avg:e[2],stddev:e[3]}))):null;return new oe({bandCount:s[0].bandCount,extent:n,spatialReference:n.sr,pixelSize:new h({x:s[0].pixelSizeX,y:s[0].pixelSizeY,spatialReference:n.sr}),pixelType:s[0].pixelType.toLowerCase(),statistics:a,histograms:s[0].histograms,keyProperties:s[1]||{}})}async getCatalogItemICSInfo(e,t){const{data:i}=await f(this.parsedUrl.path+"/"+e+"/info/ics",{query:this._getQueryParams(),...t}),r=i&&i.ics;if(!r)return;let s=null;try{s=(await f(this.parsedUrl.path+"/"+e+"/info",{query:this._getQueryParams(),...t})).data.extent}catch{}if(!s||!s.spatialReference)return{ics:r,icsToPixelTransform:null,icsExtent:null,northDirection:null};const n=this.version>=10.7?f(this.parsedUrl.path+"/"+e+"/info/icstopixel",{query:this._getQueryParams(),...t}).then((e=>e.data)).catch((()=>({}))):{},a=s.spatialReference,o={geometries:JSON.stringify({geometryType:"esriGeometryEnvelope",geometries:[s]}),inSR:a.wkid||JSON.stringify(a),outSR:"0:"+e},l=f(this.parsedUrl.path+"/project",{query:this._getQueryParams(o),...t}).then((e=>e.data)).catch((()=>({}))),u=(s.xmin+s.xmax)/2,c=(s.ymax-s.ymin)/6,d=s.ymin+c,h=[];for(let e=0;e<5;e++)h.push({x:u,y:d+c*e});const p={geometries:JSON.stringify({geometryType:"esriGeometryPoint",geometries:h}),inSR:a.wkid||JSON.stringify(a),outSR:"0:"+e},m=f(this.parsedUrl.path+"/project",{query:this._getQueryParams(p),...t}).then((e=>e.data)).catch((()=>({}))),y=await T([n,l,m]);let g=y[0].ipxf;if(null==g){var v,b,S;const e=null==(v=r.geodataXform)?void 0:v.xf_0;"topup"===(null==e||null==(b=e.name)?void 0:b.toLowerCase())&&6===(null==e||null==(S=e.coefficients)?void 0:S.length)&&(g={affine:{name:"ics [sensor: Frame] to pixel (column, row) transformation",coefficients:e.coefficients,cellsizeRatio:0,type:"GeometricXform"}})}const I=w.fromJSON(y[1]&&y[1].geometries&&y[1].geometries[0]);I&&(I.spatialReference=new R({wkid:0,imageCoordinateSystem:r}));const j=y[2].geometries?y[2].geometries.filter((e=>null!=e&&null!=e.x&&null!=e.y&&"NaN"!==e.x&&"NaN"!==e.y)):[],x=j.length;if(x<3)return{ics:r,icsToPixelTransform:g,icsExtent:I,northDirection:null};let N=0,M=0,O=0,D=0;for(let e=0;e<x;e++)N+=j[e].x,M+=j[e].y,O+=j[e].x*j[e].x,D+=j[e].x*j[e].y;const F=(x*D-N*M)/(x*O-N*N);let A=0;const V=j[4].x>j[0].x,P=j[4].y>j[0].y;return F===1/0?A=P?90:270:0===F?A=V?0:180:F>0?A=V?180*Math.atan(F)/Math.PI:180*Math.atan(F)/Math.PI+180:F<0&&(A=P?180+180*Math.atan(F)/Math.PI:360+180*Math.atan(F)/Math.PI),{ics:r,icsToPixelTransform:g,icsExtent:I,northDirection:A}}async generateRasterInfo(e,t){if((!e||"none"===e.functionName.toLowerCase())&&y(this.serviceRasterInfo))return this.serviceRasterInfo;const i=function(e){if(!e)return null;const t=JSON.stringify(e).match(/"rasterFunction":"(.*?")/gi),i=null==t?void 0:t.map((e=>e.replace('"rasterFunction":"',"").replace('"',"")));return i?i.join("/"):null}(e);if(this._functionRasterInfos[i])return this._functionRasterInfos[i];const r=this._generateRasterInfo(e,t);this._functionRasterInfos[i]=r;try{return await r}catch{return this._functionRasterInfos[i]=null,null}}getExportImageServiceParameters(e,t,i,r){const s=(e=e.clone().shiftCentralMeridian()).spatialReference;let n;if(s.imageCoordinateSystem){const{id:e,referenceServiceName:t}=s.imageCoordinateSystem;n=null!=e?t?this.parsedUrl.path.toLowerCase().indexOf("/"+t.toLowerCase()+"/")>-1?"0:"+e:JSON.stringify({icsid:e,icsns:t}):"0:"+e:JSON.stringify({ics:s.imageCoordinateSystem})}else n=s.wkid||JSON.stringify(s.toJSON());y(this.serviceRasterInfo)&&this.pixelType!==this.serviceRasterInfo.pixelType&&(this.exportImageServiceParameters.pixelType=this.pixelType);const a=this.exportImageServiceParameters.toJSON(),{bandIds:o,noData:l,mosaicRule:u,renderingRule:c}=a;o instanceof Array&&o.length>0&&(a.bandIds=o.join(",")),l instanceof Array&&l.length>0&&(a.noData=l.join(","));const d=this.timeInfo;u&&u.multidimensionalDefinition&&r&&d&&d.startField&&(u.multidimensionalDefinition=u.multidimensionalDefinition.filter((e=>e.dimensionName!==d.startField))),a.mosaicRule=u&&JSON.stringify(u),a.renderingRule=c&&JSON.stringify(c);const h={};if(r){const{start:e,end:t}=r.toJSON();e&&t&&e===t?h.time=""+e:null==e&&null==t||(h.time=`${null==e?"null":e},${null==t?"null":t}`)}return{bbox:e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:n,imageSR:n,size:t+","+i,...a,...h}}async identify(e,t){if(await this._fetchCapabilities(null==t?void 0:t.signal),!this.capabilities.operations.supportsIdentify)throw new I("imagery-layer:query-rasters","query operation is not supported on the input image service");e=e.clone();const{raster:i,mosaicRule:r,renderingRule:s}=this;return s&&null==e.renderingRule&&(e.renderingRule=s),r&&null==e.mosaicRule&&(e.mosaicRule=r),i&&null==e.raster&&(e.raster=i),new Xe({url:this.url}).execute(e,t)}async queryRasters(e,t){if(await this._fetchCapabilities(null==t?void 0:t.signal),!this.capabilities.operations.supportsQuery)throw new I("imagery-layer:query-rasters","query operation is not supported on the input image service");return this.queryTask.execute(e,t)}queryVisibleRasters(e,t){if(!e)return j(new I("imagery-layer: query-visible-rasters","missing query parameter"));const{pixelSize:i,returnDomainValues:r,returnTopmostRaster:s,showNoDataRecords:n}=t||{pixelSize:null,returnDomainValues:!1,returnTopmostRaster:!1,showNoDataRecords:!1};let a=!1,o=null,l=null;const u="raster.servicepixelvalue",c=this.rasterFunctionNamesIndex;if(y(e.outFields)&&(a=e.outFields.some((e=>-1===e.toLowerCase().indexOf(u))),this.version>=10.4)){const t=e.outFields.filter((e=>e.toLowerCase().indexOf(u)>-1&&e.length>u.length)).map((e=>{const t=e.slice(u.length+1);return[this._updateRenderingRulesFunctionName(t,c),t]}));o=t.map((e=>new Me({functionName:e[0]}))),l=t.map((e=>e[1])),0===o.length?this.renderingRule?(o.push(this.renderingRule),l.push(this.renderingRule.functionName)):o=null:this.renderingRule&&!o.some((e=>e.functionName===this.renderingRule.functionName))&&(o.push(this.renderingRule),l.push(this.renderingRule.functionName))}const d=S(e.outSpatialReference)||e.outSpatialReference.equals(this.spatialReference),h=this._getQueryParams({geometry:e.geometry,timeExtent:e.timeExtent,mosaicRule:this.exportImageServiceParameters.mosaicRule,renderingRule:this.version<10.4?this.renderingRule:null,renderingRules:o,pixelSize:i,returnCatalogItems:a,returnGeometry:d,maxItemCount:s?1:null});delete h.f;const p=new Ze(h),m=new Xe({url:this.url}),f=this.generateRasterInfo(this.renderingRule);return N((t=>{f.then((()=>{m.execute(p).then((i=>{const s=e.outFields;if(a&&!d&&i.catalogItems&&i.catalogItems.features&&i.catalogItems.features.length>0){const a=this.objectIdField||"ObjectId",o=i.catalogItems.features,u=o.map((e=>e.attributes&&e.attributes[a])),c=new X({objectIds:u,returnGeometry:!0,outSpatialReference:e.outSpatialReference,outFields:[a]});return this.queryRasters(c).then((u=>{u&&u.features&&u.features.length>0&&u.features.forEach((t=>{o.forEach((i=>{i.attributes[a]===t.attributes[a]&&(i.geometry=new M(t.geometry),i.geometry.spatialReference=e.outSpatialReference)}))})),t(this._processVisibleRastersResponse(i,{returnDomainValues:r,templateRRFunctionNames:l,showNoDataRecords:n,templateFields:s}))})).catch((()=>{throw new I("imagery-layer:query-visible-rasters","encountered error when querying visible rasters geometry")}))}t(this._processVisibleRastersResponse(i,{returnDomainValues:r,templateRRFunctionNames:l,showNoDataRecords:n,templateFields:s}))})).catch((()=>{throw new I("imagery-layer:query-visible-rasters","encountered error when querying visible rasters")}))}))}))}async fetchVariableStatisticsHistograms(e,t){const i=f(this.parsedUrl.path+"/statistics",{query:this._getQueryParams({variable:e}),signal:t}).then((e=>{var t;return null==(t=e.data)?void 0:t.statistics})),r=f(this.parsedUrl.path+"/histograms",{query:this._getQueryParams({variable:e}),signal:t}).then((e=>{var t;return null==(t=e.data)?void 0:t.histograms})),s=await T([i,r]);return s[0]&&s[0].forEach((e=>{e.avg=e.mean,e.stddev=e.standardDeviation})),{statistics:s[0]||null,histograms:s[1]||null}}async _fetchService(e){await this._fetchServiceInfo(e),y(this.serviceRasterInfo)&&!this.rasterInfo&&(this.rasterInfo=this.serviceRasterInfo);const t=this.sourceJSON,i=y(this.serviceRasterInfo)?O(this.serviceRasterInfo):this._fetchAuxiliaryRasterInfo({serviceInfo:t,signal:e}).then((e=>(this._set("serviceRasterInfo",e),e))),r=this.renderingRule&&"none"!==this.renderingRule.functionName.toLowerCase()?this.generateRasterInfo(this.renderingRule,{signal:e}):null;return T([i,r]).then((e=>{this._set("rasterInfo",e[1]?e[1]:e[0]),this.renderer&&ge(this.rasterInfo).indexOf(this.renderer.type)<0&&(this.renderer=null,et.warn("ArcGISImageService","Switching to the default renderer. Renderer applied is not valid for this Imagery Layer")),this._configDefaultRenderer(),this.watch("renderer",(()=>this._configDefaultRenderer())),this.watch("renderingRule",(e=>{(this.renderer||this._symbolizer||this.popupEnabled&&this.popupTemplate)&&this.generateRasterInfo(e).then((e=>{e&&(this.rasterInfo=e)}))}));const t=y(this.serviceRasterInfo)&&this.serviceRasterInfo.multidimensionalInfo;t&&this._updateMultidimensionalDefinition(t)}))}async _initJobHandler(){if(null!=this._rasterJobHandler.connectionPromise)return this._rasterJobHandler.connectionPromise;const e=new Re;this._rasterJobHandler.connectionPromise=e.initialize().then((()=>{this._rasterJobHandler.instance=e}),(()=>null)),await this._rasterJobHandler.connectionPromise}_shutdownJobHandler(){this._rasterJobHandler.instance&&this._rasterJobHandler.instance.destroy(),this._rasterJobHandler.instance=null,this._rasterJobHandler.connectionPromise=null,this._rasterJobHandler.refCount=0}async _fetchCapabilities(e){return this.capabilities||await this._fetchServiceInfo(e),this.capabilities}async _fetchServiceInfo(e){var t;let i=this.sourceJSON;if(!i){const{data:t,ssl:r}=await f(this.parsedUrl.path,{query:this._getQueryParams(),signal:e});i=t,this.sourceJSON=i,r&&(this.url=this.url.replace(/^http:/i,"https:"))}if((null==(t=i.capabilities)?void 0:t.toLowerCase().split(",").map((e=>e.trim())).indexOf("tilesonly"))>-1)throw new I("imagery-layer:fetch-service-info","use ImageryTileLayer to open tiles-only image services");this.read(i,{origin:"service",url:this.parsedUrl})}_isPicture(){return!this.format||this.format.indexOf("jpg")>-1||this.format.indexOf("png")>-1}_configDefaultRenderer(){if(!this._isPicture()&&!this.pixelFilter){if(!this.bandIds&&this.rasterInfo.bandCount>=3){const e=ve(this.rasterInfo);!e||3===this.rasterInfo.bandCount&&0===e[0]&&1===e[1]&&2===e[2]||(this.bandIds=e)}var e,t;this.renderer||(this.renderer=we(this.rasterInfo,{bandIds:this.bandIds,variableName:this.renderingRule?null:null==(e=this.mosaicRule)||null==(t=e.multidimensionalDefinition)?void 0:t[0].variableName})),this._symbolizer?(this._symbolizer.rendererJSON=this.renderer.toJSON(),this._symbolizer.rasterInfo=this.rasterInfo):this._symbolizer=new le({rendererJSON:this.renderer.toJSON(),rasterInfo:this.rasterInfo}),this._symbolizer.bind()||(this._symbolizer=null)}}_clonePixelData(e){return null==e?e:{extent:e.extent&&e.extent.clone(),pixelBlock:e.pixelBlock&&e.pixelBlock.clone()}}_getQueryParams(e){const{raster:t,viewId:i}=this;return{raster:t,viewId:i,f:"json",...e}}_decodePixelBlock(e,t,i){return this._rasterJobHandler.instance?this._rasterJobHandler.instance.decode({data:e,options:t}):ue(e,t,i)}async _fetchMultidimensionalInfo(e){var t;const i=await f(this.parsedUrl.path+"/multidimensionalInfo",{query:this._getQueryParams(),signal:e}).then((e=>{var t;return null==(t=e.data)?void 0:t.multidimensionalInfo}));return null!=(t=i.variables)&&t.length&&i.variables.forEach((e=>{var t;null!=(t=e.statistics)&&t.length&&e.statistics.forEach((e=>{e.avg=e.mean,e.stddev=e.standardDeviation}))})),i}_fetchAuxiliaryRasterInfo(e){const t=e&&e.serviceInfo;if(!t)return j(new I("imagery-layer:fetch-metadata","valid serviceInfo is required"));const i=e.renderingRule?JSON.stringify(e.renderingRule.toJSON()):null,r=e.signal,s=!!(t.hasRasterAttributeTable&&this.version>=10.1)&&f(this.parsedUrl.path+"/rasterAttributeTable",{query:this._getQueryParams({renderingRule:this.version>=10.1?i:null}),signal:r}).then((e=>q.fromJSON(e.data))).catch((()=>null)),n=!!(t.hasColormap&&this.version>=10.1)&&f(this.parsedUrl.path+"/colormap",{query:this._getQueryParams({renderingRule:this.version>=10.6?i:null}),signal:r}).then((e=>{var t;return null==(t=e.data)?void 0:t.colormap})),a=!!(t.hasHistograms&&this.version>=10.1)&&f(this.parsedUrl.path+"/histograms",{query:this._getQueryParams({renderingRule:this.version>=10.1?i:null}),signal:r}).then((e=>{var t;return null==(t=e.data)?void 0:t.histograms})),o=this.version>=10.3&&f(this.parsedUrl.path+"/keyProperties",{query:this._getQueryParams({renderingRule:i}),signal:r}).then((e=>e.data)).catch((()=>{})),l=!!(t.hasMultidimensions&&this.version>=10.3)&&this._fetchMultidimensionalInfo();return T([s,n,a,o,l]).then((e=>{let i=null;if(t.minValues&&t.minValues.length===t.bandCount){i=[];for(let e=0;e<t.minValues.length;e++)i.push({min:t.minValues[e],max:t.maxValues[e],avg:t.meanValues[e],stddev:t.stdvValues[e]})}const r=Math.ceil((t.extent.xmax-t.extent.xmin)/t.pixelSizeX-.1),s=Math.ceil((t.extent.ymax-t.extent.ymin)/t.pixelSizeY-.1),n=R.fromJSON(t.spatialReference||t.extent.spatialReference);return new oe({width:r,height:s,bandCount:t.bandCount,extent:w.fromJSON(t.extent),spatialReference:n,pixelSize:new h({x:t.pixelSizeX,y:t.pixelSizeY,spatialReference:n}),pixelType:t.pixelType.toLowerCase(),statistics:i,attributeTable:e[0]||null,colormap:e[1]||null,histograms:e[2]||null,keyProperties:e[3]||{},multidimensionalInfo:e[4]||null})}))}_requestArrayBuffer(e){const{imageProps:t,requestAsImageElement:i,signal:r}=e;if(i&&!this.pixelFilter&&t.format&&t.format.indexOf("png")>-1)return f(this.parsedUrl.path+"/exportImage",{responseType:"image",query:this._getQueryParams({f:"image",...e.imageServiceParameters}),signal:r}).then((e=>({imageElement:e.data,params:t})));const s=this._initJobHandler(),n=f(this.parsedUrl.path+"/exportImage",{responseType:"array-buffer",query:this._getQueryParams({f:"image",...e.imageServiceParameters}),signal:r});return T([n,s]).then((e=>{const i=e[0].data,s=t.format||"jpgpng";let n=s;if("bsq"!==n&&"bip"!==n&&(n=ce(i)),!n)throw new I("imagery-layer:fetch-image","unsupported format signature "+String.fromCharCode.apply(null,new Uint8Array(i)));const a="gif"===s||"bmp"===s||s.indexOf("png")>-1&&("png"===n||"jpg"===n),o={signal:r};return a?ue(i,{useCanvas:!0,...t},o).then((e=>({pixelData:{pixelBlock:e,extent:t.extent},params:t}))):this._decodePixelBlock(i,{width:t.width,height:t.height,planes:null,pixelType:null,noDataValue:null,format:s},o).then((e=>({pixelData:{pixelBlock:e,extent:t.extent},params:t})))}))}async _generateRasterInfo(e,t){const{data:i}=await f(this.parsedUrl.path,{query:this._getQueryParams({renderingRule:e}),...t});return await this._fetchAuxiliaryRasterInfo({serviceInfo:i,renderingRule:e,...t})}_isValidCustomizedMosaicRule(e){return e&&JSON.stringify(e.toJSON())!==JSON.stringify(this._defaultServiceMosaicRule&&this._defaultServiceMosaicRule.toJSON())}_updateMultidimensionalDefinition(e){if(this._isValidCustomizedMosaicRule(this.mosaicRule))return;const t=e.variables[0].dimensions,i=[];for(const e in t)if(t.hasOwnProperty(e)){const r=t[e],s=r.extent;let n=!0,a=[s[0]];r.hasRanges&&!0===r.hasRanges?(n=!1,a=[r.values[0]]):"stdz"===r.name.toLowerCase()&&Math.abs(s[1])<=Math.abs(s[0])&&(a=[s[1]]),i.push(new pe({variableName:"",dimensionName:t[e].name,isSlice:n,values:a}))}if(i.length>0){this.mosaicRule=this.mosaicRule||new ze;const e=this.mosaicRule.multidimensionalDefinition;(!e||e&&e.length<=0)&&(this.mosaicRule.multidimensionalDefinition=i)}}_formatAttributeValue(e,t){if("string"==typeof e){const i=this._getFieldInfo(this.popupTemplate&&this.popupTemplate.fieldInfos,t),r=i&&i.format;if(r){let t,i;return e.trim().indexOf(",")>-1?(t=",",i=t+" ",this._formatDelimitedString(e,t,i,r)):e.trim().indexOf(" ")>-1?(t=i=" ",this._formatDelimitedString(e,t,i,r)):this._formatNumberFromString(e,r)}}return e}_getFieldInfo(e,t){if(!e||!e.length||!t)return;const i=t.toLowerCase();let r;return e.some((e=>!(!e.fieldName||e.fieldName.toLowerCase()!==i&&e.fieldName.toLowerCase()!==i.replace(/ /g,"_")||(r=e,0)))),r}_formatDelimitedString(e,t,i,r){return e&&t&&i&&r?e.trim().split(t).map((e=>this._formatNumberFromString(e,r))).join(i):e}_formatNumberFromString(e,t){if(!e||!t)return e;const i=Number(e);return isNaN(i)?e:t.format(i)}_processVisibleRastersResponse(e,t){t=t||{};const i=e.value,{templateRRFunctionNames:r,showNoDataRecords:s,returnDomainValues:n,templateFields:a}=t,o=e.processedValues;let l=e.catalogItems&&e.catalogItems.features,u=e.properties&&e.properties.Values&&e.properties.Values.map((e=>e.replace(/ /gi,", ")))||[];const c=this.objectIdField||"ObjectId",d="string"==typeof i&&i.toLowerCase().indexOf("nodata")>-1,h=[];if(i&&!l&&!d){const e={};e[c]=0,u=[i],l=[new D(this.fullExtent,null,e)]}if(!l)return[];let p,m,f;this._updateResponseFieldNames(l,a);for(let e=0;e<l.length;e++){if(p=l[e],null!=i&&!d){if(m=u[e],f=this.renderingRule&&o&&o.length>0&&r&&r.length>0&&r.indexOf(this.renderingRule.functionName)>-1?o[r.indexOf(this.renderingRule.functionName)]:i,"nodata"===m.toLowerCase()&&!s)continue;const t="Raster.ItemPixelValue",n="Raster.ServicePixelValue";p.attributes[t]=this._formatAttributeValue(m,t),p.attributes[n]=this._formatAttributeValue(f,n),this._updateFeatureWithMagDirValues(p,m);const a=this.fields&&this.fields.length>0;let l=this.renderingRule&&y(this.serviceRasterInfo)&&this.serviceRasterInfo.attributeTable?a?m:i:f;this.renderingRule||(l=a?m:i),this._updateFeatureWithRasterAttributeTableValues(p,l)}if(p.sourceLayer=this,n&&this._updateFeatureWithDomainValues(p),r&&o&&r.length===o.length)for(let e=0;e<r.length;e++){const t="Raster.ServicePixelValue."+r[e];p.attributes[t]=this._formatAttributeValue(o[e],t)}h.push(l[e])}return h}_updateFeatureWithRasterAttributeTableValues(e,t){const i=this.rasterInfo&&this.rasterInfo.attributeTable||y(this.serviceRasterInfo)&&this.serviceRasterInfo.attributeTable,r=i&&i.features;if(!r)return;const s=i.fields,n=s.map((e=>e.name)).filter((e=>"value"===e.toLowerCase())),a=n&&n[0];if(!a)return;const o=r.filter((e=>e.attributes[a]===(null!=t?parseInt(t,10):null)));o&&o[0]&&s.forEach((t=>{const i=this.rasterAttributeTableFieldPrefix+t.name;e.attributes[i]=this._formatAttributeValue(o[0].attributes[t.name],i)}))}_updateFeatureWithMagDirValues(e,t){if(!this.pixelFilter||"esriImageServiceDataTypeVector-UV"!==this.serviceDataType&&"esriImageServiceDataTypeVector-MagDir"!==this.serviceDataType)return;const i=t.replace(" ",",").split(",").map((e=>parseFloat(e))),r=i.map((e=>[e])),s=i.map((e=>({minValue:e,maxValue:e,noDataValue:null}))),n=new de({height:1,width:1,pixelType:"f32",pixels:r,statistics:s});this.pixelFilter({pixelBlock:n,extent:new w(0,0,0,0,this.spatialReference)}),e.attributes["Raster.Magnitude"]=n.pixels[0][0],e.attributes["Raster.Direction"]=n.pixels[1][0]}_updateFeatureWithDomainValues(e){const t=this.fields&&this.fields.filter((e=>e.domain&&"coded-value"===e.domain.type));null!=t&&t.forEach((t=>{const i=e.attributes[t.name];if(null!=i){const r=t.domain.codedValues.filter((e=>e.code===i))[0];r&&(e.attributes[t.name]=r.name)}}))}_updateResponseFieldNames(e,t){if(!t||t.length<1)return;const i=this.fieldsIndex;i&&e.forEach((e=>{if(e&&e.attributes)for(const r of t)if(i.has(r)){const t=i.get(r).name;t!==r&&(e.attributes[r]=e.attributes[t],delete e.attributes[t])}}))}_updateRenderingRulesFunctionName(e,t){if(!e||e.length<1)return;if("Raw"===e)return e.replace("Raw","None");const i=e.toLowerCase().replace(/ /gi,"_");return t.has(i)?t.get(i):e}_isRFTJson(e){return e.name&&e.arguments&&e.function&&e.hasOwnProperty("functionType")}_readCapabilities(e){const t=e.capabilities?e.capabilities.toLowerCase().split(",").map((e=>e.trim())):["image","catalog"],{currentVersion:i,advancedQueryCapabilities:r,maxRecordCount:s}=e,n=t.indexOf("image")>-1,a="esriImageServiceDataTypeElevation"===e.serviceDataType,o=!!(e.spatialReference||e.extent&&e.extent.spatialReference);return{operations:{supportsComputeHistograms:n,supportsExportImage:n,supportsIdentify:n,supportsMeasure:t.indexOf("mensuration")>-1&&o,supportsDownload:t.indexOf("download")>-1,supportsQuery:t.indexOf("catalog")>-1&&e.fields&&e.fields.length>0,supportsGetSamples:i>=10.2&&n,supportsProject:i>=10.3&&n,supportsComputeStatisticsHistograms:i>=10.4&&n,supportsQueryBoundary:i>=10.6&&n,supportsCalculateVolume:i>=10.7&&a,supportsComputePixelLocation:i>=10.7&&t.indexOf("catalog")>-1},query:{supportsStatistics:!(!r||!r.supportsStatistics),supportsOrderBy:!(!r||!r.supportsOrderBy),supportsDistinct:!(!r||!r.supportsDistinct),supportsPagination:!(!r||!r.supportsPagination),supportsStandardizedQueriesOnly:!(!r||!r.useStandardizedQueries),maxRecordCount:s}}}};return e([t()],a.prototype,"_functionRasterInfos",void 0),e([t()],a.prototype,"_rasterJobHandler",void 0),e([t()],a.prototype,"_symbolizer",void 0),e([t()],a.prototype,"_defaultServiceMosaicRule",void 0),e([i("_defaultServiceMosaicRule",["defaultMosaicMethod"])],a.prototype,"readDefaultServiceMosaicRule",null),e([t()],a.prototype,"_cachedRendererJson",void 0),e([t()],a.prototype,"rasterAttributeTableFieldPrefix",void 0),e([t({readOnly:!0,dependsOn:["rasterFunctionInfos"]})],a.prototype,"rasterFunctionNamesIndex",null),e([t({readOnly:!0,dependsOn:["url"]})],a.prototype,"queryTask",null),e([t()],a.prototype,"adjustAspectRatio",void 0),e([t({readOnly:!0}),m("serviceRasterInfo.bandCount")],a.prototype,"bandCount",void 0),e([t({type:[c],json:{write:!0}})],a.prototype,"bandIds",void 0),e([i("bandIds")],a.prototype,"readBandIds",null),e([t({readOnly:!0,json:{read:!1}})],a.prototype,"capabilities",void 0),e([i("service","capabilities",["capabilities","currentVersion","serviceDataType"])],a.prototype,"readCapabilities",null),e([t({type:Number})],a.prototype,"compressionQuality",void 0),e([r("compressionQuality")],a.prototype,"writeCompressionQuality",null),e([t({type:Number})],a.prototype,"compressionTolerance",void 0),e([r("compressionTolerance")],a.prototype,"writeCompressionTolerance",null),e([t({json:{read:{source:"copyrightText"}}})],a.prototype,"copyright",void 0),e([t({type:String,json:{read:{source:"layerDefinition.definitionExpression"},write:{target:"layerDefinition.definitionExpression"}}})],a.prototype,"definitionExpression",void 0),e([t({readOnly:!0,constructOnly:!0})],a.prototype,"exportImageServiceParameters",void 0),e([t()],a.prototype,"rasterInfo",void 0),e([t({readOnly:!0,type:[P]})],a.prototype,"fields",void 0),e([t({readOnly:!0,dependsOn:["fields"]})],a.prototype,"fieldsIndex",null),e([t({type:["png","png8","png24","png32","jpg","bmp","gif","jpgpng","lerc","tiff"],json:{write:!0}})],a.prototype,"format",null),e([i("service","format",["serviceDataType"])],a.prototype,"readFormat",null),e([t({type:w})],a.prototype,"fullExtent",void 0),e([t({readOnly:!0})],a.prototype,"hasMultidimensions",void 0),e([t({json:{read:{source:"maxImageHeight"}}})],a.prototype,"imageMaxHeight",void 0),e([t({json:{read:{source:"maxImageWidth"}}})],a.prototype,"imageMaxWidth",void 0),e([t({type:String,json:{type:tt.jsonValues,read:tt.read,write:tt.write}})],a.prototype,"interpolation",void 0),e([t()],a.prototype,"minScale",void 0),e([i("service","minScale")],a.prototype,"readMinScale",null),e([t()],a.prototype,"maxScale",void 0),e([i("service","maxScale")],a.prototype,"readMaxScale",null),e([t({type:ze})],a.prototype,"mosaicRule",null),e([i("mosaicRule",["mosaicRule","defaultMosaicMethod"])],a.prototype,"readMosaicRule",null),e([r("mosaicRule")],a.prototype,"writeMosaicRule",null),e([t({readOnly:!0}),m("serviceRasterInfo.multidimensionalInfo")],a.prototype,"multidimensionalInfo",void 0),e([t({json:{type:c}})],a.prototype,"noData",void 0),e([r("noData")],a.prototype,"writeNoData",null),e([t({type:String,json:{type:it.jsonValues,read:it.read,write:it.write}})],a.prototype,"noDataInterpretation",void 0),e([t({type:String,readOnly:!0,json:{read:{source:["fields"]}}})],a.prototype,"objectIdField",void 0),e([i("objectIdField")],a.prototype,"readObjectIdField",null),e([t({readOnly:!0,dependsOn:["url"]})],a.prototype,"parsedUrl",null),e([t({readOnly:!0}),m("serviceRasterInfo.pixelSize.x")],a.prototype,"pixelSizeX",void 0),e([t({readOnly:!0}),m("serviceRasterInfo.pixelSize.y")],a.prototype,"pixelSizeY",void 0),e([t({type:Function})],a.prototype,"pixelFilter",void 0),e([t()],a.prototype,"raster",void 0),e([t()],a.prototype,"viewId",void 0),e([t({types:me,json:{name:"layerDefinition.drawingInfo.renderer",origins:{"web-scene":{types:ye,name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy:e=>({enabled:e&&"vector-field"!==e.type})}}}}})],a.prototype,"renderer",void 0),e([i("renderer")],a.prototype,"readRenderer",null),e([t(E)],a.prototype,"opacity",void 0),e([t({readOnly:!0}),m("serviceRasterInfo.attributeTable")],a.prototype,"rasterAttributeTable",void 0),e([t({readOnly:!0,dependsOn:["fields","rasterInfo","capabilities"]})],a.prototype,"rasterFields",null),e([t({readOnly:!0})],a.prototype,"rasterFunctionInfos",void 0),e([t({type:Me})],a.prototype,"renderingRule",null),e([i("renderingRule",["renderingRule","rasterFunctionInfos"])],a.prototype,"readRenderingRule",null),e([r("renderingRule")],a.prototype,"writeRenderingRule",null),e([t()],a.prototype,"serviceDataType",void 0),e([t({readOnly:!0,type:R})],a.prototype,"spatialReference",void 0),e([i("spatialReference",["spatialReference","extent"])],a.prototype,"readSpatialReference",null),e([t({json:{type:rt.jsonValues}})],a.prototype,"pixelType",void 0),e([i("pixelType")],a.prototype,"readPixelType",null),e([r("pixelType")],a.prototype,"writePixelType",null),e([t({constructOnly:!0,type:oe})],a.prototype,"serviceRasterInfo",void 0),e([t()],a.prototype,"sourceJSON",void 0),e([t(z)],a.prototype,"url",void 0),e([t({readOnly:!0})],a.prototype,"version",void 0),e([i("version",["currentVersion","fields","timeInfo"])],a.prototype,"readVersion",null),a=e([n("esri.layers.mixins.ArcGISImageService")],a),a};let ot=class extends(Z(ie(ee(te(B(Q(at(H(k(J)))))))))){constructor(...e){super(...e),this.legendEnabled=!0,this.isReference=null,this.operationalLayerType="ArcGISImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null,this.type="imagery"}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}load(e){const t=y(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},e).then((()=>this._fetchService(t)),(()=>this._fetchService(t)))),O(this)}writeOperationalLayerType(e,t,i){var r;const s="vector-field"===(null==(r=this.renderer)?void 0:r.type);t[i]=s?"ArcGISImageServiceVectorLayer":"ArcGISImageServiceLayer"}get defaultPopupTemplate(){return this.createPopupTemplate()}createPopupTemplate(e){const t=this.rasterFields,i=this.title,r=new Set;let s=!1,n=!1;this.capabilities&&(s=this.capabilities.operations.supportsQuery&&this.fields&&this.fields.length>0,n=s&&("esriImageServiceDataTypeVector-UV"===this.serviceDataType||"esriImageServiceDataTypeVector-MagDir"===this.serviceDataType));const a=new Set;s&&(a.add("raster.itempixelvalue"),n&&a.add("raster.magnitude").add("raster.direction"));for(const e of t){const t=e.name.toLowerCase();a.has(t)||t.indexOf("raster.servicepixelvalue.")>-1||r.add(e.name)}return re({fields:t,title:i},{...e,visibleFieldNames:r})}redraw(){this.emit("redraw")}};e([t(G)],ot.prototype,"legendEnabled",void 0),e([t({type:["show","hide"]})],ot.prototype,"listMode",void 0),e([t({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],ot.prototype,"isReference",void 0),e([t({type:["ArcGISImageServiceLayer"],json:{origins:{"web-map":{type:["ArcGISImageServiceLayer","ArcGISImageServiceVectorLayer"],read:!1,write:{target:"layerType",ignoreOrigin:!0}}}}})],ot.prototype,"operationalLayerType",void 0),e([r("web-map","operationalLayerType")],ot.prototype,"writeOperationalLayerType",null),e([t(L)],ot.prototype,"popupEnabled",void 0),e([t({type:V,json:{read:{source:"popupInfo"},write:{target:"popupInfo"}}})],ot.prototype,"popupTemplate",void 0),e([t({readOnly:!0,dependsOn:["fields","title"]})],ot.prototype,"defaultPopupTemplate",null),e([t({readOnly:!0,json:{read:!1}})],ot.prototype,"type",void 0),ot=e([n("esri.layers.ImageryLayer")],ot);var lt=ot;export default lt;
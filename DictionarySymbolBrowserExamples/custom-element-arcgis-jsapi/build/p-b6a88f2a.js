import"./p-476cf7c4.js";import{Z as e,aK as t,aJ as r,x as n,p as s,C as i,D as o,E as a,K as c,bq as u,L as l,f,a2 as d}from"./p-ab028778.js";import{i as m}from"./p-77b9029e.js";import{e as p,n as y}from"./p-1a733e11.js";import{p as g}from"./p-f364f6e6.js";function h(e){return{geometryType:r(e[0]),geometries:e.map((e=>e.toJSON()))}}function S(e,r,n){const s=t(r);return e.map((e=>{const t=s.fromJSON(e);return t.spatialReference=n,t}))}async function j(t,r,s,i){const o=r[0].spatialReference,a=p(t),c={...a.query,f:"json",sr:JSON.stringify(o.toJSON()),polygons:JSON.stringify(h(r).geometries),polylines:JSON.stringify(h(s).geometries)},u=y(c,i);return e(a.path+"/autoComplete",u).then((({data:e})=>(e.geometries||[]).map((({rings:e})=>new n({spatialReference:o,rings:e})))))}async function v(t,r,n){const i=r[0].spatialReference,o=p(t),a={...o.query,f:"json",sr:JSON.stringify(i.toJSON()),geometries:JSON.stringify(h(r))},c=y(a,n);return e(o.path+"/convexHull",c).then((({data:e})=>s(e.geometry).set({spatialReference:i})))}async function O(t,n,i,o){const a=n[0].spatialReference,c=p(t);let u={query:{...c.query,f:"json",sr:JSON.stringify(a.toJSON()),geometries:JSON.stringify(h(n)),geometry:JSON.stringify({geometryType:r(i),geometry:i.toJSON()})}};return o&&(u={...o,...u}),e(c.path+"/difference",u).then((({data:e})=>(e.geometries||[]).map((e=>s(e).set({spatialReference:a})))))}const w=new i({MGRS:"mgrs",USNG:"usng",UTM:"utm",GeoRef:"geo-ref",GARS:"gars",DMS:"dms",DDM:"ddm",DD:"dd"}),N=new i({109006:"centimeters",9102:"decimal-degrees",109005:"decimeters",9002:"feet",109009:"inches",9036:"kilometers",9001:"meters",9035:"miles",109007:"millimeters",109012:"nautical-miles",9096:"yards"});let J=class extends l{constructor(e){super(e),this.deviationUnit=null,this.geometries=null,this.maxDeviation=null}};o([a({type:String,json:{write:!0}})],J.prototype,"deviationUnit",void 0),o([a({json:{read:{reader:e=>e?e.map((e=>s(e))):null},write:{writer:(e,t)=>{t.geometries=e.map((e=>e.toJSON()))}}}})],J.prototype,"geometries",void 0),o([a({type:Number,json:{write:!0}})],J.prototype,"maxDeviation",void 0),J=o([c("esri.tasks.support.GeneralizeParameters")],J),J.from=u(J);var R=J;async function x(t,n,i,o){const a=n[0].spatialReference,c=p(t),u={...c.query,f:"json",sr:JSON.stringify(a.toJSON()),geometries:JSON.stringify(h(n)),geometry:JSON.stringify({geometryType:r(i),geometry:i.toJSON()})},l=y(u,o);return e(c.path+"/intersect",l).then((({data:e})=>(e.geometries||[]).map((e=>s(e).set({spatialReference:a})))))}const G=new i({preserveShape:"preserve-shape"});function b(e){const{polylines:t,lengthUnit:r,geodesic:n,calculationType:s}=e.toJSON(),i={};i.polylines=JSON.stringify(t);const o=e.polylines[0].spatialReference;return i.sr=o.wkid?o.wkid:JSON.stringify(o.toJSON()),r&&(i.lengthUnit=r),n&&(i.geodesic=n),s&&(i.calculationType=G.toJSON(s)),i}let T=class extends l{constructor(e){super(e),this.calculationType=null,this.geodesic=null,this.lengthUnit=null,this.polylines=null}};o([a({type:String,json:{write:!0}})],T.prototype,"calculationType",void 0),o([a({type:Boolean,json:{write:!0}})],T.prototype,"geodesic",void 0),o([a({json:{write:!0}})],T.prototype,"lengthUnit",void 0),o([a({type:[f],json:{read:{reader:e=>e?e.map((e=>s(e))):null},write:{writer:(e,t)=>{t.polylines=e.map((e=>e.toJSON()))}}}})],T.prototype,"polylines",void 0),T=o([c("esri.tasks.support.LengthsParameters")],T),T.from=u(T);var D=T;const q=new i({esriGeometryOffsetBevelled:"bevelled",esriGeometryOffsetMitered:"mitered",esriGeometryOffsetRounded:"rounded"}),C=new i({9001:"meters",9002:"feet",9036:"kilometers",9093:"miles",109012:"nautical-miles",109001:"yards"});let P=class extends l{constructor(e){super(e),this.bevelRatio=null,this.geometries=null,this.offsetDistance=null,this.offsetHow=null,this.offsetUnit=null}};o([a({type:Number,json:{write:!0}})],P.prototype,"bevelRatio",void 0),o([a({json:{read:{reader:e=>e?e.map((e=>s(e))):null},write:{writer:(e,t)=>{t.geometries=e.map((e=>e.toJSON()))}}}})],P.prototype,"geometries",void 0),o([a({type:Number,json:{write:!0}})],P.prototype,"offsetDistance",void 0),o([a({type:String,json:{write:!0}})],P.prototype,"offsetHow",void 0),o([a({type:String,json:{write:!0}})],P.prototype,"offsetUnit",void 0),P=o([c("esri.tasks.support.OffsetParameters")],P),P.from=u(P);var k=P;const U=u(g),M=new i({esriGeometryRelationCross:"cross",esriGeometryRelationDisjoint:"disjoint",esriGeometryRelationIn:"in",esriGeometryRelationInteriorIntersection:"interior-intersection",esriGeometryRelationIntersection:"intersection",esriGeometryRelationLineCoincidence:"line-coincidence",esriGeometryRelationLineTouch:"line-touch",esriGeometryRelationOverlap:"overlap",esriGeometryRelationPointTouch:"point-touch",esriGeometryRelationTouch:"touch",esriGeometryRelationWithin:"within",esriGeometryRelationRelation:"relation"});let H=class extends l{constructor(e){super(e),this.geometries1=null,this.geometries2=null,this.relation=null,this.relationParameter=null}};o([a({json:{read:{reader:e=>e?e.map((e=>s(e))):null},write:{writer:(e,t)=>{t.geometries1=e.map((e=>e.toJSON()))}}}})],H.prototype,"geometries1",void 0),o([a({json:{read:{reader:e=>e?e.map((e=>s(e))):null},write:{writer:(e,t)=>{t.geometries2=e.map((e=>e.toJSON()))}}}})],H.prototype,"geometries2",void 0),o([a({type:String,json:{write:!0}})],H.prototype,"relation",void 0),o([a({type:String,json:{write:!0}})],H.prototype,"relationParameter",void 0),H=o([c("esri.tasks.support.RelationParameters")],H),H.from=u(H);var I=H;async function E(t,n,s){const i=function(e){const{geometries1:t,geometries2:n,relation:s,relationParameter:i}=e.toJSON(),o={};if(t&&t.length){o.geometries1=JSON.stringify({geometryType:r(t[0]),geometries:t});const e=t[0].spatialReference;o.sr=e.wkid?e.wkid:JSON.stringify(e)}return n&&n.length>0&&(o.geometries2=JSON.stringify({geometryType:r(n[0]),geometries:n})),s&&(o.relation=M.toJSON(s)),i&&(o.relationParam=i),o}(n=I.from(n)),o=p(t),a={...o.query,f:"json",...i},c=y(a,s);return e(o.path+"/relation",c).then((({data:e})=>e.relations))}async function L(t,n,s){const i="string"==typeof t?d(t):t,o=n[0].spatialReference,a=r(n[0]),c={...s,query:{...i.query,f:"json",sr:o.wkid?o.wkid:JSON.stringify(o),geometries:JSON.stringify(h(n))}},{data:u}=await e(i.path+"/simplify",c);return S(u.geometries,a,o)}const A=new i({0:"default-curve-extension",1:"relocate-ends",2:"keep-end-attributes",4:"no-end-attributes",8:"no-extend-at-from",16:"no-extend-at-to"});let z=class extends l{constructor(e){super(e),this.extendHow="default-curve-extension",this.polylines=null,this.trimExtendTo=null}};o([a({type:String,json:{write:!0}})],z.prototype,"extendHow",void 0),o([a({type:[f],json:{read:{reader:e=>e?e.map((e=>s(e))):null},write:{writer:(e,t)=>{t.polylines=e.map((e=>e.toJSON()))}}}})],z.prototype,"polylines",void 0),o([a({json:{read:{reader:e=>e?s(e):null},write:{writer:(e,t)=>{t.trimExtendTo=e.toJSON()}}}})],z.prototype,"trimExtendTo",void 0),z=o([c("esri.tasks.support.TrimExtendParameters")],z),z.from=u(z);var K=z;async function B(t,r,n){const i=r[0].spatialReference,o=p(t),a={...o.query,f:"json",sr:JSON.stringify(i.toJSON()),geometries:JSON.stringify(h(r))},c=y(a,n);return e(o.path+"/union",c).then((({data:e})=>s(e.geometry).set({spatialReference:i})))}let F=class extends m{constructor(e){super(e),this.url=null}areasAndLengths(t,r){return async function(t,r,n){const s=p(t),i={...s.query,f:"json",...r.toJSON()},o=y(i,n);return e(s.path+"/areasAndLengths",o).then((e=>e.data))}(this.url,t,r)}autoComplete(e,t,r){return j(this.url,e,t,r)}buffer(t,r){return async function(t,r,s){const i=p(t),o={...i.query,f:"json",...r.toJSON()},a=r.outSpatialReference||r.geometries[0].spatialReference,c=y(o,s);return e(i.path+"/buffer",c).then((e=>(e.data.geometries||[]).map((({rings:e})=>new n({spatialReference:a,rings:e})))))}(this.url,t,r)}convexHull(e,t){return v(this.url,e,t)}cut(t,n,i){return async function(t,n,i,o){const a=p(t),c=n[0].spatialReference,u={...o,query:{...a.query,f:"json",sr:JSON.stringify(c),target:JSON.stringify({geometryType:r(n[0]),geometries:n}),cutter:JSON.stringify(i)}},l=await e(a.path+"/cut",u),{cutIndexes:f,geometries:d=[]}=l.data;return{cutIndexes:f,geometries:d.map((e=>{const t=s(e);return t.spatialReference=c,t}))}}(this.url,t,n,i)}densify(t,r){return async function(t,r,n){const i=r.geometries[0].spatialReference,o=p(t),a={...o.query,f:"json",...r.toJSON()},c=y(a,n);return e(o.path+"/densify",c).then((({data:e})=>(e.geometries||[]).map((e=>s(e).set({spatialReference:i})))))}(this.url,t,r)}difference(e,t,r){return O(this.url,e,t,r)}distance(t,r){return async function(t,r,n){const s=p(t),i={...s.query,f:"json",...r.toJSON()},o=y(i,n);return e(s.path+"/distance",o).then((({data:e})=>e&&e.distance))}(this.url,t,r)}fromGeoCoordinateString(t,r){return async function(t,r,n){const s={};s.sr=null!=r.sr&&"object"==typeof r.sr?r.sr.wkid||JSON.stringify(r.sr):r.sr,s.strings=JSON.stringify(r.strings),s.conversionType=w.toJSON(r.conversionType||"mgrs"),s.conversionMode=r.conversionMode;const i=p(t),o={...i.query,f:"json",...s},a=y(o,n);return e(i.path+"/fromGeoCoordinateString",a).then((({data:e})=>e.coordinates))}(this.url,t,r)}generalize(t,n){return async function(t,n,i){const o=(n=R.from(n)).toJSON(),a=function(e){const{geometries:t,deviationUnit:n,maxDeviation:s}=e.toJSON(),i={maxDeviation:s};return t&&t.length&&(i.geometries=JSON.stringify({geometryType:r(t[0]),geometries:t}),i.sr=JSON.stringify(t[0].spatialReference)),N.write(n,i,"deviationUnit"),i}(n),c=p(t),u={...c.query,f:"json",...a},l=o.geometries[0].spatialReference,f=y(u,i);return e(c.path+"/generalize",f).then((({data:e})=>(e.geometries||[]).map((e=>s(e).set({spatialReference:l})))))}(this.url,t,n)}intersect(e,t,r){return x(this.url,e,t,r)}labelPoints(t,r){return function(t,r,n){const i=r.map((e=>e.toJSON())),o=r[0].spatialReference,a=p(t),c={...a.query,f:"json",sr:o.wkid?o.wkid:JSON.stringify(o.toJSON()),polygons:JSON.stringify(i)},u=y(c,n);return e(a.path+"/labelPoints",u).then((({data:e})=>(e.labelPoints||[]).map((e=>s(e).set({spatialReference:o})))))}(this.url,t,r)}lengths(t,r){return async function(t,r,n){const s=b(r=D.from(r)),i=p(t),o={...i.query,f:"json",...s},a=y(o,n);return e(i.path+"/lengths",a).then((({data:e})=>e))}(this.url,t,r)}offset(t,n){return async function(t,n,i){const o=function(e){const{geometries:t,bevelRatio:n,offsetDistance:s,offsetHow:i,offsetUnit:o}=e.toJSON(),a={bevelRatio:n,offsetDistance:s};return t&&t.length&&(a.geometries=JSON.stringify({geometryType:r(t[0]),geometries:t}),a.sr=JSON.stringify(t[0].spatialReference)),i&&(a.offsetHow=q.toJSON(i)),o&&(a.offsetUnit=C.toJSON(o)),a}(n=k.from(n)),a=p(t),c={...a.query,f:"json",...o},u=n.geometries[0].spatialReference,l=y(c,i);return e(a.path+"/offset",l).then((({data:e})=>(e.geometries||[]).map((e=>s(e).set({spatialReference:u})))))}(this.url,t,n)}project(t,n){return async function(t,n,s){n=U(n);const i=p(t),o={...i.query,f:"json",...n.toJSON()},a=n.outSpatialReference,c=r(n.geometries[0]),u=y(o,s);return e(i.path+"/project",u).then((({data:{geometries:e}})=>S(e,c,a)))}(this.url,t,n)}relation(e,t){return E(this.url,e,t)}reshape(t,n,i){return async function(t,n,i,o){const a=n.spatialReference,c=p(t),u={...c.query,f:"json",sr:JSON.stringify(a.toJSON()),target:JSON.stringify({geometryType:r(n),geometry:n.toJSON()}),reshaper:JSON.stringify(i.toJSON())},l=y(u,o);return e(c.path+"/reshape",l).then((({data:e})=>s(e.geometry).set({spatialReference:a})))}(this.url,t,n,i)}simplify(e,t){return L(this.url,e,t)}toGeoCoordinateString(t,r){return async function(t,r,n){const s={};s.sr=null!=r.sr&&"object"==typeof r.sr?r.sr.wkid||JSON.stringify(r.sr):r.sr,s.coordinates=JSON.stringify(r.coordinates),s.conversionType=w.toJSON(r.conversionType||"mgrs"),s.conversionMode=r.conversionMode,s.numOfDigits=r.numOfDigits,s.rounding=r.rounding,s.addSpaces=r.addSpaces;const i=p(t),o={...i.query,f:"json",...s},a=y(o,n);return e(i.path+"/toGeoCoordinateString",a).then((({data:e})=>e.strings))}(this.url,t,r)}trimExtend(t,r){return async function(t,r,n){const s=function(e){const{extendHow:t,polylines:r,trimExtendTo:n}=e.toJSON(),s={};return s.extendHow=A.toJSON(t),r&&r.length&&(s.polylines=JSON.stringify(r),s.sr=JSON.stringify(r[0].spatialReference)),n&&(s.trimExtendTo=JSON.stringify(n)),s}(r=K.from(r)),i=p(t),o={...i.query,f:"json",...s},a=r.sr,c=y(o,n);return e(i.path+"/trimExtend",c).then((({data:e})=>(e.geometries||[]).map((({paths:e})=>new f({spatialReference:a,paths:e})))))}(this.url,t,r)}union(e,t){return B(this.url,e,t)}};F.UNIT_METER=9001,F.UNIT_GERMAN_METER=9031,F.UNIT_FOOT=9002,F.UNIT_SURVEY_FOOT=9003,F.UNIT_CLARKE_FOOT=9005,F.UNIT_FATHOM=9014,F.UNIT_NAUTICAL_MILE=9030,F.UNIT_SURVEY_CHAIN=9033,F.UNIT_SURVEY_LINK=9034,F.UNIT_SURVEY_MILE=9035,F.UNIT_KILOMETER=9036,F.UNIT_CLARKE_YARD=9037,F.UNIT_CLARKE_CHAIN=9038,F.UNIT_CLARKE_LINK=9039,F.UNIT_SEARS_YARD=9040,F.UNIT_SEARS_FOOT=9041,F.UNIT_SEARS_CHAIN=9042,F.UNIT_SEARS_LINK=9043,F.UNIT_BENOIT_1895A_YARD=9050,F.UNIT_BENOIT_1895A_FOOT=9051,F.UNIT_BENOIT_1895A_CHAIN=9052,F.UNIT_BENOIT_1895A_LINK=9053,F.UNIT_BENOIT_1895B_YARD=9060,F.UNIT_BENOIT_1895B_FOOT=9061,F.UNIT_BENOIT_1895B_CHAIN=9062,F.UNIT_BENOIT_1895B_LINK=9063,F.UNIT_INDIAN_FOOT=9080,F.UNIT_INDIAN_1937_FOOT=9081,F.UNIT_INDIAN_1962_FOOT=9082,F.UNIT_INDIAN_1975_FOOT=9083,F.UNIT_INDIAN_YARD=9084,F.UNIT_INDIAN_1937_YARD=9085,F.UNIT_INDIAN_1962_YARD=9086,F.UNIT_INDIAN_1975_YARD=9087,F.UNIT_FOOT_1865=9070,F.UNIT_RADIAN=9101,F.UNIT_DEGREE=9102,F.UNIT_ARCMINUTE=9103,F.UNIT_ARCSECOND=9104,F.UNIT_GRAD=9105,F.UNIT_GON=9106,F.UNIT_MICRORADIAN=9109,F.UNIT_ARCMINUTE_CENTESIMAL=9112,F.UNIT_ARCSECOND_CENTESIMAL=9113,F.UNIT_MIL6400=9114,F.UNIT_BRITISH_1936_FOOT=9095,F.UNIT_GOLDCOAST_FOOT=9094,F.UNIT_INTERNATIONAL_CHAIN=109003,F.UNIT_INTERNATIONAL_LINK=109004,F.UNIT_INTERNATIONAL_YARD=109001,F.UNIT_STATUTE_MILE=9093,F.UNIT_SURVEY_YARD=109002,F.UNIT_50KILOMETER_LENGTH=109030,F.UNIT_150KILOMETER_LENGTH=109031,F.UNIT_DECIMETER=109005,F.UNIT_CENTIMETER=109006,F.UNIT_MILLIMETER=109007,F.UNIT_INTERNATIONAL_INCH=109008,F.UNIT_US_SURVEY_INCH=109009,F.UNIT_INTERNATIONAL_ROD=109010,F.UNIT_US_SURVEY_ROD=109011,F.UNIT_US_NAUTICAL_MILE=109012,F.UNIT_UK_NAUTICAL_MILE=109013,F.UNIT_SQUARE_INCHES="esriSquareInches",F.UNIT_SQUARE_FEET="esriSquareFeet",F.UNIT_SQUARE_YARDS="esriSquareYards",F.UNIT_ACRES="esriAcres",F.UNIT_SQUARE_MILES="esriSquareMiles",F.UNIT_SQUARE_MILLIMETERS="esriSquareMillimeters",F.UNIT_SQUARE_CENTIMETERS="esriSquareCentimeters",F.UNIT_SQUARE_DECIMETERS="esriSquareDecimeters",F.UNIT_SQUARE_METERS="esriSquareMeters",F.UNIT_ARES="esriAres",F.UNIT_HECTARES="esriHectares",F.UNIT_SQUARE_KILOMETERS="esriSquareKilometers",o([a()],F.prototype,"url",void 0),F=o([c("esri.tasks.GeometryService")],F);var W=F;export default W;
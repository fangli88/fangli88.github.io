import"./p-476cf7c4.js";import{z as t,U as s}from"./p-ab028778.js";import"./p-098cc742.js";import"./p-49a8c628.js";import{U as r,u as n,R as o,o as i,A as c,c as a,a as e}from"./p-f98f4081.js";export default class{async decode(t){const s=await r(t.data,t.options);return s&&s.toJSON()}symbolize(r){r.pixelBlock=n.fromJSON(r.pixelBlock),r.extent=r.extent?t.fromJSON(r.extent):null;const o=this.symbolizer.symbolize(r);return s(o&&o.toJSON())}async updateSymbolizer(t){var s;this.symbolizer=o.fromJSON(t.symbolizerJSON),t.histograms&&"rasterStretch"===(null==(s=this.symbolizer)?void 0:s.rendererJSON.type)&&(this.symbolizer.rendererJSON.histograms=t.histograms)}stretch(t){const r=this.symbolizer.simpleStretch(n.fromJSON(t.srcPixelBlock),t.stretchParams);return s(r&&r.toJSON())}estimateStatisticsHistograms(t){const r=i(n.fromJSON(t.srcPixelBlock));return s(r)}split(t){const r=c(n.fromJSON(t.srcPixelBlock),t.tileSize,t.maximumPyramidLevel);return r&&r.forEach(((t,s)=>{r.set(s,null==t?void 0:t.toJSON())})),s(r)}async mosaicAndTransform(t){const s=t.srcPixelBlocks.map((t=>t?new n(t):null)),r=a(s,t.srcMosaicSize);if(!t.coefs)return r&&r.toJSON();const o=e(r,t.destDimension,t.coefs,t.sampleSpacing,t.interpolation);return o&&o.toJSON()}}
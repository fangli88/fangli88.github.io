import"./p-476cf7c4.js";import{l as e,aF as t,O as i,i as r,U as s,m as a,b as n,T as o,Z as l,a6 as h,D as p,E as c,F as d,K as u}from"./p-ab028778.js";import"./p-73b795c3.js";import"./p-e07a8dfe.js";import"./p-b92ca348.js";import{l as m,b as v}from"./p-1ff061ae.js";import{f as y}from"./p-2ceb0941.js";import"./p-8fc84c2d.js";import{l as f,p as w}from"./p-1cce98ff.js";import"./p-e7501203.js";import{p as g}from"./p-00f58755.js";import{d as j}from"./p-c5691699.js";import"./p-8a0d1aa6.js";import"./p-7e1b53f9.js";import{a as S}from"./p-abd34d7c.js";import{w as b}from"./p-f3cc8f75.js";const T=e.getLogger("esri.views.3d.support.WorkerHandle");class x extends class{constructor(e,t,i,r={}){this._methodName=t,this._promise=b(e,{...r,scheduler:i}).then((e=>{void 0===this._thread?(this._thread=e,this._promise=null,r.hasInitialize&&this.broadcast({},"initialize")):e.close()})),this._promise.catch((t=>T.error(`Failed to initialize ${e} worker: ${t}`)))}destroy(){this._thread&&(this._thread.close(),this._thread=null),this._promise=null}invoke(e,r){if(this._thread){const t=this.getTransferList(e);return this._thread.invoke(this._methodName,e,{transferList:t,signal:r})}return this._promise?this._promise.then((()=>(t(r),this.invoke(e,r)))):i(null)}broadcast(e,t){return this._thread?r(this._thread.broadcast(t,e)).then((()=>{})):this._promise?this._promise.then((()=>this.broadcast(e,t))):i()}get promise(){return this._promise}}{constructor(e){super("LercWorker","_decode",e,{strategy:"dedicated"}),this.scheduler=e}decode(e,t,i){return e&&0!==e.byteLength?this.invoke({buffer:e,options:t},i):s(null)}getTransferList(e){return[e.buffer]}}const E=new Map,$=e.getLogger("esri.layers.ElevationLayer");let I=class extends(S(g(f(j(m(v)))))){constructor(...e){super(...e),this.copyright=null,this.heightModelInfo=null,this.path=null,this.opacity=1,this.operationalLayerType="ArcGISTiledElevationServiceLayer",this.sourceJSON=null,this.type="elevation",this.url=null,this.version=null,this._lercDecoder=function(e){let t=E.get(e);return t||(t={instance:new x(e),ref:0},E.set(e,t)),++t.ref,t.instance}()}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}destroy(){(function(e){if(null==e)return;const t=e.scheduler,i=E.get(t);i&&--i.ref<=0&&(i.instance.destroy(),E.delete(t))})(this._lercDecoder),this._lercDecoder=null}set minScale(e){this.constructed&&$.warn(`${this.declaredClass}.minScale support has been removed (since 4.5)`)}get minScale(){}set maxScale(e){this.constructed&&$.warn(`${this.declaredClass}.maxScale support has been removed (since 4.5)`)}get maxScale(){}readVersion(e,t){let i=t.currentVersion;return i||(i=9.3),i}load(e){const t=n(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"],supportsData:!1,validateItem:e=>{for(let t=0;t<e.typeKeywords.length;t++)if("elevation 3d layer"===e.typeKeywords[t].toLowerCase())return!0;throw new a("portal:invalid-layer-item-type","Invalid layer item type '${type}', expected '${expectedType}' ",{type:"Image Service",expectedType:"Image Service Elevation 3D Layer"})}},e).then((()=>this._fetchImageService(t)),(()=>this._fetchImageService(t)))),s(this)}fetchTile(e,t,i,r){const s=n((r=r||{signal:null}).signal)?r.signal:r.signal=o().signal,a={responseType:"array-buffer",signal:s},h={noDataValue:r.noDataValue,returnFileInfo:!0};return this.load().then((()=>this._fetchTileAvailability(e,t,i,r))).then((()=>l(this.getTileUrl(e,t,i),a))).then((e=>this._lercDecoder.decode(e.data,h,s))).then((e=>({values:e.pixelData,width:e.width,height:e.height,maxZError:e.fileInfo.maxZError,noDataValue:e.noDataValue,minValue:e.minValue,maxValue:e.maxValue})))}getTileUrl(e,t,i){const r=h({...this.parsedUrl.query,blankTile:!(!this.tilemapCache&&this.supportsBlankTile)&&null});return`${this.parsedUrl.path}/tile/${e}/${t}/${i}${r?"?"+r:""}`}async queryElevation(e,i){const{ElevationQuery:r}=await import("./p-8d93d085.js");return t(i),(new r).query(this,e,i)}async createElevationSampler(e,i){const{ElevationQuery:r}=await import("./p-8d93d085.js");return t(i),(new r).createSampler(this,e,i)}_fetchTileAvailability(e,t,i,r){return this.tilemapCache?this.tilemapCache.fetchAvailability(e,t,i,r):s("unknown")}async _fetchImageService(e){if(this.sourceJSON)return this.sourceJSON;const t={query:{f:"json",...this.parsedUrl.query},responseType:"json",signal:e},i=await l(this.parsedUrl.path,t);i.ssl&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=i.data,this.read(i.data,{origin:"service",url:this.parsedUrl})}};p([c({json:{read:{source:"copyrightText"}}})],I.prototype,"copyright",void 0),p([c({readOnly:!0,type:y})],I.prototype,"heightModelInfo",void 0),p([c({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],I.prototype,"path",void 0),p([c({type:["show","hide"]})],I.prototype,"listMode",void 0),p([c({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}}})],I.prototype,"minScale",null),p([c({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}}})],I.prototype,"maxScale",null),p([c({json:{read:!1,write:!1,origins:{"web-document":{read:!1,write:!1}}}})],I.prototype,"opacity",void 0),p([c({type:["ArcGISTiledElevationServiceLayer"]})],I.prototype,"operationalLayerType",void 0),p([c()],I.prototype,"sourceJSON",void 0),p([c({json:{read:!1},value:"elevation",readOnly:!0})],I.prototype,"type",void 0),p([c(w)],I.prototype,"url",void 0),p([c()],I.prototype,"version",void 0),p([d("version",["currentVersion"])],I.prototype,"readVersion",null),I=p([u("esri.layers.ElevationLayer")],I);var L=I;export default L;
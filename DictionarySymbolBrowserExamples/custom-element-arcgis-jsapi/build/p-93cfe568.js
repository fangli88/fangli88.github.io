import"./p-476cf7c4.js";import{Z as e,m as t,d8 as s,bg as i,cP as r,i as o,aJ as n}from"./p-ab028778.js";import{i as a}from"./p-2ef6e039.js";import"./p-ebb65ba7.js";import{K as p,Q as l,D as d,J as u,B as c}from"./p-fd91cc88.js";import"./p-43d5e67f.js";import"./p-babdd7a5.js";import"./p-098cc742.js";import"./p-e07a8dfe.js";import"./p-c6c7c9c2.js";import"./p-f3cc8f75.js";import{s as f}from"./p-a1a69fdc.js";import"./p-311069c2.js";import"./p-02a4b6c8.js";import"./p-abda1e64.js";import"./p-a8e713de.js";import"./p-fb40af74.js";import"./p-4f43bb64.js";import{b as m,g as y,f as h}from"./p-2b439a2e.js";import{i as j,u as g,s as b}from"./p-1a30c941.js";import"./p-4561de0e.js";import"./p-3db2569b.js";import{h as I}from"./p-7f2db87b.js";import"./p-a6dff060.js";import"./p-920b2088.js";import{h as F,w as T,b as w}from"./p-004e9de0.js";import{y as R,d as D,c as E,u as O,h as S}from"./p-d006920c.js";const v={hasAttachments:!1,capabilities:"query, editing, create, delete, update",useStandardizedQueries:!0,supportsCoordinatesQuantization:!0,supportsReturningQueryGeometry:!0,advancedQueryCapabilities:{supportsQueryAttachments:!1,supportsStatistics:!0,supportsPercentileStatistics:!0,supportsReturningGeometryCentroid:!0,supportsQueryWithDistance:!0,supportsDistinct:!0,supportsReturningQueryExtent:!0,supportsReturningGeometryProperties:!1,supportsHavingClause:!0,supportsOrderBy:!0,supportsPagination:!0,supportsQueryWithResultType:!1,supportsSqlExpression:!0,supportsDisjointSpatialRel:!0}};export default class{constructor(){this._queryEngine=null}destroy(){this._queryEngine&&this._queryEngine&&this._queryEngine.destroy(),this._queryEngine=this._requiredFields=this._fieldsIndex=this._createDefaultAttributes=null}async load(o){const n=[];await this._checkProjection(o.spatialReference);let d=null;o.url&&(d=(await e(o.url,{responseType:"json"})).data,await F(d));const u=T(d,{geometryType:o.geometryType}),c=o.fields||u.fields||[],h=null!=o.hasZ?o.hasZ:u.hasZ,R=u.geometryType,D=o.objectIdField||("number"===u.objectIdFieldType?u.objectIdFieldName:"OBJECTID")||"OBJECTID",E=o.spatialReference||r;let O=o.timeInfo;if(!R)throw new t("geojson-layer:missing-property","geometryType not set and couldn't be inferred from the provided features");if("string"===u.objectIdFieldType&&n.push({name:"geojson-layer:unsupported-id-type",message:"Feature ids are of type string and can't be honored."}),c===u.fields&&u.unknownFields.length>0&&n.push({name:"geojson-layer:unknown-field-types",message:"Some fields types couldn't be inferred from the features and were dropped",details:{unknownFields:u.unknownFields}}),D){let e=null;c.some((t=>t.name===D&&(e=t,!0)))?(e.type="esriFieldTypeOID",e.editable=!1,e.nullable=!1):c.unshift({alias:D,name:D,type:"esriFieldTypeOID",editable:!1,nullable:!1})}for(const e of c){if(null==e.name&&(e.name=e.alias),null==e.alias&&(e.alias=e.name),!e.name)throw new t("geojson-layer:invalid-field-name","field name is missing",{field:e});if(e.name===D&&(e.type="esriFieldTypeOID"),-1===a.jsonValues.indexOf(e.type))throw new t("geojson-layer:invalid-field-type",`invalid type for field "${e.name}"`,{field:e})}const S={};this._requiredFields=[];for(const e of c)if("esriFieldTypeOID"!==e.type&&"esriFieldTypeGlobalID"!==e.type){e.editable=null==e.editable||!!e.editable,e.nullable=null==e.nullable||!!e.nullable;const t=s(e);e.nullable||void 0!==t?S[e.name]=t:this._requiredFields.push(e)}if(this._fieldsIndex=new f(c),O){if(O.startTimeField){const e=this._fieldsIndex.get(O.startTimeField);e?(O.startTimeField=e.name,e.type="esriFieldTypeDate"):O.startTimeField=null}if(O.endTimeField){const e=this._fieldsIndex.get(O.endTimeField);e?(O.endTimeField=e.name,e.type="esriFieldTypeDate"):O.endTimeField=null}if(O.trackIdField){const e=this._fieldsIndex.get(O.trackIdField);e?O.trackIdField=e.name:(O.trackIdField=null,n.push({name:"geojson-layer:invalid-timeInfo-trackIdField",message:"trackIdField is missing",details:{timeInfo:O}}))}O.startTimeField||O.endTimeField||(n.push({name:"geojson-layer:invalid-timeInfo",message:"startTimeField and endTimeField are missing",details:{timeInfo:O}}),O=null)}const Q={warnings:n,featureErrors:[],layerDefinition:{...v,drawingInfo:j(R),templates:g(S),extent:null,geometryType:R,objectIdField:D,fields:c,hasZ:!!h,timeInfo:O}};this._queryEngine=new m({fields:c,geometryType:R,hasM:!1,hasZ:h,objectIdField:D,spatialReference:E,timeInfo:O,featureStore:new I({geometryType:R,hasM:!1,hasZ:h})}),this._createDefaultAttributes=b(S,D),this._nextObjectId=u.maxObjectId+1;const x=w(d,{geometryType:R,hasZ:h,objectIdFieldName:"number"===u.objectIdFieldType?D:null});if(!i(E,r))for(const e of x)e.geometry&&(e.geometry=p(y(l(e.geometry,R,h,!1),r,E)));return this._loadInitialFeatures(Q,x),Q}async applyEdits(e){const{spatialReference:t,geometryType:s}=this._queryEngine;return await o([R(t,s),h(e.adds,t),h(e.updates,t)]),this._applyEdits(e)}async queryFeatures(e={},t={}){return this._queryEngine.executeQuery(e,t.signal)}async queryFeatureCount(e={},t={}){return this._queryEngine.executeQueryForCount(e,t.signal)}async queryObjectIds(e={},t={}){return this._queryEngine.executeQueryForIds(e,t.signal)}async queryExtent(e={},t={}){return this._queryEngine.executeQueryForExtent(e,t.signal)}_loadInitialFeatures(e,t){const{featureStore:s,objectIdField:i}=this._queryEngine,r=[];for(const s of t){const t=this._createDefaultAttributes(),o=D(this._fieldsIndex,this._requiredFields,t,s.attributes,!0,e.warnings);o?e.featureErrors.push(o):(this._assignObjectId(t,s.attributes,!0),s.attributes=t,s.objectId=t[i],r.push(s))}if(s.addMany(r),e.layerDefinition.extent=this._queryEngine.fullExtent,e.layerDefinition.timeInfo){const{start:t,end:s}=this._queryEngine.timeExtent;e.layerDefinition.timeInfo.timeExtent=[t,s]}return e}_applyEdits(e){const{adds:t,updates:s,deletes:i}=e,r={addResults:[],deleteResults:[],updateResults:[],uidToObjectId:{}};if(t&&t.length&&this._applyAddEdits(r,t),s&&s.length&&this._applyUpdateEdits(r,s),i&&i.length){for(const e of i)r.deleteResults.push(E(e));this._queryEngine.featureStore.removeManyById(i)}return{fullExtent:this._queryEngine.fullExtent,timeExtent:this._queryEngine.timeExtent,featureEditResults:r}}_applyAddEdits(e,t){const{addResults:s}=e,{geometryType:i,hasM:r,hasZ:o,objectIdField:a,spatialReference:p,featureStore:l}=this._queryEngine,u=[];for(const r of t){if(r.geometry&&i!==n(r.geometry)){s.push(O("Incorrect geometry type."));continue}const t=this._createDefaultAttributes(),o=D(this._fieldsIndex,this._requiredFields,t,r.attributes);o?s.push(o):(this._assignObjectId(t,r.attributes),r.attributes=t,null!=r.uid&&(e.uidToObjectId[r.uid]=r.attributes[a]),r.geometry&&(r.geometry=y(S(r.geometry,p),r.geometry.spatialReference,p)),u.push(r),s.push(E(r.attributes[a])))}l.addMany(d([],u,i,o,r,a))}_applyUpdateEdits({updateResults:e},t){const{geometryType:s,hasM:i,hasZ:r,objectIdField:o,spatialReference:a,featureStore:p}=this._queryEngine;for(const l of t){const{attributes:t,geometry:d}=l,f=t&&t[o];if(null==f){e.push(O(`Identifier field ${o} missing`));continue}if(!p.has(f)){e.push(O(`Feature with object id ${f} missing`));continue}const m=u(p.getFeature(f),s,r,i);if(d){if(s!==n(d)){e.push(O("Incorrect geometry type."));continue}m.geometry=y(S(d,a),d.spatialReference,a)}if(t){const s=D(this._fieldsIndex,this._requiredFields,m.attributes,t);if(s){e.push(s);continue}}p.add(c(m,s,r,i,o)),e.push(E(f))}}_assignObjectId(e,t,s=!1){const i=this._queryEngine.objectIdField;e[i]=s&&isFinite(t[i])?t[i]:this._nextObjectId++}async _checkProjection(e){try{await h(r,e)}catch{throw new t("geojson-layer","Projection not supported")}}}
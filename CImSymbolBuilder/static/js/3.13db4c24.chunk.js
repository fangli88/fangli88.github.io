(this["webpackJsonpmy-app"]=this["webpackJsonpmy-app"]||[]).push([[3],{425:function(e,t,n){"use strict";n.d(t,"a",(function(){return W})),n.d(t,"b",(function(){return J})),n.d(t,"c",(function(){return H})),n.d(t,"d",(function(){return q})),n.d(t,"e",(function(){return Z})),n.d(t,"f",(function(){return G})),n.d(t,"g",(function(){return k})),n.d(t,"h",(function(){return R})),n.d(t,"i",(function(){return Y})),n.d(t,"j",(function(){return $})),n.d(t,"k",(function(){return X})),n.d(t,"l",(function(){return M})),n.d(t,"m",(function(){return y})),n.d(t,"n",(function(){return L})),n.d(t,"o",(function(){return F})),n.d(t,"p",(function(){return ce})),n.d(t,"q",(function(){return te})),n.d(t,"r",(function(){return ie})),n.d(t,"s",(function(){return se})),n.d(t,"t",(function(){return Q})),n.d(t,"u",(function(){return ee})),n.d(t,"v",(function(){return g})),n.d(t,"w",(function(){return h})),n.d(t,"x",(function(){return re})),n.d(t,"y",(function(){return ae}));var o=n(4),i=n(14),a=n(21),r=n(504),l=n(538),s=n(435);function c(e,t){return e?t?4:3:t?3:2}const u=o.a.getLogger("esri.tasks.support.optimizedFeatureSet"),f={esriGeometryPoint:0,esriGeometryPolyline:2,esriGeometryPolygon:3,esriGeometryMultipoint:0},d=(e,t,n,o,i,a)=>{e[n]=i,e[n+1]=a},m=(e,t,n,o,i,a)=>{e[n]=i,e[n+1]=a,e[n+2]=t[o+2]},_=(e,t,n,o,i,a)=>{e[n]=i,e[n+1]=a,e[n+2]=t[o+3]},v=(e,t,n,o,i,a)=>{e[n]=i,e[n+1]=a,e[n+2]=t[o+2],e[n+3]=t[o+3]};function p(e,t,n,o){if(e){if(n)return t&&o?v:m;if(t&&o)return _}else if(t&&o)return m;return d}function g({scale:e,translate:t},n){return Math.round((n-t[0])/e[0])}function h({scale:e,translate:t},n){return Math.round((t[1]-n)/e[1])}function x({scale:e,translate:t},n){return n*e[0]+t[0]}function b({scale:e,translate:t},n){return t[1]-n*e[1]}function y(e,t,n){return e?t?n?z(e):T(e):n?O(e):C(e):null}function C(e){const t=e.coords;return{x:t[0],y:t[1]}}function S(e,t){return e.coords[0]=t.x,e.coords[1]=t.y,e}function T(e){const t=e.coords;return{x:t[0],y:t[1],z:t[2]}}function D(e,t){return e.coords[0]=t.x,e.coords[1]=t.y,e.coords[2]=t.z,e}function O(e){const t=e.coords;return{x:t[0],y:t[1],m:t[2]}}function I(e,t){return e.coords[0]=t.x,e.coords[1]=t.y,e.coords[2]=t.m,e}function z(e){const t=e.coords;return{x:t[0],y:t[1],z:t[2],m:t[3]}}function w(e,t){return e.coords[0]=t.x,e.coords[1]=t.y,e.coords[2]=t.z,e.coords[3]=t.m,e}function V(e,t){return e&&t?w:e?D:t?I:S}function P(e,t,n,o,i){const a=V(n,o);for(const l of t){const{geometry:t,attributes:n}=l;let o;t&&(o=a(new s.a,t)),e.push(new r.a(o,n,null,n[i]))}return e}function M(e,t,n){if(!e)return null;const o=c(t,n),i=[];for(let a=0;a<e.coords.length;a+=o){const t=[];for(let n=0;n<o;n++)t.push(e.coords[a+n]);i.push(t)}return t?n?{points:i,hasZ:t,hasM:n}:{points:i,hasZ:t}:n?{points:i,hasM:n}:{points:i}}function A(e,t,n,o,i){const a=c(n,o);for(const l of t){const t=l.geometry,n=l.attributes;let o;t&&(o=E(new s.a,t,a)),e.push(new r.a(o,n,null,n[i]))}return e}function E(e,t,n=c(t.hasZ,t.hasM)){e.lengths[0]=t.points.length;const o=e.coords;let i=0;for(const a of t.points)for(let e=0;e<n;e++)o[i++]=a[e];return e}function F(e,t,n){if(!e)return null;const o=c(t,n),{coords:i,lengths:a}=e,r=[];let l=0;for(const s of a){const e=[];for(let t=0;t<s;t++){const t=[];for(let e=0;e<o;e++)t.push(i[l++]);e.push(t)}r.push(e)}return t?n?{paths:r,hasZ:t,hasM:n}:{paths:r,hasZ:t}:n?{paths:r,hasM:n}:{paths:r}}function U(e,t,n,o,i){const a=c(n,o);for(const l of t){const t=l.geometry,n=l.attributes;let o;t&&(o=R(new s.a,t,a)),e.push(new r.a(o,n,null,n[i]))}return e}function R(e,t,n=c(t.hasZ,t.hasM)){const{lengths:o,coords:i}=e;let a=0;for(const r of t.paths){for(const e of r)for(let t=0;t<n;t++)i[a++]=e[t];o.push(r.length)}return e}function L(e,t,n){if(!e)return null;const o=c(t,n),{coords:i,lengths:a}=e,r=[];let l=0;for(const s of a){const e=[];for(let t=0;t<s;t++){const t=[];for(let e=0;e<o;e++)t.push(i[l++]);e.push(t)}r.push(e)}return t?n?{rings:r,hasZ:t,hasM:n}:{rings:r,hasZ:t}:n?{rings:r,hasM:n}:{rings:r}}function N(e,t,n,o,i){for(const a of t){const t=a.geometry,l=a.centroid,c=a.attributes;let u;t&&(u=k(new s.a,t,n,o)),l?e.push(new r.a(u,c,S(new s.a,l),c[i])):e.push(new r.a(u,c,null,c[i]))}return e}function k(e,t,n=t.hasZ,o=t.hasM){return G(e,t.rings,n,o),e}function G(e,t,n,o){const i=c(n,o),{lengths:a,coords:r}=e;let l=0;a.length=r.length=0;for(const s of t){for(const e of s)for(let t=0;t<i;t++)r[l++]=e[t];a.push(s.length)}return e}const j=[],B=[];function W(e,t,n,o,i){j[0]=e;const[a]=H(B,j,t,n,o,i);return j.length=B.length=0,a}function H(e,t,n,o,a,l){if(e.length=0,!n){for(const n of t){const t=n.attributes[l];e.push(new r.a(null,n.attributes,null,t))}return e}switch(n){case"esriGeometryPoint":return P(e,t,o,a,l);case"esriGeometryMultipoint":return A(e,t,o,a,l);case"esriGeometryPolyline":return U(e,t,o,a,l);case"esriGeometryPolygon":return N(e,t,o,a,l);default:u.error("convertToFeatureSet:unknown-geometry",new i.a(`Unable to parse unknown geometry type '${n}'`)),e.length=0}return e}function Z(e,t,n,o,a,r){const l=e.length;switch(n){case"esriGeometryPoint":P(e,t,o,a,r);break;case"esriGeometryMultipoint":A(e,t,o,a,r);break;case"esriGeometryPolyline":U(e,t,o,a,r);break;case"esriGeometryPolygon":N(e,t,o,a,r);break;default:u.error("convertToFeatureSet:unknown-geometry",new i.a(`Unable to parse unknown geometry type '${n}'`))}for(let i=0;i<t.length;i++)e[i+l].geometryType=n,e[i+l].insertAfter=t[i].insertAfter,e[i+l].groupId=t[i].groupId;return e}function Y(e,t,n,o){B[0]=e,K(j,B,t,n,o);const i=j[0];return j.length=B.length=0,i}function q(e,t,n){if(!e)return null;const o=new s.a;return"hasZ"in e&&null==t&&(t=e.hasZ),"hasM"in e&&null==n&&(n=e.hasM),Object(a.f)(e)?V(null!=t?t:null!=e.z,null!=n?n:null!=e.m)(o,e):Object(a.g)(e)?k(o,e,t,n):Object(a.h)(e)?R(o,e,c(t,n)):Object(a.e)(e)?E(o,e,c(t,n)):void u.error("convertFromGeometry:unknown-geometry",new i.a(`Unable to parse unknown geometry type '${e}'`))}function X(e,t,n,o){const a=e&&("coords"in e?e:e.geometry);if(!a)return null;switch(t){case"esriGeometryPoint":{let e=C;return n&&o?e=z:n?e=T:o&&(e=O),e(a)}case"esriGeometryMultipoint":return M(a,n,o);case"esriGeometryPolyline":return F(a,n,o);case"esriGeometryPolygon":return L(a,n,o);default:return void u.error("convertToGeometry:unknown-geometry",new i.a(`Unable to parse unknown geometry type '${t}'`))}}function K(e,t,n,o,a){switch(e.length=0,n){case"esriGeometryPoint":return function(e,t,n,o){let i=C;n&&o?i=z:n?i=T:o&&(i=O);for(const a of t){const{geometry:t,attributes:n}=a,o=t?i(t):null;e.push({attributes:n,geometry:o})}return e}(e,t,o,a);case"esriGeometryMultipoint":return function(e,t,n,o){for(const i of t){const{geometry:t,attributes:a}=i;let r;t&&(r=M(t,n,o)),e.push({attributes:a,geometry:r})}return e}(e,t,o,a);case"esriGeometryPolyline":return function(e,t,n,o){for(const i of t){const{geometry:t,attributes:a}=i;let r;t&&(r=F(t,n,o)),e.push({attributes:a,geometry:r})}return e}(e,t,o,a);case"esriGeometryPolygon":return function(e,t,n,o){for(const i of t){const{geometry:t,attributes:a,centroid:r}=i;let l;if(t&&(l=L(t,n,o)),r){const t=C(r);e.push({attributes:a,centroid:t,geometry:l})}else e.push({attributes:a,geometry:l})}return e}(e,t,o,a);default:u.error("convertToFeatureSet:unknown-geometry",new i.a(`Unable to parse unknown geometry type '${n}'`))}return e}function $(e){const{objectIdFieldName:t,spatialReference:n,transform:o,fields:i,hasM:a,hasZ:r,features:l,geometryType:s,exceededTransferLimit:c,uniqueIdField:u,queryGeometry:f,queryGeometryType:d}=e,m={features:K([],l,s,r,a),fields:i,geometryType:s,objectIdFieldName:t,spatialReference:n,uniqueIdField:u,queryGeometry:X(f,d,!1,!1)};return o&&(m.transform=o),c&&(m.exceededTransferLimit=c),a&&(m.hasM=a),r&&(m.hasZ=r),m}function J(e,t){const n=new l.a,{hasM:o,hasZ:a,features:r,objectIdFieldName:s,spatialReference:c,geometryType:f,exceededTransferLimit:d,transform:m,fields:_}=e;return _&&(n.fields=_),n.geometryType=f,n.objectIdFieldName=s||t,n.spatialReference=c,n.objectIdFieldName?(r&&H(n.features,r,f,a,o,n.objectIdFieldName),d&&(n.exceededTransferLimit=d),o&&(n.hasM=o),a&&(n.hasZ=a),m&&(n.transform=m),n):(u.error(new i.a("optimized-features:invalid-objectIdFieldName","objectIdFieldName is missing")),n)}function Q(e,t){const{geometryType:n,features:o,hasM:i,hasZ:a}=t;if(!e)return t;for(let r=0;r<o.length;r++){const t=o[r],l=t.weakClone();l.geometry=new s.a,ee(l.geometry,t.geometry,i,a,n,e),t.centroid&&(l.centroid=new s.a,ee(l.centroid,t.centroid,i,a,"esriGeometryPoint",e)),o[r]=l}return t.transform=e,t}function ee(e,t,n,o,i,a,r=n,l=o){if(e.lengths.length&&(e.lengths.length=0),e.coords.length&&(e.coords.length=0),!t||!t.coords.length)return null;const s=f[i],{coords:u,lengths:d}=t,m=c(n,o),_=c(n&&r,o&&l),v=p(n,o,r,l);if(!d.length)return v(e.coords,u,0,0,g(a,u[0]),h(a,u[1])),e.lengths.length&&(e.lengths.length=0),e.coords.length=m,e;let x,b,y,C,S=0,T=0,D=T;for(const c of d){if(c<s)continue;let t=0;T=D,y=x=g(a,u[S]),C=b=h(a,u[S+1]),v(e.coords,u,T,S,y,C),t++,S+=m,T+=_;for(let n=1;n<c;n++,S+=m)y=g(a,u[S]),C=h(a,u[S+1]),y===x&&C===b||(v(e.coords,u,T,S,y-x,C-b),T+=_,t++,x=y,b=C);t>=s&&(e.lengths.push(t),D=T)}return e.coords.length=D,e.coords.length?e:null}function te(e,t,n,o,i,a,r=n,l=o){if(e.lengths.length&&(e.lengths.length=0),e.coords.length&&(e.coords.length=0),!t||!t.coords.length)return null;const s=f[i],{coords:u,lengths:d}=t,m=c(n,o),_=c(n&&r,o&&l),v=p(n,o,r,l);if(!d.length)return v(e.coords,u,0,0,u[0],u[1]),e.lengths.length&&(e.lengths.length=0),e.coords.length=m,e;let g=0;const h=a*a;for(const c of d){if(c<s){g+=c*m;continue}const t=e.coords.length/_,n=g,o=g+(c-1)*m;v(e.coords,u,e.coords.length,n,u[n],u[n+1]),oe(e.coords,u,m,h,v,n,o),v(e.coords,u,e.coords.length,o,u[o],u[o+1]);const i=e.coords.length/_-t;i>=s?e.lengths.push(i):e.coords.length=t*_,g+=c*m}return e.coords.length?e:null}function ne(e,t,n,o){const i=e[t],a=e[t+1],r=e[n],l=e[n+1],s=e[o],c=e[o+1];let u=r,f=l,d=s-u,m=c-f;if(0!==d||0!==m){const e=((i-u)*d+(a-f)*m)/(d*d+m*m);e>1?(u=s,f=c):e>0&&(u+=d*e,f+=m*e)}return d=i-u,m=a-f,d*d+m*m}function oe(e,t,n,o,i,a,r){let l,s=o,c=0;for(let u=a+n;u<r;u+=n)l=ne(t,u,a,r),l>s&&(c=u,s=l);s>o&&(c-a>n&&oe(e,t,n,o,i,a,c),i(e,t,e.length,c,t[c],t[c+1]),r-c>n&&oe(e,t,n,o,i,c,r))}function ie(e,t,n,o){if(!t||!t.coords||!t.coords.length)return null;const i=c(n,o);let a=Number.POSITIVE_INFINITY,r=Number.POSITIVE_INFINITY,l=Number.NEGATIVE_INFINITY,s=Number.NEGATIVE_INFINITY;if(t&&t.coords){const e=t.coords;for(let t=0;t<e.length;t+=i){const n=e[t],o=e[t+1];a=Math.min(a,n),l=Math.max(l,n),r=Math.min(r,o),s=Math.max(s,o)}}return e[0]=a,e[1]=r,e[2]=l,e[3]=s,e}function ae(e,t,n,o,i){const{coords:a,lengths:r}=t,l=n?o?v:m:o?m:d,s=c(n,o);if(!a.length)return e!==t&&(e.lengths.length=0,e.coords.length=0),e;if(!r.length)return l(e.coords,a,0,0,x(i,a[0]),b(i,a[1])),e!==t&&(e.lengths.length=0,e.coords.length=s),e;const[u,f]=i.scale;let _=0;for(let c=0;c<r.length;c++){const t=r[c];e.lengths[c]=t;let n=x(i,a[_]),o=b(i,a[_+1]);l(e.coords,a,_,_,n,o),_+=s;for(let i=1;i<t;i++,_+=s)n+=a[_]*u,o-=a[_+1]*f,l(e.coords,a,_,_,n,o)}return e!==t&&(e.lengths.length=r.length,e.coords.length=a.length),e}function re(e,t,n,o,i,a){const r=c(n,o),l=p(n,o,i,a),s=t.coords;e.coords.length=0,e.lengths.length=0,e.lengths.push(...t.lengths);for(let c=0;c<s.length;c+=r)l(e.coords,s,e.coords.length,c,s[c],s[c+1]);return e}function le(e,t,n,o){let i=0,a=e[o*t],r=e[o*(t+1)];for(let l=1;l<n;l++){const n=a+e[o*(t+l)],s=r+e[o*(t+l)+1],c=(n-a)*(s+r);a=n,r=s,i+=c}return.5*i}function se(e,t){const{coords:n,lengths:o}=e;let i=0,a=0;for(let r=0;r<o.length;r++)a+=le(n,i,o[r],t),i+=r;return Math.abs(a)}function ce(e,t){const n=e.clone(),o=e.coords,i=e.lengths;let a=0;for(let r=0;r<i.length;r++){const e=i[r];let l=o[t*a],s=o[t*a+1];for(let i=1;i<e;i++){const e=l+o[t*(a+i)],r=s+o[t*(a+i)+1];n.coords[t*(a+i)]=e,n.coords[t*(a+i)+1]=r,l=e,s=r}a+=e}return n}},435:function(e,t,n){"use strict";class o{constructor(e=[],t=[],n=!1){this.lengths=null!=e?e:[],this.coords=null!=t?t:[],this.hasIndeterminateRingOrder=n}get isPoint(){return 0===this.lengths.length}forEachVertex(e){let t=0;this.lengths.length||e(this.coords[0],this.coords[1]);for(let n=0;n<this.lengths.length;n++){const o=this.lengths[n];for(let n=0;n<o;n++)e(this.coords[2*(n+t)],this.coords[2*(n+t)+1]);t+=o}}clone(){return new o(this.lengths.slice(),this.coords.slice(),this.hasIndeterminateRingOrder)}}t.a=o},448:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return s})),n.d(t,"c",(function(){return c})),n.d(t,"d",(function(){return l}));Number.POSITIVE_INFINITY;const o=Math.PI,i=128/o,a=1/Math.LN2;function r(e,t){return(e%=t)>=0?e:e+t}function l(e){return r(e*i,256)}function s(e){return r(.7111111111111111*e,256)}function c(e){return Math.log(e)*a}function u(e,t,n){return e>=t&&e<=n||e>=n&&e<=t}},483:function(e,t,n){"use strict";n(5);var o=n(6),i=n(420),a=n(484),r=n(513),l=n(4),s=n(14),c=n(497),u=n(452),f=n(435),d=n(425),m=n(56),_=n(511),v=n(30),p=n(474),g=n(423);const h=l.a.getLogger("esri.views.2d.engine.webgl.Mesh2D"),x=(e,t,n,o)=>{let i=0;for(let a=1;a<n;a++){const n=e[2*(t+a-1)],o=e[2*(t+a-1)+1];i+=(e[2*(t+a)]-n)*(e[2*(t+a)+1]+o)}return o?i>0:i<0},b=({coords:e,lengths:t},n)=>{const o=[];for(let i=0,a=0;i<t.length;a+=t[i],i+=1){const r=a,l=[];for(;i<t.length-1&&x(e,a+t[i],t[i+1],n);i+=1,a+=t[i])l.push(a+t[i]-r);const s=e.slice(2*r,2*(a+t[i])),c=Object(_.b)(s,l,2);for(const e of c)o.push(e+r)}return o};class y{constructor(e,t,n,o=!1){this._cache={},this.vertices=e,this.indices=t,this.primitiveType=n,this.isMapSpace=o}static fromRect({x:e,y:t,width:n,height:o}){const i=e,a=t,r=i+n,l=a+o;return y.fromScreenExtent({xmin:i,ymin:a,xmax:r,ymax:l})}static fromPath(e){const t=Object(d.f)(new f.a,e.path,!1,!1),n=t.coords,o=new Uint32Array(b(t,!0)),i=new Uint32Array(n.length/2);for(let a=0;a<i.length;a++)i[a]=Object(g.a)(Math.floor(n[2*a]),Math.floor(n[2*a+1]));return new y({geometry:i},o,4)}static fromGeometry(e,t){const n=t.geometry.type;switch(n){case"polygon":return y.fromPolygon(e,t.geometry);case"extent":return y.fromMapExtent(e,t.geometry);default:return h.error(new s.a("mapview-bad-type","Unable to create a mesh from type "+n,t)),y.fromRect({x:0,y:0,width:1,height:1})}}static fromPolygon(e,t){const n=Object(d.g)(new f.a,t,!1,!1),o=n.coords,i=new Uint32Array(b(n,!1)),a=new Uint32Array(o.length/2),r=Object(m.a)(),l=Object(m.a)();for(let s=0;s<a.length;s++)Object(v.m)(r,o[2*s],o[2*s+1]),e.toScreen(l,r),a[s]=Object(g.a)(Math.floor(l[0]),Math.floor(l[1]));return new y({geometry:a},i,4,!0)}static fromScreenExtent({xmin:e,xmax:t,ymin:n,ymax:o}){const i={geometry:new Uint32Array([Object(g.a)(e,n),Object(g.a)(t,n),Object(g.a)(e,o),Object(g.a)(e,o),Object(g.a)(t,n),Object(g.a)(t,o)])},a=new Uint32Array([0,1,2,3,4,5]);return new y(i,a,4)}static fromMapExtent(e,t){const[n,o]=e.toScreen([0,0],[t.xmin,t.ymin]),[i,a]=e.toScreen([0,0],[t.xmax,t.ymax]),r={geometry:new Uint32Array([Object(g.a)(n,o),Object(g.a)(i,o),Object(g.a)(n,a),Object(g.a)(n,a),Object(g.a)(i,o),Object(g.a)(i,a)])},l=new Uint32Array([0,1,2,3,4,5]);return new y(r,l,4)}destroy(){Object(o.h)(this._cache.indexBuffer)&&this._cache.indexBuffer.dispose();for(const e in this._cache.vertexBuffers)Object(o.h)(this._cache.vertexBuffers[e])&&this._cache.vertexBuffers[e].dispose()}get elementType(){return(e=>{switch(this.indices.BYTES_PER_ELEMENT){case 1:return 5121;case 2:return 5123;case 4:return 5125;default:throw new s.a("Cannot get DataType of array")}})()}getIndexBuffer(e,t=35044){return this._cache.indexBuffer||(this._cache.indexBuffer=p.a.createIndex(e,t,this.indices)),this._cache.indexBuffer}getVertexBuffers(e,t=35044){return this._cache.vertexBuffers||(this._cache.vertexBuffers=Object.keys(this.vertices).reduce((n,o)=>({...n,[o]:p.a.createVertex(e,t,this.vertices[o])}),{})),this._cache.vertexBuffers}}var C=y;const S=l.a.getLogger("esri.views.2d.engine.webgl.ClippingInfo"),T=e=>parseFloat(e)/100;class D extends u.a{constructor(e,t){super(),this._clip=t,this._cache={},this.stage=e,this._handle=t.watch("version",()=>this._invalidate()),this.ready()}static fromClipArea(e,t){return new D(e,t)}_destroyGL(){Object(o.h)(this._cache.mesh)&&(this._cache.mesh.destroy(),this._cache.mesh=null),Object(o.h)(this._cache.vao)&&(this._cache.vao.dispose(),this._cache.vao=null)}destroy(){this._destroyGL(),this._handle.remove()}getVAO(e,t,n,i){const[a,r]=t.size;if("geometry"!==this._clip.type&&this._lastWidth===a&&this._lastHeight===r||(this._lastWidth=a,this._lastHeight=r,this._destroyGL()),Object(o.g)(this._cache.vao)){const o=this._createMesh(t,this._clip),a=o.getIndexBuffer(e),r=o.getVertexBuffers(e);this._cache.mesh=o,this._cache.vao=new c.a(e,n,i,r,a)}return this._cache.vao}_invalidate(){this._destroyGL(),this.requestRender()}_createScreenRect(e,t){const[n,o]=e.size,i="string"==typeof t.left?T(t.left)*n:t.left,a="string"==typeof t.right?T(t.right)*n:t.right,r="string"==typeof t.top?T(t.top)*o:t.top,l="string"==typeof t.bottom?T(t.bottom)*o:t.bottom,s=i,c=r;return{x:s,y:c,width:Math.max(n-a-s,0),height:Math.max(o-l-c,0)}}_createMesh(e,t){switch(t.type){case"rect":return C.fromRect(this._createScreenRect(e,t));case"path":return C.fromPath(t);case"geometry":return C.fromGeometry(e,t);default:return S.error(new s.a("mapview-bad-type","Unable to create ClippingInfo mesh from clip of type: ${clip.type}")),C.fromRect({x:0,y:0,width:1,height:1})}}}var O=D;t.a=class extends a.a{constructor(){super(...arguments),this.name=this.constructor.name}set clips(e){this._clips=e,this.children.forEach(t=>t.clips=e),this._updateClippingInfo()}doRender(e){const t=this.createRenderParams(e),{painter:n,globalOpacity:o,profiler:a,drawPhase:r}=t,l=r===i.c.LABEL?1:o*this.computedOpacity;a.recordContainerStart(this.name),n.beforeRenderLayer(t,this._clippingInfos?255:0,l),this.updateTransforms(e.state),this.renderChildren(t),n.compositeLayer(t,l),a.recordContainerEnd()}renderChildren(e){Object(o.g)(this._renderPasses)&&(this._renderPasses=this.prepareRenderPasses(e.painter));for(const n of this.children)n.beforeRender(e);for(const n of this._renderPasses)try{n.render(e)}catch(t){}for(const n of this.children)n.afterRender(e)}createRenderParams(e){return e}prepareRenderPasses(e){return[e.registerRenderPass({name:"clip",brushes:[r.a.clip],target:()=>this._clippingInfos,drawPhase:i.c.MAP|i.c.LABEL|i.c.LABEL_ALPHA|i.c.DEBUG})]}updateTransforms(e){for(const t of this.children)t.setTransform(e)}onAttach(){super.onAttach(),this._updateClippingInfo()}onDetach(){super.onDetach(),this._updateClippingInfo()}_updateClippingInfo(){if(Object(o.h)(this._clippingInfos)&&(this._clippingInfos.forEach(e=>e.destroy()),this._clippingInfos=null),!this.stage)return;const e=this._clips;Object(o.h)(e)&&e.length&&(this._clippingInfos=e.items.map(e=>O.fromClipArea(this.stage,e))),this.requestRender()}}},493:function(e,t,n){"use strict";n.d(t,"a",(function(){return a})),n.d(t,"b",(function(){return i}));var o=n(535);function i(e){let t="";for(const n in e){const o=e[n];if("boolean"==typeof o)o&&(t+=`#define ${n}\n`);else if("number"==typeof o)t+=`#define ${n} ${o.toFixed()}\n`;else if("object"==typeof o){const e=o.options;let i=0;for(const n in e)t+=`#define ${e[n]} ${(i++).toFixed()}\n`;t+=`#define ${n} ${e[o.value]}\n`}}return t}function a(e,t,n,i){n=n||{},i=i||"";const a="function"==typeof t.shaders?t.shaders(n):t.shaders;return new o.a(e,i+a.vertexShader,i+a.fragmentShader,t.attributes)}},504:function(e,t,n){"use strict";class o{constructor(e=null,t={},n,o){this.displayId=0,this.geohashIndexed=!1,this.geohashX=0,this.geohashY=0,this.geometry=e,t&&(this.attributes=t),n&&(this.centroid=n),null!=o&&(this.objectId=o)}get hasGeometry(){return!(!this.geometry||!this.geometry.coords||!this.geometry.coords.length)}weakClone(){const e=new o(this.geometry,this.attributes,this.centroid,this.objectId);return e.displayId=this.displayId,e.geohashIndexed=this.geohashIndexed,e.geohashX=this.geohashX,e.geohashY=this.geohashY,e}}t.a=o},505:function(e,t,n){"use strict";n(5),n(53),n(429);var o=n(474),i=n(497),a=(n(426),n(493)),r=(n(428),n(532)),l=n(515),s=n(663);t.a=class extends l.a{constructor(){super(...arguments),this._color=Object(r.b)(1,0,0,1),this._initialized=!1}dispose(){this._solidProgram&&(this._solidProgram.dispose(),this._solidProgram=null),this._solidVertexArrayObject&&(this._solidVertexArrayObject.dispose(),this._solidVertexArrayObject=null)}prepareState({context:e},t){e.setDepthWriteEnabled(!1),e.setDepthTestEnabled(!1),e.setStencilTestEnabled(!0),e.setBlendingEnabled(!1),e.setColorMask(!1,!1,!1,!1),e.setStencilOp(7680,7680,7681),e.setStencilWriteMask(255),e.setStencilFunctionSeparate(1032,516,t.stencilRef,255)}draw(e,t){const{context:n}=e;this._initialized||this._initialize(n),n.bindVAO(this._solidVertexArrayObject),n.bindProgram(this._solidProgram),this._solidProgram.setUniformMatrix3fv("u_dvsMat3",t.transforms.dvs),this._solidProgram.setUniform2fv("u_coord_range",t.coordRange),this._solidProgram.setUniform1f("u_depth",0),this._solidProgram.setUniform4fv("u_color",this._color),n.drawArrays(5,0,4),n.bindVAO()}_initialize(e){if(this._initialized)return!0;const t=Object(a.a)(e,s.a);if(!t)return!1;const n=new Int8Array([0,0,1,0,0,1,1,1]),r=o.a.createVertex(e,35044,n),l=new i.a(e,s.a.attributes,{geometry:[{name:"a_pos",count:2,type:5120,offset:0,stride:2,normalized:!1,divisor:0}]},{geometry:r});return this._solidProgram=t,this._solidVertexArrayObject=l,this._initialized=!0,!0}}},507:function(e,t,n){"use strict";n(5),n(429);var o=n(474),i=n(438),a=n(497),r=(n(426),n(493)),l=(n(428),n(532)),s=n(515),c=n(663),u=n(536);const f={name:"tileInfo",shaders:{vertexShader:Object(u.a)("tileInfo/tileInfo.vert"),fragmentShader:Object(u.a)("tileInfo/tileInfo.frag")},attributes:{a_pos:0}};t.a=class extends s.a{constructor(){super(...arguments),this._color=Object(l.b)(1,0,0,1)}dispose(){this._outlineProgram&&(this._outlineProgram.dispose(),this._outlineProgram=null),this._tileInfoProgram&&(this._tileInfoProgram.dispose(),this._tileInfoProgram=null),this._outlineVertexArrayObject&&(this._outlineVertexArrayObject.dispose(),this._outlineVertexArrayObject=null),this._tileInfoVertexArrayObject&&(this._tileInfoVertexArrayObject.dispose(),this._tileInfoVertexArrayObject=null),this._canvas=null}prepareState({context:e}){e.setBlendingEnabled(!0),e.setBlendFunctionSeparate(1,771,1,771),e.setColorMask(!0,!0,!0,!0),e.setStencilWriteMask(0),e.setStencilTestEnabled(!1)}draw(e,t){const{context:n}=e;if(!t.isReady)return;this._loadWGLResources(n),n.bindVAO(this._outlineVertexArrayObject),n.bindProgram(this._outlineProgram),this._outlineProgram.setUniformMatrix3fv("u_dvsMat3",t.transforms.dvs),this._outlineProgram.setUniform2f("u_coord_range",t.coordRange[0],t.coordRange[1]),this._outlineProgram.setUniform1f("u_depth",0),this._outlineProgram.setUniform4fv("u_color",this._color),n.drawArrays(3,0,4),n.bindVAO();const o=this._getTexture(n,t);o&&(n.bindVAO(this._tileInfoVertexArrayObject),n.bindProgram(this._tileInfoProgram),n.bindTexture(o,0),this._tileInfoProgram.setUniformMatrix3fv("u_dvsMat3",t.transforms.dvs),this._tileInfoProgram.setUniform1f("u_depth",0),this._tileInfoProgram.setUniform2f("u_coord_ratio",t.coordRange[0]/t.size[0],t.coordRange[1]/t.size[1]),this._tileInfoProgram.setUniform2f("u_delta",8,8),this._tileInfoProgram.setUniform2f("u_dimensions",o.descriptor.width,o.descriptor.height),n.drawArrays(5,0,4),n.bindVAO())}_loadWGLResources(e){if(this._outlineProgram&&this._tileInfoProgram)return;const t=Object(r.a)(e,c.a),n=Object(r.a)(e,f),i={geometry:[{name:"a_pos",count:2,type:5120,offset:0,stride:2,normalized:!1,divisor:0}]},l=new Int8Array([0,0,1,0,1,1,0,1]),s=o.a.createVertex(e,35044,l),u=new a.a(e,c.a.attributes,i,{geometry:s}),d=new Int8Array([0,0,1,0,0,1,1,1]),m=o.a.createVertex(e,35044,d),_=new a.a(e,f.attributes,i,{geometry:m});this._outlineProgram=t,this._tileInfoProgram=n,this._outlineVertexArrayObject=u,this._tileInfoVertexArrayObject=_}_getTexture(e,t){if(t.texture&&t.triangleCountReportedInDebug===t.triangleCount)return t.texture;t.triangleCountReportedInDebug=t.triangleCount,this._canvas||(this._canvas=document.createElement("canvas"),this._canvas.setAttribute("id","canvas2d"),this._canvas.setAttribute("width","300"),this._canvas.setAttribute("height","32"),this._canvas.setAttribute("style","display:none"));const n=t.triangleCount;let o=t.key.id;t.triangleCount>0&&(o+=", "+n);const a=this._canvas,r=a.getContext("2d");return r.font="24px sans-serif",r.textAlign="left",r.textBaseline="top",r.clearRect(0,0,300,32),n>1e5?(r.fillStyle="red",r.fillRect(0,0,300,32),r.fillStyle="black"):(r.clearRect(0,0,300,32),r.fillStyle="blue"),r.fillText(o,0,0),t.texture=new i.a(e,{target:3553,pixelFormat:6408,dataType:5121,samplingMode:9728,wrapMode:33071},a),t.texture}}},511:function(e,t,n){"use strict";function o(e,t,n){const o=t&&t.length,l=o?t[0]*n:e.length;let s=i(e,0,l,n,!0);const c=new Array;if(!s||s.next===s.prev)return c;let u,m,_,v,p;if(o&&(s=function(e,t,n,o){const r=new Array;for(let a=0,l=t.length;a<l;a++){const n=i(e,t[a]*o,a<l-1?t[a+1]*o:e.length,o,!1);n===n.next&&(n.steiner=!0),r.push(f(n))}r.sort(y);for(const i of r)d(i,n),n=a(n,n.next);return n}(e,t,s,n)),e.length>80*n){u=_=e[0],m=v=e[1];for(let t=n;t<l;t+=n){const n=e[t],o=e[t+1];u=Math.min(u,n),m=Math.min(m,o),_=Math.max(_,n),v=Math.max(v,o)}p=Math.max(_-u,v-m),p=0!==p?1/p:0}return r(s,c,n,u,m,p),c}function i(e,t,n,o,i){let a;if(i===p(e,t,n,o)>0)for(let r=t;r<n;r+=o)a=c(r,e[r],e[r+1],a);else for(let r=n-o;r>=t;r-=o)a=c(r,e[r],e[r+1],a);return a&&b(a,a.next)&&(u(a),a=a.next),a}function a(e,t=e){if(!e)return e;let n,o=e;do{if(n=!1,o.steiner||!b(o,o.next)&&0!==_(o.prev,o,o.next))o=o.next;else{if(u(o),o=t=o.prev,o===o.next)break;n=!0}}while(n||o!==t);return t}function r(e,t,n,o,i,c,f=0){if(!e)return;!f&&c&&(e=function e(t,n,o,i){for(let a;a!==t;a=a.next){if(a=a||t,null===a.z&&(a.z=x(a.x,a.y,n,o,i)),a.prev.next!==a||a.next.prev!==a)return a.prev.next=a,a.next.prev=a,e(t,n,o,i);a.prevZ=a.prev,a.nextZ=a.next}return t.prevZ.nextZ=null,t.prevZ=null,function(e){let t,n=1;for(;;){let o,i=e;e=null,t=null;let a=0;for(;i;){a++,o=i;let r=0;for(;r<n&&o;r++)o=o.nextZ;let l=n;for(;r>0||l>0&&o;){let n;0===r?(n=o,o=o.nextZ,l--):0!==l&&o?i.z<=o.z?(n=i,i=i.nextZ,r--):(n=o,o=o.nextZ,l--):(n=i,i=i.nextZ,r--),t?t.nextZ=n:e=n,n.prevZ=t,t=n}i=o}if(t.nextZ=null,n*=2,a<2)return e}}(t)}(e,o,i,c));let d=e;for(;e.prev!==e.next;){const m=e.prev,_=e.next;if(c?s(e,o,i,c):l(e))t.push(m.index/n),t.push(e.index/n),t.push(_.index/n),u(e),e=_.next,d=_.next;else if((e=_)===d){f?1===f?r(e=C(e,t,n),t,n,o,i,c,2):2===f&&S(e,t,n,o,i,c):r(a(e),t,n,o,i,c,1);break}}}function l(e){const t=e.prev,n=e,o=e.next;if(_(t,n,o)>=0)return!1;let i=e.next.next;const a=i;let r=0;for(;i!==e.prev&&(0===r||i!==a);){if(r++,g(t.x,t.y,n.x,n.y,o.x,o.y,i.x,i.y)&&_(i.prev,i,i.next)>=0)return!1;i=i.next}return!0}function s(e,t,n,o){const i=e.prev,a=e,r=e.next;if(_(i,a,r)>=0)return!1;const l=i.x<a.x?i.x<r.x?i.x:r.x:a.x<r.x?a.x:r.x,s=i.y<a.y?i.y<r.y?i.y:r.y:a.y<r.y?a.y:r.y,c=i.x>a.x?i.x>r.x?i.x:r.x:a.x>r.x?a.x:r.x,u=i.y>a.y?i.y>r.y?i.y:r.y:a.y>r.y?a.y:r.y,f=x(l,s,t,n,o),d=x(c,u,t,n,o);let m=e.prevZ,v=e.nextZ;for(;m&&m.z>=f&&v&&v.z<=d;){if(m!==e.prev&&m!==e.next&&g(i.x,i.y,a.x,a.y,r.x,r.y,m.x,m.y)&&_(m.prev,m,m.next)>=0)return!1;if(m=m.prevZ,v!==e.prev&&v!==e.next&&g(i.x,i.y,a.x,a.y,r.x,r.y,v.x,v.y)&&_(v.prev,v,v.next)>=0)return!1;v=v.nextZ}for(;m&&m.z>=f;){if(m!==e.prev&&m!==e.next&&g(i.x,i.y,a.x,a.y,r.x,r.y,m.x,m.y)&&_(m.prev,m,m.next)>=0)return!1;m=m.prevZ}for(;v&&v.z<=d;){if(v!==e.prev&&v!==e.next&&g(i.x,i.y,a.x,a.y,r.x,r.y,v.x,v.y)&&_(v.prev,v,v.next)>=0)return!1;v=v.nextZ}return!0}function c(e,t,n,o){const i=new O(e,t,n);return o?(i.next=o.next,i.prev=o,o.next.prev=i,o.next=i):(i.prev=i,i.next=i),i}function u(e){e.next.prev=e.prev,e.prev.next=e.next,e.prevZ&&(e.prevZ.nextZ=e.nextZ),e.nextZ&&(e.nextZ.prevZ=e.prevZ)}function f(e){let t=e,n=e;do{(t.x<n.x||t.x===n.x&&t.y<n.y)&&(n=t),t=t.next}while(t!==e);return n}function d(e,t){if(t=function(e,t){let n=t;const o=e.x,i=e.y;let a,r=-1/0;do{if(i<=n.y&&i>=n.next.y&&n.next.y!==n.y){const e=n.x+(i-n.y)*(n.next.x-n.x)/(n.next.y-n.y);if(e<=o&&e>r){if(r=e,e===o){if(i===n.y)return n;if(i===n.next.y)return n.next}a=n.x<n.next.x?n:n.next}}n=n.next}while(n!==t);if(!a)return null;if(o===r)return a.prev;const l=a,s=a.x,c=a.y;let u,f=1/0;for(n=a.next;n!==l;)o>=n.x&&n.x>=s&&o!==n.x&&g(i<c?o:r,i,s,c,i<c?r:o,i,n.x,n.y)&&(u=Math.abs(i-n.y)/(o-n.x),(u<f||u===f&&n.x>a.x)&&h(n,e)&&(a=n,f=u)),n=n.next;return a}(e,t)){const n=D(t,e);a(n,n.next)}}function m(e,t,n,o){const i=t&&t.length,a=i?t[0]*n:e.length;let r=Math.abs(p(e,0,a,n));if(i)for(let s=0,c=t.length;s<c;s++){const o=t[s]*n,i=s<c-1?t[s+1]*n:e.length;r-=Math.abs(p(e,o,i,n))}let l=0;for(let s=0;s<o.length;s+=3){const t=o[s]*n,i=o[s+1]*n,a=o[s+2]*n;l+=Math.abs((e[t]-e[a])*(e[i+1]-e[t+1])-(e[t]-e[i])*(e[a+1]-e[t+1]))}return 0===r&&0===l?0:Math.abs((l-r)/r)}function _(e,t,n){return(t.y-e.y)*(n.x-t.x)-(t.x-e.x)*(n.y-t.y)}function v(e,t,n,o){return!!(b(e,t)&&b(n,o)||b(e,o)&&b(n,t))||_(e,t,n)>0!=_(e,t,o)>0&&_(n,o,e)>0!=_(n,o,t)>0}function p(e,t,n,o){let i=0;for(let a=t,r=n-o;a<n;a+=o)i+=(e[r]-e[a])*(e[a+1]+e[r+1]),r=a;return i}function g(e,t,n,o,i,a,r,l){return(i-r)*(t-l)-(e-r)*(a-l)>=0&&(e-r)*(o-l)-(n-r)*(t-l)>=0&&(n-r)*(a-l)-(i-r)*(o-l)>=0}function h(e,t){return _(e.prev,e,e.next)<0?_(e,t,e.next)>=0&&_(e,e.prev,t)>=0:_(e,t,e.prev)<0||_(e,e.next,t)<0}function x(e,t,n,o,i){return(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=32767*(e-n)*i)|e<<8))|e<<4))|e<<2))|e<<1))|(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=32767*(t-o)*i)|t<<8))|t<<4))|t<<2))|t<<1))<<1}function b(e,t){return e.x===t.x&&e.y===t.y}function y(e,t){return e.x-t.x}function C(e,t,n){let o=e;do{const i=o.prev,a=o.next.next;!b(i,a)&&v(i,o,o.next,a)&&h(i,a)&&h(a,i)&&(t.push(i.index/n),t.push(o.index/n),t.push(a.index/n),u(o),u(o.next),o=e=a),o=o.next}while(o!==e);return o}function S(e,t,n,o,i,l){let s=e;do{let e=s.next.next;for(;e!==s.prev;){if(s.index!==e.index&&T(s,e)){let c=D(s,e);return s=a(s,s.next),c=a(c,c.next),r(s,t,n,o,i,l),void r(c,t,n,o,i,l)}e=e.next}s=s.next}while(s!==e)}function T(e,t){return e.next.index!==t.index&&e.prev.index!==t.index&&!function(e,t){let n=e;do{if(n.index!==e.index&&n.next.index!==e.index&&n.index!==t.index&&n.next.index!==t.index&&v(n,n.next,e,t))return!0;n=n.next}while(n!==e);return!1}(e,t)&&h(e,t)&&h(t,e)&&function(e,t){let n=e,o=!1;const i=(e.x+t.x)/2,a=(e.y+t.y)/2;do{n.y>a!=n.next.y>a&&n.next.y!==n.y&&i<(n.next.x-n.x)*(a-n.y)/(n.next.y-n.y)+n.x&&(o=!o),n=n.next}while(n!==e);return o}(e,t)}function D(e,t){const n=new O(e.index,e.x,e.y),o=new O(t.index,t.x,t.y),i=e.next,a=t.prev;return e.next=t,t.prev=e,n.next=i,i.prev=n,o.next=n,n.prev=o,a.next=o,o.prev=a,o}n.d(t,"a",(function(){return m})),n.d(t,"b",(function(){return o}));class O{constructor(e,t,n){this.index=e,this.x=t,this.y=n,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}}},513:function(e,t,n){"use strict";n.d(t,"a",(function(){return k}));var o=n(419),i=n(521),a=n(515);const r={nearest:{defines:[],samplingMode:9728,mips:!1},bilinear:{defines:[],samplingMode:9729,mips:!1},bicubic:{defines:["bicubic"],samplingMode:9729,mips:!1},trilinear:{defines:[],samplingMode:9987,mips:!0}};var l=class extends a.a{constructor(){super(...arguments),this._desc={vsPath:"raster/bitmap",fsPath:"raster/bitmap",attributes:{a_position:0,a_texcoord:1}}}dispose(){this._quad&&this._quad.dispose()}prepareState({context:e},t){e.setBlendingEnabled(!0),e.setBlendFunctionSeparate(1,771,1,771),e.setColorMask(!0,!0,!0,!0),e.setStencilWriteMask(0),e.setStencilTestEnabled(!0),e.setStencilFunction(514,t.stencilRef,255)}draw(e,t){const{context:n,renderingOptions:a,painter:l}=e;if(!t.source)return;e.timeline.begin(this.name),this._quad||(this._quad=new i.a(n,[0,0,1,0,0,1,1,1]));const s=((e,t,n)=>{if("dynamic"===n.samplingMode){const{state:n}=e,o=t.resolution/t.pixelRatio/n.resolution,i=Math.round(e.pixelRatio)!==e.pixelRatio,a=o>1.05||o<.95;return n.rotation||a||i||t.isSourceScaled||t.rotation?r.bilinear:r.nearest}return r[n.samplingMode]})(e,t,a),c=l.materialManager.getProgram(e,this._desc,s.defines),{coordScale:u,computedOpacity:f,transforms:d}=t;t.setSamplingProfile(s),t.bind(e,o.w),n.bindProgram(c),c.setUniformMatrix3fv("u_dvsMat3",d.dvs),c.setUniform1i("u_texture",o.w),c.setUniform2fv("u_coordScale",u),c.setUniform1f("u_opacity",f),this._quad.draw(),e.timeline.end(this.name)}},s=n(493),c=n(532),u=n(421),f=n(663),d=class extends a.a{constructor(){super(...arguments),this._color=Object(c.b)(0,1,0,1)}dispose(){this._program&&this._program.dispose()}prepareState({context:e}){e.setStencilTestEnabled(!0),e.setBlendingEnabled(!1),e.setFaceCullingEnabled(!1),e.setColorMask(!1,!1,!1,!1),e.setStencilOp(7680,7680,7681),e.setStencilWriteMask(255),e.setStencilFunction(519,0,255)}draw(e,t){const{context:n,state:o}=e;this._program||(this._program=Object(s.a)(n,f.a));const i=this._program,a=Object(u.f)("clip",{geometry:[{location:0,name:"a_pos",count:2,type:5122}]}),r=t.getVAO(n,o,a.attributes,a.bufferLayouts);n.bindProgram(this._program),i.setUniform2fv("u_coord_range",[1,1]),i.setUniform4fv("u_color",this._color),i.setUniformMatrix3fv("u_dvsMat3",o.displayMat3),n.bindVAO(r),n.drawElements(4,r.indexBuffer.size,5125,0),n.bindVAO()}},m=n(507),_=n(505),v=(n(5),n(53),n(231)),p=(n(429),n(474)),g=n(497),h=(n(426),n(428),n(423)),x=n(420),b=n(723);class y extends a.a{constructor(){super(...arguments),this._color=Object(c.b)(1,0,0,1),this._patternMatrix=Object(v.b)(),this._programOptions={id:!1,pattern:!1}}dispose(){this._program&&(this._program.dispose(),this._program=null),this._vao&&(this._vao.dispose(),this._vao=null)}drawMany(e,t){const{context:n,styleLayerUID:i}=e;this._loadWGLResources(n);const a=e.displayLevel,r=e.styleLayer,l=e.painter.getVectorTileProgramCache(),s=r.getPaintValue("background-color",a),c=r.getPaintValue("background-opacity",a),u=r.getPaintValue("background-pattern",a),f=void 0!==u,d=s[3]*c,m=1|window.devicePixelRatio,_=e.spriteMosaic;let v;const p=m>o.G?2:1,g=e.drawPhase===x.c.HITTEST,b=(g?1:0)<<1|(f?1:0),y=this._programOptions;y.id=g,y.pattern=f;const C=l.getProgram(0,b,y);if(n.bindVAO(this._vao),n.bindProgram(C),f){if(v=_.getMosaicItemPosition(u,!0),!v)return;C.setUniform1f("u_opacity",c),C.setUniform2f("u_pattern_tl",v.tl[0],v.tl[1]),C.setUniform2f("u_pattern_br",v.br[0],v.br[1]),C.setUniform1i("u_texture",o.I),_.bind(n,9729,v.page,o.I)}else this._color[0]=d*s[0],this._color[1]=d*s[1],this._color[2]=d*s[2],this._color[3]=d,C.setUniform4fv("u_color",this._color);if(C.setUniform1f("u_depth",r.z||0),g){const e=Object(h.c)(i+1);C.setUniform4fv("u_id",e)}for(const o of t){if(C.setUniform1f("u_coord_range",o.coordRange[0]),C.setUniformMatrix3fv("u_dvsMat3",o.transforms.dvs),f){const e=Math.max(Math.pow(2,Math.round(a)-o.key.level),1),t=p*o.size[0]*e,n=t/v.size[0],i=t/v.size[1];this._patternMatrix[0]=n,this._patternMatrix[4]=i,C.setUniformMatrix3fv("u_pattern_matrix",this._patternMatrix)}n.setStencilFunction(514,o.stencilRef,255),n.drawArrays(5,0,4)}}_loadWGLResources(e){if(this._program&&this._vao)return;const t=Object(s.a)(e,b.a);if(!t)return;const n=new Int8Array([0,0,1,0,0,1,1,1]),o=p.a.createVertex(e,35044,n),i=new g.a(e,b.a.attributes,{geometry:[{name:"a_pos",count:2,type:5120,offset:0,stride:2,normalized:!1,divisor:0}]},{geometry:o});this._program=t,this._vao=i}}var C=n(6);const S=[1,1,1,1];class T extends a.a{constructor(){super(...arguments),this._color=Object(c.a)(),this._strokeColor=Object(c.a)(),this._programOptions={id:!1}}dispose(){}drawMany(e,t){const{context:n,state:o,drawPhase:i,styleLayerUID:a}=e,r=e.displayLevel,l=e.styleLayer,s=e.painter.getVectorTileProgramCache(),c=l.hasDataDrivenRadius?1:l.getPaintValue("circle-radius",r),u=l.hasDataDrivenColor?S:l.getPaintValue("circle-color",r),f=l.hasDataDrivenOpacity?1:l.getPaintValue("circle-opacity",r),d=l.hasDataDrivenStrokeWidth?1:l.getPaintValue("circle-stroke-width",r),m=l.hasDataDrivenStrokeColor?S:l.getPaintValue("circle-stroke-color",r),_=l.hasDataDrivenStrokeOpacity?1:l.getPaintValue("circle-stroke-opacity",r),v=l.hasDataDrivenBlur?0:l.getPaintValue("circle-blur",r);let p=f*u[3];this._color[0]=p*u[0],this._color[1]=p*u[1],this._color[2]=p*u[2],this._color[3]=p,p=_*m[3],this._strokeColor[0]=p*m[0],this._strokeColor[1]=p*m[1],this._strokeColor[2]=p*m[2],this._strokeColor[3]=p;const g=l.getPaintValue("circle-translate",r),b=l.getPaintValue("circle-translate-anchor",r),y=i===x.c.HITTEST,T=y?1:0,D=this._programOptions;D.id=y;const O=s.getProgram(5,T,D);if(n.bindProgram(O),O.setUniformMatrix3fv("u_displayMat3",1===b?o.displayMat3:o.displayViewMat3),O.setUniform2fv("u_circleTranslation",g),O.setUniform1f("u_depth",l.z),O.setUniform1f("u_radius",c),O.setUniform4fv("u_color",this._color),O.setUniform1f("u_blur",v),O.setUniform1f("u_stroke_width",d),O.setUniform4fv("u_stroke_color",this._strokeColor),O.setUniform1f("u_antialiasingWidth",1.2),y){const e=Object(h.c)(a+1);O.setUniform4fv("u_id",e)}for(const h of t){if(!h.layerData.has(a))continue;const e=h.layerData.get(a);e.prepareForRendering(n,s);const t=e.circleVertexArrayObject;Object(C.g)(t)||(n.bindVAO(t),O.setUniformMatrix3fv("u_dvsMat3",h.transforms.dvs),n.setStencilFunction(514,h.stencilRef,255),n.drawElements(4,e.circleIndexCount,5125,Uint32Array.BYTES_PER_ELEMENT*e.circleIndexStart),h.triangleCount+=e.circleIndexCount/3)}}}const D=[1,1,1,1];class O extends a.a{constructor(){super(...arguments),this._color=Object(c.a)(),this._outlineColor=Object(c.a)(),this._fillProgramOptions={id:!1,dd:!1,pattern:!1},this._outlineProgramOptions={id:!1,dd:!1},this._patternMatrix=Object(v.b)()}dispose(){}drawMany(e,t){const{displayLevel:n,drawPhase:o,renderPass:i,styleLayerUID:a}=e,r=e.styleLayer,l=r.getPaintValue("fill-pattern",n),s=r.hasDataDrivenColor?D:r.getPaintValue("fill-color",n),c=r.hasDataDrivenOpacity?1:r.getPaintValue("fill-opacity",n),u=c*s[3],f=void 0!==l||u<1||r.hasDataDrivenFill;if(f&&"opaque"===i)return;let d;this._color[0]=u*s[0],this._color[1]=u*s[1],this._color[2]=u*s[2],this._color[3]=u,o===x.c.HITTEST&&(d=Object(h.c)(a+1));const m=r.getPaintValue("fill-translate",n),_=r.getPaintValue("fill-translate-anchor",n);this._drawFill(e,a,r,t,m,_,l,f,d),this._drawOutline(e,a,r,t,m,_,l,d,c)}_drawFill(e,t,n,i,a,r,l,s,c){const{context:u,displayLevel:f,drawPhase:d,pixelRatio:m,renderPass:_,spriteMosaic:v,state:p}=e;if(!s&&"translucent"===_)return;const g=void 0!==l,h=m>o.G?2:1,b=n.hasDataDrivenFill,y=e.painter.getVectorTileProgramCache();let S;const T=d===x.c.HITTEST,D=(T?1:0)<<2|(b?1:0)<<1|(g?1:0),O=this._fillProgramOptions;O.id=T,O.dd=b,O.pattern=g;const I=y.getProgram(1,D,O);if(u.bindProgram(I),g){if(S=v.getMosaicItemPosition(l,!0),!S)return void u.bindProgram();I.setUniform2f("u_pattern_tl",S.tl[0],S.tl[1]),I.setUniform2f("u_pattern_br",S.br[0],S.br[1]),I.setUniform1i("u_texture",o.I),v.bind(u,9729,S.page,o.I)}I.setUniformMatrix3fv("u_displayMat3",1===r?p.displayMat3:p.displayViewMat3),I.setUniform2fv("u_fillTranslation",a),I.setUniform1f("u_depth",n.z+152587890625e-16),I.setUniform4fv("u_color",this._color),T&&I.setUniform4fv("u_id",c);for(const o of i){if(!o.layerData.has(t))continue;const e=o.layerData.get(t);e.prepareForRendering(u,y);const n=e.fillVertexArrayObject;if(!Object(C.g)(n)){if(u.bindVAO(n),I.setUniformMatrix3fv("u_dvsMat3",o.transforms.dvs),g){const e=Math.max(Math.pow(2,Math.round(f)-o.key.level),1),t=o.coordRange[0]/(h*o.size[0]*e),n=1/(S.size[0]*t),i=1/(S.size[1]*t);this._patternMatrix[0]=n,this._patternMatrix[4]=i,I.setUniformMatrix3fv("u_pattern_matrix",this._patternMatrix)}u.setStencilFunction(514,o.stencilRef,255),u.drawElements(4,e.fillIndexCount,5125,Uint32Array.BYTES_PER_ELEMENT*e.fillIndexStart),o.triangleCount+=e.fillIndexCount/3}}}_drawOutline(e,t,n,o,i,a,r,l,s){const{context:c,displayLevel:u,drawPhase:f,renderPass:d,pixelRatio:m,state:_}=e;if("opaque"===d)return;const v=void 0!==r;if(!(n.getPaintValue("fill-antialias",u)&&!v||n.hasDataDrivenOutlineColor))return;const p=e.painter.getVectorTileProgramCache(),g=n.hasDataDrivenOutline;if(n.outlineUsesFillColor){if(1!==this._color[3])return;this._outlineColor[0]=this._color[0],this._outlineColor[1]=this._color[1],this._outlineColor[2]=this._color[2],this._outlineColor[3]=this._color[3]}else{const e=n.hasDataDrivenOutlineColor?D:n.getPaintValue("fill-outline-color",u),t=s*e[3];this._outlineColor[0]=t*e[0],this._outlineColor[1]=t*e[1],this._outlineColor[2]=t*e[2],this._outlineColor[3]=t}const h=.75/m,b=f===x.c.HITTEST,y=(b?1:0)<<1|(g?1:0),S=this._outlineProgramOptions;S.id=b,S.dd=g;const T=p.getProgram(2,y,S);c.bindProgram(T),T.setUniformMatrix3fv("u_displayMat3",1===a?_.displayMat3:_.displayViewMat3),T.setUniform2fv("u_fillTranslation",i),T.setUniform1f("u_depth",n.z+152587890625e-16),T.setUniform1f("u_outline_width",h),T.setUniform4fv("u_color",this._outlineColor),b&&T.setUniform4fv("u_id",l);for(const x of o){if(!x.layerData.has(t))continue;const e=x.layerData.get(t);e.prepareForRendering(c,p);const n=e.outlineVertexArrayObject;Object(C.g)(n)||(c.bindVAO(n),T.setUniformMatrix3fv("u_dvsMat3",x.transforms.dvs),c.setStencilFunction(514,x.stencilRef,255),c.drawElements(4,e.outlineIndexCount,5125,Uint32Array.BYTES_PER_ELEMENT*e.outlineIndexStart),x.triangleCount+=e.outlineIndexCount/3)}}}var I=n(275);Math.PI;const z=[1,1,1,1];class w extends a.a{constructor(){super(...arguments),this._color=Object(c.a)(),this._dashArray=Object(I.a)(),this._programOptions={id:!1,dd:!1,pattern:!1}}dispose(){}drawMany(e,t){const{context:n,displayLevel:i,state:a,drawPhase:r,styleLayerUID:l}=e,s=e.styleLayer,c=e.painter.getVectorTileProgramCache(),u=s.getPaintValue("line-translate",i),f=s.getPaintValue("line-translate-anchor",i),d=s.getPaintValue("line-pattern",i),m=void 0!==d,_=1/e.pixelRatio,v=s.getPaintValue("line-blur",i),p=s.hasDataDrivenColor?z:s.getPaintValue("line-color",i),g=s.hasDataDrivenOpacity?1:s.getPaintValue("line-opacity",i),b=s.hasDataDrivenWidth?1:s.getPaintValue("line-width",i),y=g*p[3];this._color[0]=y*p[0],this._color[1]=y*p[1],this._color[2]=y*p[2],this._color[3]=y;const S=s.hasDataDrivenLine,T=r===x.c.HITTEST;let D;T&&(D=Object(h.c)(l+1));const O=(T?1:0)<<2|(S?1:0)<<1|(m?1:0),I=this._programOptions;I.id=T,I.dd=S,I.pattern=m;const w=c.getProgram(3,O,I);if(n.bindProgram(w),w.setUniformMatrix3fv("u_displayViewMat3",a.displayViewMat3),w.setUniformMatrix3fv("u_displayMat3",1===f?a.displayMat3:a.displayViewMat3),w.setUniform2fv("u_lineTranslation",u),w.setUniform1f("u_depth",s.z),w.setUniform1f("u_blur",v),w.setUniform1f("u_antialiasing",_),w.setUniform4fv("u_color",this._color),w.setUniform1f("u_width",b),T&&w.setUniform4fv("u_id",D),m){const t=e.spriteMosaic,i=t.getMosaicItemPosition(d,!0);i&&(t.bind(n,9729,i.page,o.I),w.setUniform2f("u_pattern_tl",i.tl[0],i.br[1]),w.setUniform2f("u_pattern_br",i.br[0],i.tl[1]),w.setUniform2f("u_spriteSize",8*i.size[0],i.size[1]),w.setUniform1i("u_texture",o.I))}else{let e=s.getPaintValue("line-dasharray",i);e.length<2&&(e=[1,-1]);const t=8;this._dashArray[0]=t*e[0],this._dashArray[1]=t*e[1],w.setUniform2fv("u_dasharray",this._dashArray)}for(const o of t){if(!o.layerData.has(l))continue;const e=o.layerData.get(l);e.prepareForRendering(n,c);const t=e.lineVertexArrayObject;Object(C.g)(t)||(n.bindVAO(t),w.setUniformMatrix3fv("u_dvsMat3",o.transforms.dvs),n.setStencilFunction(514,o.stencilRef,255),n.drawElements(4,e.lineIndexCount,5125,Uint32Array.BYTES_PER_ELEMENT*e.lineIndexStart),o.triangleCount+=e.lineIndexCount/3)}}}var V=n(541),P=n(448);const M=[1,1,1,1];class A extends a.a{constructor(){super(...arguments),this._iconProgramOptions={id:!1,dd:!1,sdf:!1},this._sdfProgramOptions={id:!1,dd:!1},this._spritesTextureSize=Object(I.a)(),this._haloColor=Object(c.a)(),this._sdfColor=Object(c.a)(),this._color=Object(c.a)()}dispose(){}drawMany(e,t){const{drawPhase:n,styleLayerUID:o}=e,i=e.styleLayer;let a;n===x.c.HITTEST&&(a=Object(h.c)(o+1)),this._drawIcons(e,i,t,a),this._drawText(e,i,t,a)}_drawIcons(e,t,n,i){const{context:a,displayLevel:r,drawPhase:l,painter:s,state:c,styleLayerUID:u}=e;let f,d=!1;for(const o of n)if(o.layerData.has(u)&&(f=o.layerData.get(u),f.iconPerPageElementsMap.size>0)){d=!0;break}if(!d)return;const m=t.hasDataDrivenIconSize?1:t.getLayoutValue("icon-size",r),_=t.hasDataDrivenIconColor?M:t.getPaintValue("icon-color",r),v=t.hasDataDrivenIconOpacity?1:t.getPaintValue("icon-opacity",r),p=t.getPaintValue("icon-translate",r),g=t.getPaintValue("icon-translate-anchor",r),h=s.getVectorTileProgramCache(),b=_[3]*v;this._color[0]=b*_[0],this._color[1]=b*_[1],this._color[2]=b*_[2],this._color[3]=b;let y=t.getLayoutValue("icon-rotation-alignment",r);2===y&&(y=0===t.getLayoutValue("symbol-placement",r)?1:0);const S=0===y,T=t.getLayoutValue("icon-keep-upright",r)&&S,D=f.isIconSDF,O=t.hasDataDrivenIcon,I=l===x.c.HITTEST,z=(I?1:0)<<2|(O?1:0)<<1|(D?1:0),w=this._iconProgramOptions;w.id=I,w.dd=O,w.sdf=D;const A=h.getProgram(4,z,w);if(a.bindProgram(A),D){const e=t.getPaintValue("icon-halo-color",r),n=t.getPaintValue("icon-halo-width",r);A.setUniform4f("u_outlineColor",e[0],e[1],e[2],e[3]),A.setUniform1f("u_outlineSize",n)}A.setUniformMatrix3fv("u_displayViewMat3",0===y?c.displayViewMat3:c.displayMat3),A.setUniformMatrix3fv("u_displayMat3",1===g?c.displayMat3:c.displayViewMat3),A.setUniform2fv("u_iconTranslation",p),A.setUniform1f("u_depth",t.z),A.setUniform1f("u_mapRotation",Object(P.b)(c.rotation)),A.setUniform1f("u_keepUpright",T?1:0),A.setUniform1f("u_level",10*r),A.setUniform1i("u_texture",o.I),A.setUniform1f("u_size",m),A.setUniform4fv("u_color",this._color),A.setUniform1f("u_opacity",1),A.setUniform1f("u_fadeDuration",V.d/1e3),I&&A.setUniform4fv("u_id",i);for(const o of n){if(!o.layerData.has(u))continue;if(f=o.layerData.get(u),0===f.iconPerPageElementsMap.size)continue;f.prepareForRendering(a,h),f.updateOpacityInfo();const t=f.iconVertexArrayObject;if(!Object(C.g)(t)){a.bindVAO(t),A.setUniformMatrix3fv("u_dvsMat3",o.transforms.dvs),A.setUniform1f("u_time",(performance.now()-f.lastOpacityUpdate)/1e3);for(const[t,n]of f.iconPerPageElementsMap)this._renderIconRange(e,A,n,t,o)}}}_renderIconRange(e,t,n,i,a){const{context:r,spriteMosaic:l}=e;this._spritesTextureSize[0]=l.getWidth(i)/4,this._spritesTextureSize[1]=l.getHeight(i)/4,t.setUniform2fv("u_mosaicSize",this._spritesTextureSize),l.bind(r,9729,i,o.I),r.setStencilTestEnabled(!0),r.setStencilFunction(516,255,255),r.setStencilWriteMask(0),r.drawElements(4,n[1],5125,Uint32Array.BYTES_PER_ELEMENT*n[0]),a.triangleCount+=n[1]/3}_drawText(e,t,n,i){const{context:a,displayLevel:r,drawPhase:l,glyphMosaic:s,painter:c,pixelRatio:u,state:f,styleLayerUID:d}=e;let m,_=!1;for(const o of n)if(o.layerData.has(d)&&(m=o.layerData.get(d),m.glyphPerPageElementsMap.size>0)){_=!0;break}if(!_)return;let v=t.getLayoutValue("text-rotation-alignment",r);2===v&&(v=0===t.getLayoutValue("symbol-placement",r)?1:0);const p=0===v,g=t.getLayoutValue("text-keep-upright",r)&&p,h=l===x.c.HITTEST,b=.8*3/u,y=t.hasDataDrivenTextSize?1:t.getLayoutValue("text-size",r),S=t.hasDataDrivenTextColor?M:t.getPaintValue("text-color",r),T=t.hasDataDrivenTextOpacity?1:t.getPaintValue("text-opacity",r),D=t.getPaintValue("text-halo-color",r),O=t.getPaintValue("text-halo-width",r),z=3*t.getPaintValue("text-halo-blur",r),w=3*O,A=c.getVectorTileProgramCache(),E=S[3]*T;this._sdfColor[0]=E*S[0],this._sdfColor[1]=E*S[1],this._sdfColor[2]=E*S[2],this._sdfColor[3]=E;const F=D[3]*T;this._haloColor[0]=F*D[0],this._haloColor[1]=F*D[1],this._haloColor[2]=F*D[2],this._haloColor[3]=F,this._glyphTextureSize||(this._glyphTextureSize=Object(I.b)(s.width/4,s.height/4));const U=t.getPaintValue("text-translate",r),R=t.getPaintValue("text-translate-anchor",r),L=t.hasDataDrivenText,N=(h?1:0)<<1|(L?1:0),k=this._sdfProgramOptions;k.id=h,k.dd=L;const G=A.getProgram(6,N,k);a.bindProgram(G),G.setUniformMatrix3fv("u_displayViewMat3",0===v?f.displayViewMat3:f.displayMat3),G.setUniformMatrix3fv("u_displayMat3",1===R?f.displayMat3:f.displayViewMat3),G.setUniform2fv("u_textTranslation",U),G.setUniform1f("u_depth",t.z+152587890625e-16),G.setUniform2fv("u_mosaicSize",this._glyphTextureSize),G.setUniform1f("u_mapRotation",Object(P.b)(f.rotation)),G.setUniform1f("u_keepUpright",g?1:0),G.setUniform1f("u_level",10*r),G.setUniform1i("u_texture",o.H),G.setUniform1f("u_size",y),G.setUniform1f("u_antialiasingWidth",b),G.setUniform1f("u_opacity",1),G.setUniform1f("u_fadeDuration",V.d/1e3),h&&G.setUniform4fv("u_id",i);for(const o of n){if(!o.layerData.has(d))continue;if(m=o.layerData.get(d),0===m.glyphPerPageElementsMap.size)continue;m.prepareForRendering(a,A),m.updateOpacityInfo();const e=m.textVertexArrayObject;if(Object(C.g)(e))continue;a.bindVAO(e),G.setUniformMatrix3fv("u_dvsMat3",o.transforms.dvs),a.setStencilTestEnabled(!0),a.setStencilFunction(516,255,255),a.setStencilWriteMask(0);const t=(performance.now()-m.lastOpacityUpdate)/1e3;G.setUniform1f("u_time",t),m.glyphPerPageElementsMap.forEach((e,t)=>{this._renderGlyphRange(a,e,t,s,G,D[3],O,z,w,o)})}}_renderGlyphRange(e,t,n,i,a,r,l,s,c,u){i.bind(e,9729,n,o.H),r>0&&l>0&&(a.setUniform4fv("u_color",this._haloColor),a.setUniform1f("u_halo",1),a.setUniform1f("u_edgeDistance",c),a.setUniform1f("u_edgeBlur",s),e.drawElements(4,t[1],5125,Uint32Array.BYTES_PER_ELEMENT*t[0]),u.triangleCount+=t[1]/3),this._sdfColor[3]>0&&(a.setUniform4fv("u_color",this._sdfColor),a.setUniform1f("u_halo",0),a.setUniform1f("u_edgeDistance",0),a.setUniform1f("u_edgeBlur",0),e.drawElements(4,t[1],5125,Uint32Array.BYTES_PER_ELEMENT*t[0]),u.triangleCount+=t[1]/3)}}var E=n(334),F=n(438),U=n(422),R=class extends a.a{prepareState({context:e},t,n){const o=n&&-1!==n.indexOf("id");e.setBlendingEnabled(!o),e.setBlendFunctionSeparate(1,771,1,771),e.setColorMask(!0,!0,!0,!0),e.setStencilWriteMask(0),e.setStencilTestEnabled(!0),e.setStencilFunction(514,t.stencilRef,255)}draw(e,t,n){if(t.commitChanges(e),!t.visible)return;const o=this.getGeometryType(),i=t.getDisplayList(),a=t.getGeometry(o);a&&i&&(e.timeline.begin(this.name),i.byType(o,o=>{this.drawGeometry(e,t,o,a,n)}),e.timeline.end(this.name))}_getVAO(e,t,n,o){return o.vao||(o.vao=new g.a(e,n,t,o.vertexBufferMap,o.indexBuffer)),o.vao}_setSharedUniforms(e,t,n){e.setUniform1f("u_pixelRatio",t.pixelRatio),e.setUniformMatrix3fv("u_dvsMat3",n.transforms.dvs),e.setUniformMatrix3fv("u_displayViewMat3",t.state.displayViewMat3),e.setUniformMatrix4fv("u_insideEffectMat4",t.rendererInfo.insideEffect),e.setUniformMatrix4fv("u_outsideEffectMat4",t.rendererInfo.outsideEffect),e.setUniform1fv("u_insideOpacities",t.rendererInfo.insideOpacities),e.setUniform1fv("u_outsideOpacities",t.rendererInfo.outsideOpacities),e.setUniform1i("u_attributeTextureSize",t.attributeView.size),e.setUniform1i("u_attributeData0",o.s),e.setUniform1i("u_attributeData1",o.t),e.setUniform1i("u_attributeData2",o.u),e.setUniform1i("u_attributeData3",o.v)}},L=n(696),N=class extends a.a{constructor(){super(...arguments),this._desc={lut:{vsPath:"raster/lut",fsPath:"raster/lut",attributes:{a_position:0,a_texcoord:1}},stretch:{vsPath:"raster/stretch",fsPath:"raster/stretch",attributes:{a_position:0,a_texcoord:1}},hillshade:{vsPath:"raster/hillshade",fsPath:"raster/hillshade",attributes:{a_position:0,a_texcoord:1}}},this._rendererUniformInfos=new Map}dispose(){this._quad&&this._quad.dispose()}prepareState({context:e},t){e.setBlendingEnabled(!0),e.setBlendFunctionSeparate(1,771,1,771),e.setColorMask(!0,!0,!0,!0),e.setStencilWriteMask(0),e.setStencilTestEnabled(!0),e.setStencilFunction(514,t.stencilRef,255)}draw(e,t){if(!t.source)return;if(t.suspended)return;e.timeline.begin(this.name),t.updateTexture(e);const n=this.getShaderVariations(t),o=e.painter.materialManager.getProgram(e,this._desc[t.symbolizerParameters.type],n);this.drawWithProgram(e.context,o,t),e.timeline.end(this.name)}drawWithProgram(e,t,n,o=1,a=[0,0],r=!1){this._quad||(this._quad=new i.a(e,[0,0,1,0,0,1,1,1]));const{symbolizerParameters:l,transformGrid:s,width:c,height:u,opacity:f}=n,d=l.type;e.bindProgram(t);const m=this.getShaderVariations(n),_=this.getUniformInfos(d,e,t,m),{names:v,textures:p}=n.getTextures();Object(L.j)(e,t,v,p);const g=Object(L.d)(o,a),h=Object(L.f)(s,[c,u],[n.source.width,n.source.height],f,r);if(Object(L.k)(t,_,{u_coordScale:n.coordScale,u_dvsMat3:n.transforms.dvs,...g,...h}),l.colormap){const{colormap:e,colormapOffset:n}=l,o=Object(L.e)(e,n);Object(L.k)(t,_,o)}if("stretch"===l.type){const e=Object(L.h)(l);Object(L.k)(t,_,e)}else if("hillshade"===l.type){const e=Object(L.g)(l);Object(L.k)(t,_,e)}this._quad.draw()}getUniformInfos(e,t,n,o){const i=o.length>0?e+"-"+o.join("-"):e;if(this._rendererUniformInfos.has(i))return this._rendererUniformInfos.get(i);const a=Object(L.i)(t,n);return this._rendererUniformInfos.set(i,a),a}getShaderVariations(e){const t=[];return"cubic"===e.interpolation&&t.push("bicubic"),e.symbolizerParameters.colormap&&t.push("applyColormap"),e.transformGrid&&t.push("applyProjection"),t}};const k={marker:class extends R{dispose(){}getGeometryType(){return x.d.MARKER}drawGeometry(e,t,n,o,i){const{context:a,painter:r,rendererInfo:l,state:s}=e,{indexCount:c,indexFrom:f,materialKey:d}=n,m=U.d.load(d),{bufferLayouts:_,attributes:v}=(e=>Object(u.f)(e.data,{geometry:[{location:0,name:"a_pos",count:2,type:5122},{location:1,name:"a_vertexOffset",count:2,type:5122},{location:2,name:"a_texCoords",count:2,type:5123},{location:3,name:"a_bitSetAndDistRatio",count:4,type:5121},{location:4,name:"a_id",count:4,type:5121},{location:5,name:"a_color",count:4,type:5121,normalized:!0},{location:6,name:"a_outlineColor",count:4,type:5121,normalized:!0},{location:7,name:"a_sizeAndOutlineWidth",count:4,type:5121}]}))(m),p=r.materialManager.getMaterialProgram(e,m,"materials/icon",v,i),g=this._getVAO(a,_,v,o);a.bindProgram(p),a.bindVAO(g),m.textureBinding&&r.textureManager.bindTextures(a,p,m),this._setSharedUniforms(p,e,t);const h=m.vvRotation?s.displayViewMat3:s.displayMat3;if(p.setUniformMatrix3fv("u_displayMat3",h),m.vvSizeMinMaxValue&&p.setUniform4fv("u_vvSizeMinMaxValue",l.vvSizeMinMaxValue),m.vvSizeScaleStops&&p.setUniform1f("u_vvSizeScaleStopsValue",l.vvSizeScaleStopsValue),m.vvSizeFieldStops){const e=l.getSizeVVFieldStops(t.key.level);p.setUniform1fv("u_vvSizeFieldStopsValues",e.values),p.setUniform1fv("u_vvSizeFieldStopsSizes",e.sizes)}m.vvSizeUnitValue&&p.setUniform1f("u_vvSizeUnitValueWorldToPixelsRatio",l.vvSizeUnitValueToPixelsRatio),m.vvColor&&(p.setUniform1fv("u_vvColorValues",l.vvColorValues),p.setUniform4fv("u_vvColors",l.vvColors)),m.vvOpacity&&(p.setUniform1fv("u_vvOpacityValues",l.vvOpacityValues),p.setUniform1fv("u_vvOpacities",l.vvOpacities)),m.vvRotation&&p.setUniform1f("u_vvRotationType","geographic"===l.vvMaterialParameters.vvRotationType?0:1),a.drawElements(4,c,5125,Uint32Array.BYTES_PER_ELEMENT*f),a.bindVAO(null)}},line:class extends R{dispose(){}getGeometryType(){return x.d.LINE}drawGeometry(e,t,n,o,i){const{context:a,painter:r,rendererInfo:l,requiredLevel:s}=e,{indexFrom:c,indexCount:f,materialKey:d}=n,m=U.c.load(d),{bufferLayouts:_,attributes:v}=(e=>Object(u.f)(e.data,{geometry:[{location:0,name:"a_pos",count:2,type:5122},{location:1,name:"a_id",count:4,type:5121},{location:2,name:"a_color",count:4,type:5121,normalized:!0},{location:3,name:"a_offsetAndNormal",count:4,type:5120},{location:4,name:"a_accumulatedDistanceAndHalfWidth",count:2,type:5123},{location:5,name:"a_tlbr",count:4,type:5123},{location:6,name:"a_segmentDirection",count:4,type:5120},{location:7,name:"a_aux",count:2,type:5123}]}))(m),p=r.materialManager.getMaterialProgram(e,m,"materials/line",v,i),g=this._getVAO(a,_,v,o),h=1/e.pixelRatio;a.bindProgram(p),a.bindVAO(g),this._setSharedUniforms(p,e,t),m.textureBinding&&r.textureManager.bindTextures(a,p,m);const x=Math.pow(2,s-t.key.level)/e.pixelRatio;if(p.setUniform1f("u_zoomFactor",x),p.setUniform1f("u_blur",0+h),p.setUniform1f("u_antialiasing",h),m.vvSizeMinMaxValue&&p.setUniform4fv("u_vvSizeMinMaxValue",l.vvSizeMinMaxValue),m.vvSizeScaleStops&&p.setUniform1f("u_vvSizeScaleStopsValue",l.vvSizeScaleStopsValue),m.vvSizeFieldStops){const e=l.getSizeVVFieldStops(t.key.level);p.setUniform1fv("u_vvSizeFieldStopsValues",e.values),p.setUniform1fv("u_vvSizeFieldStopsSizes",e.sizes)}m.vvSizeUnitValue&&p.setUniform1f("u_vvSizeUnitValueWorldToPixelsRatio",l.vvSizeUnitValueToPixelsRatio),m.vvColor&&(p.setUniform1fv("u_vvColorValues",l.vvColorValues),p.setUniform4fv("u_vvColors",l.vvColors)),m.vvOpacity&&(p.setUniform1fv("u_vvOpacityValues",l.vvOpacityValues),p.setUniform1fv("u_vvOpacities",l.vvOpacities)),a.setFaceCullingEnabled(!0),a.setFrontFace(2305),a.setCullFace(1029),a.drawElements(4,f,5125,Uint32Array.BYTES_PER_ELEMENT*c),a.setFaceCullingEnabled(!1),a.bindVAO(null)}},fill:class extends R{constructor(){super(...arguments),this._dotTextureSize=0,this._dotTextures=null,this._dotSamplers=new Int32Array([o.A,o.B])}dispose(){this._disposeTextures()}getGeometryType(){return x.d.FILL}drawGeometry(e,t,n,i,a){const{context:r,painter:l,rendererInfo:s,requiredLevel:c}=e,{indexCount:f,indexFrom:d,materialKey:m}=n,_=U.a.load(m),{bufferLayouts:v,attributes:p}=(e=>Object(u.f)(e.data,{geometry:[{location:0,name:"a_pos",count:2,type:5122},{location:1,name:"a_id",count:4,type:5121},...e.dotDensity?[]:[{location:2,name:"a_color",count:4,type:5121,normalized:!0},{location:3,name:"a_tlbr",count:4,type:5123},{location:4,name:"a_aux1",count:4,type:5121},{location:5,name:"a_aux2",count:2,type:5123},{location:6,name:"a_aux3",count:4,type:5121}],...e.dotDensity?[{location:2,name:"a_inverseArea",count:1,type:5126}]:[]]}))(_),g=l.materialManager.getMaterialProgram(e,_,"materials/fill",p,a),h=this._getVAO(r,v,p,i);if(r.bindProgram(g),r.bindVAO(h),this._setSharedUniforms(g,e,t),_.textureBinding){l.textureManager.bindTextures(r,g,_);const n=1/Math.pow(2,c-t.key.level)/e.pixelRatio;g.setUniform1f("u_zoomFactor",n)}if(_.vvColor&&(g.setUniform1fv("u_vvColorValues",s.vvColorValues),g.setUniform4fv("u_vvColors",s.vvColors)),_.vvOpacity&&(g.setUniform1fv("u_vvOpacityValues",s.vvOpacityValues),g.setUniform1fv("u_vvOpacities",s.vvOpacities)),_.dotDensity){const n=o.F/s.ddDotSize,i=n*window.devicePixelRatio*n*window.devicePixelRatio,a=1/Math.pow(2,c-t.key.level),l=1/a*(1/a),u=s.ddDotScale?e.state.scale/s.ddDotScale:1;g.setUniform1f("u_tileZoomFactor",a),g.setUniform1f("u_tileDotsOverArea",i/(o.F*window.devicePixelRatio*o.F*window.devicePixelRatio)),g.setUniformMatrix4fv("u_dotColors",s.ddColors),g.setUniform4fv("u_isActive",s.ddActiveDots),g.setUniform4fv("u_dotBackgroundColor",s.ddBackgroundColor),g.setUniform1f("u_dotValue",Math.max(1,s.ddDotValue*u*l)),this._bindDotDensityTextures(r,g,s,n)}r.drawElements(4,f,5125,Uint32Array.BYTES_PER_ELEMENT*d),r.bindVAO(null)}_disposeTextures(){if(this._dotTextures){for(let e=0;e<this._dotTextures.length;e++)this._dotTextures[e].dispose();this._dotTextures=null}}_bindDotDensityTextures(e,t,n,o){const i=this._createDotDensityTextures(e,o,n.ddSeed);t.setUniform1iv("u_dotTextures",this._dotSamplers);for(let a=0;a<i.length;a++)e.bindTexture(i[a],this._dotSamplers[a])}_createDotDensityTextures(e,t,n){if(this._dotTextureSize===t&&this._seed===n||(this._disposeTextures(),this._dotTextureSize=t,this._seed=n),null===this._dotTextures){const o=new E.a(n);this._dotTextures=[this._allocDotDensityTexture(e,t,o),this._allocDotDensityTexture(e,t,o)]}return this._dotTextures}_allocDotDensityTexture(e,t,n){const o=new Float32Array(t*t*4);for(let i=0;i<o.length;i++)o[i]=n.getFloat();return new F.a(e,{wrapMode:10497,pixelFormat:6408,dataType:5126,samplingMode:9728,width:t,height:t},o)}},text:class extends R{dispose(){}getGeometryType(){return x.d.TEXT}drawGeometry(e,t,n,o,i){const{context:a,painter:r,rendererInfo:l,state:s}=e,{indexCount:c,indexFrom:f,materialKey:d}=n,m=U.f.load(d),{bufferLayouts:_,attributes:v}=(e=>Object(u.f)(e.data,{geometry:[{location:0,name:"a_pos",count:2,type:5122},{location:1,name:"a_id",count:4,type:5121},{location:2,name:"a_color",count:4,type:5121,normalized:!0},{location:3,name:"a_haloColor",count:4,type:5121,normalized:!0},{location:4,name:"a_texFontSize",count:4,type:5121},{location:5,name:"a_aux",count:4,type:5120},{location:6,name:"a_vertexOffset",count:2,type:5122},{location:7,name:"a_texCoords",count:2,type:5123}]}))(m),p=r.materialManager.getMaterialProgram(e,m,"materials/text",v,i),g=this._getVAO(a,_,v,o);if(a.bindProgram(p),a.bindVAO(g),this._setSharedUniforms(p,e,t),r.textureManager.bindTextures(a,p,m),p.setUniformMatrix3fv("u_displayMat3",s.displayMat3),p.setUniformMatrix3fv("u_displayViewMat3",s.displayViewMat3),m.vvSizeMinMaxValue&&p.setUniform4fv("u_vvSizeMinMaxValue",l.vvSizeMinMaxValue),m.vvSizeScaleStops&&p.setUniform1f("u_vvSizeScaleStopsValue",l.vvSizeScaleStopsValue),m.vvSizeFieldStops){const e=l.getSizeVVFieldStops(t.key.level);p.setUniform1fv("u_vvSizeFieldStopsValues",e.values),p.setUniform1fv("u_vvSizeFieldStopsSizes",e.sizes)}m.vvSizeUnitValue&&p.setUniform1f("u_vvSizeUnitValueWorldToPixelsRatio",l.vvSizeUnitValueToPixelsRatio),m.vvColor&&(p.setUniform1fv("u_vvColorValues",l.vvColorValues),p.setUniform4fv("u_vvColors",l.vvColors)),m.vvOpacity&&(p.setUniform1fv("u_vvOpacityValues",l.vvOpacityValues),p.setUniform1fv("u_vvOpacities",l.vvOpacities)),m.vvRotation&&p.setUniform1f("u_vvRotationType","geographic"===l.vvMaterialParameters.vvRotationType?0:1),p.setUniform1f("u_isHalo",1),a.drawElements(4,c,5125,Uint32Array.BYTES_PER_ELEMENT*f),p.setUniform1f("u_isHalo",0),a.drawElements(4,c,5125,Uint32Array.BYTES_PER_ELEMENT*f),a.bindVAO(null)}},label:class extends R{dispose(){}getGeometryType(){return x.d.LABEL}drawGeometry(e,t,n,o,i){const{context:a,painter:r,state:l,rendererInfo:s}=e,{indexCount:c,indexFrom:f,materialKey:d}=n,m=U.b.load(d),_=m.mapAligned?1:0;if(!_&&Math.abs(t.key.level-Math.round(100*e.displayLevel)/100)>=1)return;const{bufferLayouts:v,attributes:p}=(e=>Object(u.f)(e.data,{geometry:[{location:0,name:"a_pos",count:2,type:5122},{location:1,name:"a_id",count:4,type:5121},{location:2,name:"a_color",count:4,type:5121,normalized:!0},{location:3,name:"a_haloColor",count:4,type:5121,normalized:!0},{location:4,name:"a_texAndSize",count:4,type:5121},{location:5,name:"a_refSymbolAndPlacementOffset",count:4,type:5121},{location:6,name:"a_glyphData",count:4,type:5121},{location:7,name:"a_vertexOffset",count:2,type:5122},{location:8,name:"a_texCoords",count:2,type:5123}]}))(m),g=r.materialManager.getMaterialProgram(e,m,"materials/label",p,i),h=this._getVAO(a,v,p,o);e.context.setStencilFunction(514,0,255),a.bindProgram(g),a.bindVAO(h),this._setSharedUniforms(g,e,t),r.textureManager.bindTextures(a,g,m);const x=1===_?l.displayViewMat3:l.displayMat3;if(m.vvSizeMinMaxValue&&g.setUniform4fv("u_vvSizeMinMaxValue",s.vvSizeMinMaxValue),m.vvSizeScaleStops&&g.setUniform1f("u_vvSizeScaleStopsValue",s.vvSizeScaleStopsValue),m.vvSizeFieldStops){const e=s.getSizeVVFieldStops(t.key.level);g.setUniform1fv("u_vvSizeFieldStopsValues",e.values),g.setUniform1fv("u_vvSizeFieldStopsSizes",e.sizes)}m.vvSizeUnitValue&&g.setUniform1f("u_vvSizeUnitValueWorldToPixelsRatio",s.vvSizeUnitValueToPixelsRatio),g.setUniform1f("u_mapRotation",Math.floor(l.rotation/360*254)),g.setUniform1f("u_mapAligned",_),g.setUniformMatrix3fv("u_displayMat3",x),g.setUniform1f("u_opacity",1),g.setUniform1f("u_zoomLevel",Math.round(10*e.displayLevel)),g.setUniform2fv("u_screenSize",e.state.size),g.setUniform1f("u_isHalo",1),a.drawElements(4,c,5125,Uint32Array.BYTES_PER_ELEMENT*f),g.setUniform1f("u_isHalo",0),a.drawElements(4,c,5125,Uint32Array.BYTES_PER_ELEMENT*f),a.bindVAO(null),a.setStencilTestEnabled(!0),a.setBlendingEnabled(!0)}},clip:d,stencil:_.a,bitmap:l,raster:N,tileInfo:m.a,vtlBackground:y,vtlFill:O,vtlLine:w,vtlCircle:T,vtlSymbol:A}},515:function(e,t,n){"use strict";t.a=class{constructor(){this.name=this.constructor.name||"UnnamedBrush"}prepareState(e,t,n){}draw(e,t,n){}drawMany(e,t,n){for(const o of t)this.draw(e,o,n)}}},521:function(e,t,n){"use strict";n(5),n(53),n(429);var o=n(474),i=n(497);n(426),n(428);t.a=class{constructor(e,t){this.rctx=e,this._vertexBuffer=o.a.createVertex(e,35044,new Uint16Array(t)),this._vao=new i.a(e,{a_position:0},{geometry:[{name:"a_position",count:2,type:5122,offset:0,stride:4,normalized:!1}]},{geometry:this._vertexBuffer})}bind(){this._vao.bind()}unbind(){this._vao.unbind()}dispose(){this._vao.dispose(!1),this._vertexBuffer.dispose()}draw(){this.rctx.bindVAO(this._vao),this.rctx.drawArrays(5,0,4)}}},532:function(e,t,n){"use strict";function o(){return new Float32Array(4)}function i(e,t,n,o){const i=new Float32Array(4);return i[0]=e,i[1]=t,i[2]=n,i[3]=o,i}function a(){return o()}function r(){return i(1,1,1,1)}function l(){return i(1,0,0,0)}function s(){return i(0,1,0,0)}function c(){return i(0,0,1,0)}function u(){return i(0,0,0,1)}n.d(t,"a",(function(){return o})),n.d(t,"b",(function(){return i}));const f=a(),d=r(),m=l(),_=s(),v=c(),p=u();Object.freeze({__proto__:null,create:o,clone:function(e){const t=new Float32Array(4);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t},fromValues:i,createView:function(e,t){return new Float32Array(e,t,4)},zeros:a,ones:r,unitX:l,unitY:s,unitZ:c,unitW:u,ZEROS:f,ONES:d,UNIT_X:m,UNIT_Y:_,UNIT_Z:v,UNIT_W:p})},536:function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));n(5),n(53),n(429),n(426),n(428);var o=n(570),i={background:{"background.frag":"uniform lowp vec4 u_color;\nvoid main() {\n  gl_FragColor = u_color;\n}","background.vert":"attribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform mediump vec2 u_coord_range;\nuniform mediump float u_depth;\nvoid main() {\n  vec3 v_pos = u_dvsMat3 * vec3(u_coord_range * a_pos, 1.0);\n  gl_Position = vec4(v_pos.xy, 0.0, 1.0);\n}"},bitBlit:{"bitBlit.frag":"uniform lowp sampler2D u_tex;\nuniform lowp float u_opacity;\nvarying mediump vec2 v_uv;\nvoid main() {\n  lowp vec4 color = texture2D(u_tex, v_uv);\n  gl_FragColor = color *  u_opacity;\n}","bitBlit.vert":"attribute vec2 a_pos;\nattribute vec2 a_tex;\nvarying mediump vec2 v_uv;\nvoid main(void) {\n  gl_Position = vec4(a_pos, 0.0, 1.0);\n  v_uv = a_tex;\n}"},blend:{"blend.frag":"precision mediump float;\nuniform sampler2D u_layerTexture;\nuniform lowp float u_opacity;\nuniform lowp float u_inFadeOpacity;\n#ifndef NORMAL\nuniform sampler2D u_backbufferTexture;\n#endif\nvarying mediump vec2 v_uv;\nfloat rgb2v(in vec3 c) {\n  return max(c.x, max(c.y, c.z));\n}\nvec3 rgb2hsv(in vec3 c) {\n  vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n  vec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\n  vec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\n  float d = q.x - min(q.w, q.y);\n  float e = 1.0e-10;\n  return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), min(d / (q.x + e), 1.0), q.x);\n}\nvec3 hsv2rgb(in vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nvec3 tint(in vec3 Cb, in vec3 Cs) {\n  float vIn = rgb2v(Cb);\n  vec3 hsvTint = rgb2hsv(Cs);\n  vec3 hsvOut = vec3(hsvTint.x, hsvTint.y, vIn * hsvTint.z);\n  return hsv2rgb(hsvOut);\n}\nfloat overlay(in float Cb, in float Cs) {\n  return (1.0 - step(0.5, Cs)) * (1.0 - 2.0 * (1.0 - Cs ) * (1.0 - Cb)) + step(0.5, Cs) * (2.0 * Cs * Cb);\n}\nfloat colorDodge(in float Cb, in float Cs) {\n  return (Cb == 0.0) ? 0.0 : (Cs == 1.0) ? 1.0 : min(1.0, Cb / (1.0 - Cs));\n}\nfloat colorBurn(in float Cb, in float Cs) {\n return (Cb == 1.0) ? 1.0 : (Cs == 0.0) ? 0.0 : 1.0 - min(1.0, (1.0 - Cb) / Cs);\n}\nfloat hardLight(in float Cb, in float Cs) {\n  return (1.0 - step(0.5, Cs)) * (2.0 * Cs * Cb) + step(0.5, Cs) * (1.0 - 2.0 * (1.0 - Cs) * (1.0 - Cb));\n}\nfloat reflectBlend(in float Cb, in float Cs) {\n\treturn (Cs == 1.0) ? Cs : min(Cb * Cb / (1.0 - Cs), 1.0);\n}\nfloat softLight(in float Cb, in float Cs) {\n  if (Cs <= 0.5) {\n    return Cb - (1.0 - 2.0 * Cs) * Cb * (1.0 - Cb);\n  }\n  if (Cb <= 0.25) {\n    return Cb + (2.0 * Cs - 1.0) * Cb * ((16.0 * Cb - 12.0) * Cb + 3.0);\n  }\n  return Cb + (2.0 * Cs - 1.0) * (sqrt(Cb) - Cb);\n}\nfloat vividLight(in float Cb, in float Cs) {\n  return (1.0 - step(0.5, Cs)) * colorBurn(Cb, 2.0 * Cs) + step(0.5, Cs) * colorDodge(Cb, (2.0 * (Cs - 0.5)));\n}\nfloat minv3(in vec3 c) {\n  return min(min(c.r, c.g), c.b);\n}\nfloat maxv3(in vec3 c) {\n  return max(max(c.r, c.g), c.b);\n}\nfloat lumv3(in vec3 c) {\n  return dot(c, vec3(0.3, 0.59, 0.11));\n}\nfloat satv3(vec3 c) {\n  return maxv3(c) - minv3(c);\n}\nvec3 clipColor(vec3 color) {\n  float lum = lumv3(color);\n  float mincol = minv3(color);\n  float maxcol = maxv3(color);\n  if (mincol < 0.0) {\n    color = lum + ((color - lum) * lum) / (lum - mincol);\n  }\n  if (maxcol > 1.0) {\n    color = lum + ((color - lum) * (1.0 - lum)) / (maxcol - lum);\n  }\n  return color;\n}\nvec3 setLum(vec3 cbase, vec3 clum) {\n  float lbase = lumv3(cbase);\n  float llum = lumv3(clum);\n  float ldiff = llum - lbase;\n  vec3 color = cbase + vec3(ldiff);\n  return clipColor(color);\n}\nvec3 setLumSat(vec3 cbase, vec3 csat, vec3 clum)\n{\n  float minbase = minv3(cbase);\n  float sbase = satv3(cbase);\n  float ssat = satv3(csat);\n  vec3 color;\n  if (sbase > 0.0) {\n    color = (cbase - minbase) * ssat / sbase;\n  } else {\n    color = vec3(0.0);\n  }\n  return setLum(color, clum);\n}\nvoid main() {\n  vec4 src = texture2D(u_layerTexture, v_uv);\n#ifdef NORMAL\n  gl_FragColor = src *  u_opacity;\n#else\n  vec4 dst = texture2D(u_backbufferTexture, v_uv);\n  vec3 Cs = src.a == 0.0 ? src.rgb : vec3(src.rgb / src.a);\n  vec3 Cb = dst.a == 0.0 ? dst.rgb : vec3(dst.rgb / dst.a);\n  float as = u_opacity * src.a;\n  float ab = dst.a;\n  #ifdef DESTINATION_OVER\n    gl_FragColor = vec4(as * Cs * (1.0 - ab) + ab * Cb, as + ab - as * ab);\n  #endif\n  #ifdef SOURCE_IN\n    vec4 color = vec4(as * Cs * ab, as * ab);\n    vec4 fadeColor = (1.0 - u_opacity) * u_inFadeOpacity * vec4(ab * Cb, ab);\n    gl_FragColor = color + fadeColor;\n  #endif\n  #ifdef DESTINATION_IN\n    vec4 color = vec4(ab * Cb * as, ab * as);\n    vec4 fadeColor = (1.0 - u_opacity) * u_inFadeOpacity * vec4(ab * Cb, ab);\n    gl_FragColor = color + fadeColor;\n  #endif\n  #ifdef SOURCE_OUT\n    gl_FragColor = vec4(as * Cs * (1.0 - ab), as * (1.0 - ab));\n  #endif\n  #ifdef DESTINATION_OUT\n    gl_FragColor = vec4(ab * Cb * (1.0 - as), ab * (1.0 - as));\n  #endif\n  #ifdef SOURCE_ATOP\n    gl_FragColor = vec4(as * Cs * ab + ab * Cb * (1.0 - as), ab);\n  #endif\n  #ifdef DESTINATION_ATOP\n    gl_FragColor = vec4(as * Cs * (1.0 - ab) + ab * Cb * as, as);\n  #endif\n  #ifdef XOR\n    gl_FragColor = vec4(as * Cs * (1.0 - ab) + ab * Cb * (1.0 - as),\n                        as * (1.0 - ab) + ab * (1.0 - as));\n  #endif\n  #ifdef MULTIPLY\n    gl_FragColor = vec4(as * Cs * ab * Cb + (1.0 - ab) * as * Cs + (1.0 - as) * ab * Cb,\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef SCREEN\n    gl_FragColor = vec4((Cs + Cb - Cs * Cb) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef OVERLAY\n    vec3 f = vec3(overlay(Cb.r, Cs.r), overlay(Cb.g, Cs.g), overlay(Cb.b, Cs.b));\n    gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef DARKEN\n    gl_FragColor = vec4(min(Cs, Cb) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef LIGHTER\n    gl_FragColor = vec4(as * Cs + ab * Cb, as + ab);\n  #endif\n  #ifdef LIGHTEN\n    gl_FragColor = vec4(max(Cs, Cb) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef COLOR_DODGE\n    vec3 f = vec3(colorDodge(Cb.r, Cs.r), colorDodge(Cb.g, Cs.g), colorDodge(Cb.b, Cs.b));\n    gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef COLOR_BURN\n    vec3 f = vec3(colorBurn(Cb.r, Cs.r), colorBurn(Cb.g, Cs.g), colorBurn(Cb.b, Cs.b));\n    gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef HARD_LIGHT\n    vec3 f = vec3(hardLight(Cb.r, Cs.r), hardLight(Cb.g, Cs.g), hardLight(Cb.b, Cs.b));\n    gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef SOFT_LIGHT\n    vec3 f = vec3(softLight(Cb.r, Cs.r), softLight(Cb.g, Cs.g), softLight(Cb.b, Cs.b));\n    gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef DIFFERENCE\n    gl_FragColor = vec4(abs(Cb - Cs) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef EXCLUSION\n     vec3 f = Cs + Cb - 2.0 * Cs * Cb;\n     gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef INVERT\n    gl_FragColor = vec4((1.0 - Cb) * as * ab + Cb * ab * (1.0 - as), ab);\n  #endif\n  #ifdef VIVID_LIGHT\n    vec3 f = vec3(vividLight(Cb.r, Cs.r),\n                  vividLight(Cb.g, Cs.g),\n                  vividLight(Cb.b, Cs.b));\n    gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef HUE\n    vec3 f = setLumSat(Cs,Cb,Cb);\n    gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef SATURATION\n    vec3 f = setLumSat(Cb,Cs,Cb);\n    gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef COLOR\n    vec3 f = setLum(Cs,Cb);\n    gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef LUMINOSITY\n    vec3 f = setLum(Cb,Cs);\n    gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef PLUS\n    gl_FragColor = clamp(vec4(src.r + Cb.r, src.g + Cb.g, src.b + Cb.b, as + ab), 0.0, 1.0);\n  #endif\n  #ifdef MINUS\n     gl_FragColor = vec4(clamp(vec3(Cb.r - src.r, Cb.g - src.g, Cb.b - src.b), 0.0, 1.0), ab * as);\n  #endif\n  #ifdef AVERAGE\n     vec3 f = (Cb + Cs) / 2.0;\n     gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef REFLECT\n    vec3 f = vec3(reflectBlend(Cb.r, Cs.r),\n                  reflectBlend(Cb.g, Cs.g),\n                  reflectBlend(Cb.b, Cs.b));\n    gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n#endif\n}","blend.vert":"attribute vec2 a_position;\nvarying mediump vec2 v_uv;\nvoid main(void) {\n  gl_Position = vec4(a_position , 0.0, 1.0);\n  v_uv = (a_position + 1.0) / 2.0;\n}"},filtering:{"bicubic.glsl":"vec4 computeWeights(float v) {\n  float b = 1.0 / 6.0;\n  float v2 = v * v;\n  float v3 = v2 * v;\n  float w0 = b * (-v3 + 3.0 * v2 - 3.0 * v + 1.0);\n  float w1 = b * (3.0 * v3  - 6.0 * v2 + 4.0);\n  float w2 = b * (-3.0 * v3 + 3.0 * v2 + 3.0 * v + 1.0);\n  float w3 = b * v3;\n  return vec4(w0, w1, w2, w3);\n}\nvec4 bicubicOffsetsAndWeights(float v) {\n  vec4 w = computeWeights(v);\n  float g0 = w.x + w.y;\n  float g1 = w.z + w.w;\n  float h0 = 1.0 - (w.y / g0) + v;\n  float h1 = 1.0 + (w.w / g1) - v;\n  return vec4(h0, h1, g0, g1);\n}\nvec4 sampleBicubicBSpline(sampler2D sampler, vec2 coords, vec2 texSize) {\n  vec2 eX = vec2(1.0 / texSize.x, 0.0);\n  vec2 eY = vec2(0.0, 1.0 / texSize.y);\n  vec2 texel = coords * texSize - 0.5;\n  vec3 hgX = bicubicOffsetsAndWeights(fract(texel).x).xyz;\n  vec3 hgY = bicubicOffsetsAndWeights(fract(texel).y).xyz;\n  vec2 coords10 = coords + hgX.x * eX;\n  vec2 coords00 = coords - hgX.y * eX;\n  vec2 coords11 = coords10 + hgY.x * eY;\n  vec2 coords01 = coords00 + hgY.x * eY;\n  coords10 = coords10 - hgY.y * eY;\n  coords00 = coords00 - hgY.y * eY;\n  vec4 color00 = texture2D(sampler, coords00);\n  vec4 color10 = texture2D(sampler, coords10);\n  vec4 color01 = texture2D(sampler, coords01);\n  vec4 color11 = texture2D(sampler, coords11);\n  color00 = mix(color00, color01, hgY.z);\n  color10 = mix(color10, color11, hgY.z);\n  color00 = mix(color00, color10, hgX.z);\n  return color00;\n}","bilinear.glsl":"vec4 sampleBilinear(sampler2D sampler, vec2 coords, vec2 texSize) {\n  vec2 texelStart = floor(coords * texSize);\n  vec2 coord0 = texelStart / texSize;\n  vec2 coord1 = (texelStart +  vec2(1.0, 0.0)) / texSize;\n  vec2 coord2 = (texelStart +  vec2(0.0, 1.0)) / texSize;\n  vec2 coord3 = (texelStart +  vec2(1.0, 1.0)) / texSize;\n  vec4 color0 = texture2D(sampler, coord0);\n  vec4 color1 = texture2D(sampler, coord1);\n  vec4 color2 = texture2D(sampler, coord2);\n  vec4 color3 = texture2D(sampler, coord3);\n  vec2 blend = fract(coords * texSize);\n  vec4 color01 = mix(color0, color1, blend.x);\n  vec4 color23 = mix(color2, color3, blend.x);\n  return mix(color01, color23, blend.y);\n}","epx.glsl":"vec4 sampleEPX(sampler2D sampler, float size, vec2 coords, vec2 texSize) {\n  vec2 invSize = 1.0 / texSize;\n  vec2 texel = coords * texSize;\n  vec2 texel_i = floor(texel);\n  vec2 texel_frac = fract(texel);\n  vec4 colorP = texture2D(sampler, texel_i * invSize);\n  vec4 colorP1 = vec4(colorP);\n  vec4 colorP2 = vec4(colorP);\n  vec4 colorP3 = vec4(colorP);\n  vec4 colorP4 = vec4(colorP);\n  vec4 colorA = texture2D(sampler, (texel_i - vec2(0.0, 1.0)) * invSize);\n  vec4 colorB = texture2D(sampler, (texel_i + vec2(1.0, 0.0)) * invSize);\n  vec4 colorC = texture2D(sampler, (texel_i - vec2(1.0, 0.0)) * invSize);\n  vec4 colorD = texture2D(sampler, (texel_i + vec2(0.0, 1.0)) * invSize);\n  if (colorC == colorA && colorC != colorD && colorA != colorB) {\n    colorP1 = colorA;\n  }\n  if (colorA == colorB && colorA != colorC && colorB != colorD) {\n    colorP2 = colorB;\n  }\n  if (colorD == colorC && colorD != colorB && colorC != colorA) {\n    colorP3 = colorC;\n  }\n  if (colorB == colorD && colorB != colorA && colorD != colorC) {\n    colorP4 = colorD;\n  }\n  vec4 colorP12 = mix(colorP1, colorP2, texel_frac.x);\n  vec4 colorP34 = mix(colorP1, colorP2, texel_frac.x);\n  return mix(colorP12, colorP34, texel_frac.y);\n}"},fx:{integrate:{"integrate.frag":"precision mediump float;\nuniform lowp sampler2D u_sourceTexture;\nuniform lowp sampler2D u_maskTexture;\nuniform mediump float u_zoomLevel;\nuniform highp float u_timeDelta;\nuniform highp float u_animationTime;\nvarying highp vec2 v_texcoord;\n#include <materials/utils.glsl>\nvoid main()\n{\n#ifdef DELTA\n  vec4 texel = texture2D(u_sourceTexture, v_texcoord);\n  vec4 data0 = texture2D(u_maskTexture, v_texcoord);\n  float flags = data0.r * 255.0;\n  float groupMinZoom = data0.g * 255.0;\n  float isVisible = getFilterBit(flags, 0);\n  float wouldClip = step(groupMinZoom, u_zoomLevel);\n  float direction = wouldClip * 1.0 + (1.0 - wouldClip) * -1.0;\n  float dt = u_timeDelta / max(u_animationTime, 0.0001);\n  vec4 nextState = vec4(texel + direction * dt);\n  gl_FragColor =  vec4(nextState);\n#elif defined(UPDATE)\n  vec4 texel = texture2D(u_sourceTexture, v_texcoord);\n  gl_FragColor = texel;\n#endif\n}","integrate.vert":"precision mediump float;\nattribute vec2 a_pos;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\n  v_texcoord = a_pos;\n  gl_Position = vec4(a_pos * 2.0 - 1.0, 0.0, 1.0);\n}"}},highlight:{"blur.frag":"varying mediump vec2 v_texcoord;\nuniform mediump vec4 u_direction;\nuniform mediump mat4 u_channelSelector;\nuniform mediump vec4 u_sigmas;\nuniform sampler2D u_texture;\nmediump vec4 gauss4(mediump vec2 dir) {\n  return exp(-dot(dir, dir) / (2.0 * u_sigmas * u_sigmas));\n}\nmediump float gauss1(mediump vec2 dir) {\n  return exp(-dot(dir, dir) / (2.0 * u_sigmas[3] * u_sigmas[3]));\n}\nmediump vec4 selectChannel(mediump vec4 sample) {\n  return u_channelSelector * sample;\n}\nvoid accumGauss4(mediump float i, inout mediump vec4 tot, inout mediump vec4 weight) {\n  mediump vec4 w = gauss4(i * u_direction.xy);\n  tot += selectChannel(texture2D(u_texture, v_texcoord + i * u_direction.zw)) * w;\n  weight += w;\n}\nvoid accumGauss1(mediump float i, inout mediump float tot, inout mediump float weight) {\n  mediump float w = gauss1(i * u_direction.xy);\n  tot += selectChannel(texture2D(u_texture, v_texcoord + i * u_direction.zw))[3] * w;\n  weight += w;\n}\nvoid main(void) {\n  mediump float tot = 0.0;\n  mediump float weight = 0.0;\n  accumGauss1(-4.0, tot, weight);\n  accumGauss1(-3.0, tot, weight);\n  accumGauss1(-2.0, tot, weight);\n  accumGauss1(-1.0, tot, weight);\n  accumGauss1(0.0, tot, weight);\n  accumGauss1(1.0, tot, weight);\n  accumGauss1(2.0, tot, weight);\n  accumGauss1(3.0, tot, weight);\n  accumGauss1(4.0, tot, weight);\n  gl_FragColor = vec4(0.0, 0.0, 0.0, tot / weight);\n}","highlight.frag":"varying mediump vec2 v_texcoord;\nuniform sampler2D u_texture;\nuniform mediump vec4 u_sigmas;\nuniform sampler2D u_shade;\nuniform mediump vec2 u_minMaxDistance;\nmediump float estimateDistance() {\n  mediump float sigma = u_sigmas[3];\n  mediump float y = texture2D(u_texture, v_texcoord)[3];\n  const mediump float y0 = 0.5;\n  mediump float m0 = 1.0 / (sqrt(2.0 * 3.1415) * sigma);\n  mediump float d = (y - y0) / m0;\n  return d;\n}\nmediump vec4 shade(mediump float d) {\n  mediump float mappedDistance = (d - u_minMaxDistance.x) / (u_minMaxDistance.y - u_minMaxDistance.x);\n  mappedDistance = clamp(mappedDistance, 0.0, 1.0);\n  return texture2D(u_shade, vec2(mappedDistance, 0.5));\n}\nvoid main(void) {\n  mediump float d = estimateDistance();\n  gl_FragColor = shade(d);\n}","textured.vert":"attribute mediump vec2 a_position;\nattribute mediump vec2 a_texcoord;\nvarying mediump vec2 v_texcoord;\nvoid main(void) {\n  gl_Position = vec4(a_position, 0.0, 1.0);\n  v_texcoord = a_texcoord;\n}"},magnifier:{"magnifier.frag":"uniform lowp vec4 u_background;\nuniform mediump sampler2D u_readbackTexture;\nuniform mediump sampler2D u_maskTexture;\nuniform mediump sampler2D u_overlayTexture;\nuniform bool u_maskEnabled;\nuniform bool u_overlayEnabled;\nvarying mediump vec2 v_texCoord;\nconst lowp float barrelFactor = 1.1;\nlowp vec2 barrel(lowp vec2 uv) {\n  lowp vec2 uvn = uv * 2.0 - 1.0;\n  if (uvn.x == 0.0 && uvn.y == 0.0) {\n    return vec2(0.5, 0.5);\n  }\n  lowp float theta = atan(uvn.y, uvn.x);\n  lowp float r = pow(length(uvn), barrelFactor);\n  return r * vec2(cos(theta), sin(theta)) * 0.5 + 0.5;\n}\nvoid main(void)\n{\n  lowp vec4 color = texture2D(u_readbackTexture, barrel(v_texCoord));\n  color = (color + (1.0 - color.a) * u_background);\n  lowp float mask = u_maskEnabled ? texture2D(u_maskTexture, v_texCoord).a : 1.0;\n  color *= mask;\n  lowp vec4 overlayColor = u_overlayEnabled ? texture2D(u_overlayTexture, v_texCoord) : vec4(0);\n  overlayColor.rgb *= overlayColor.a;\n  gl_FragColor = overlayColor + (1.0 - overlayColor.a) * color;\n}","magnifier.vert":"precision mediump float;\nattribute mediump vec2 a_pos;\nuniform mediump vec4 u_drawPos;\nvarying mediump vec2 v_texCoord;\nvoid main(void)\n{\n  v_texCoord = a_pos;\n  gl_Position = vec4(u_drawPos.xy + vec2(a_pos - 0.5) * u_drawPos.zw, 0.0, 1.0);\n}"},materials:{"attributeData.glsl":"uniform highp sampler2D u_attributeData0;\nuniform highp sampler2D u_attributeData1;\nuniform highp sampler2D u_attributeData2;\nuniform highp sampler2D u_attributeData3;\nuniform highp int u_attributeTextureSize;\nhighp vec2 getAttributeDataCoords(in highp vec4 id) {\n  highp vec4 texel = unpackDisplayIdTexel(id);\n  highp float size = float(u_attributeTextureSize);\n  highp float u32 = float(int(texel.r) + int(texel.g) * 256 + int(texel.b) * 256 * 256 + int(texel.a) * 256 * 256 * 256);\n  highp float col = mod(u32, size);\n  highp float row = (u32 - col) / size;\n  highp float u = col / size;\n  highp float v = row / size;\n  return vec2(u, v);\n}\nhighp vec4 getAttributeData0(in highp vec4 id) {\n  vec2 coords = getAttributeDataCoords(id);\n  return texture2D(u_attributeData0, coords);\n}\nhighp vec4 getAttributeData1(in highp vec4 id) {\n  highp vec2 coords = getAttributeDataCoords(id);\n  return texture2D(u_attributeData1, coords);\n}\nhighp vec4 getAttributeData2(in highp vec4 id) {\n  highp vec2 coords = getAttributeDataCoords(id);\n  return texture2D(u_attributeData2, coords);\n}\nhighp vec4 getAttributeData3(in highp vec4 id) {\n  highp vec2 coords = getAttributeDataCoords(id);\n  return texture2D(u_attributeData3, coords);\n}\nfloat u88VVToFloat(in vec2 v) {\n  bool isMagic = v.x == 255.0 && v.y == 255.0;\n  if (isMagic) {\n    return NAN_MAGIC_NUMBER;\n  }\n  return (v.x + v.y * float(0x100)) - 32768.0;\n}","constants.glsl":"const float C_DEG_TO_RAD = 3.14159265359 / 180.0;\nconst float C_256_TO_RAD = 3.14159265359 / 128.0;\nconst float SIGNED_BYTE_TO_UNSIGNED = 128.0;\nconst float POSITION_PRECISION = 1.0 / 8.0;\nconst float FILL_POSITION_PRECISION = 1.0 / 1.0;\nconst float SOFT_EDGE_RATIO = 1.0;\nconst float THIN_LINE_WIDTH_FACTOR = 1.1;\nconst float THIN_LINE_HALF_WIDTH = 1.0;\nconst float EXTRUDE_SCALE_PLACEMENT_PADDING = 1.0 / 4.0;\nconst float OFFSET_PRECISION = 1.0 / 8.0;\nconst float OUTLINE_SCALE = 1.0 / 5.0;\nconst float SDF_FONT_SIZE = 24.0;\nconst float MAX_SDF_DISTANCE = 8.0;\nconst float PLACEMENT_PADDING = 8.0;\nconst float EPSILON = 0.0000001;\nconst int MAX_FILTER_COUNT = 2;\nconst int ATTR_VV_SIZE = 0;\nconst int ATTR_VV_COLOR = 1;\nconst int ATTR_VV_OPACITY = 2;\nconst int ATTR_VV_ROTATION = 3;\nconst highp float NAN_MAGIC_NUMBER = 1e-30;","effects.glsl":"uniform highp mat4 u_insideEffectMat4[ MAX_FILTER_COUNT ];\nuniform highp mat4 u_outsideEffectMat4[ MAX_FILTER_COUNT ];\nuniform highp float u_insideOpacities[ MAX_FILTER_COUNT ];\nuniform highp float u_outsideOpacities[ MAX_FILTER_COUNT ];\nvec4 getEffectColor(in vec4 color, in float filterFlags) {\n  vec4 rgbw = vec4(color.a > 0.0 ? color.rgb / color.a : vec3(0.0), 1.0);\n  float a = color.a;\n  for (int i = 1; i < EFFECT_COUNT + 1; i++) {\n    float bit = getFilterBit(filterFlags, i);\n    rgbw = u_insideEffectMat4[ i ] * (bit  * rgbw) + u_outsideEffectMat4[ i ] * ((1.0 - bit) * rgbw);\n    a    = u_insideOpacities[ i ]  * (bit  * a)    + u_outsideOpacities[ i ]  * ((1.0 - bit) * a);\n  }\n  return vec4(rgbw.rgb * a, a);\n}\nvec3 applyFilter(inout vec4 color, inout vec3 pos, in float filterFlags) {\n  vec4 rgbw = vec4(color.a > 0.0 ? color.rgb / color.a : vec3(0.0), 1.0);\n  float a = color.a;\n  for (int i = 0; i < EFFECT_COUNT + 1; i++) {\n    float bit = getFilterBit(filterFlags, i);\n    rgbw = u_insideEffectMat4[ i ] * (bit  * rgbw) + u_outsideEffectMat4[ i ] * ((1.0 - bit) * rgbw);\n    a    = u_insideOpacities[ i ]  * (bit  * a)    + u_outsideOpacities[ i ]  * ((1.0 - bit) * a);\n  }\n  color.rgb = rgbw.rgb * a;\n  color.a = a;\n  pos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 0));\n#ifdef HIGHLIGHT\n  pos.z += 2.0 * (1.0 - getHighlightBit(filterFlags));\n#endif\n  return pos;\n}\nvec3 applyFilterLabels(inout vec4 color, inout vec3 pos, in float filterFlags) {\n  float bit = getFilterBit(filterFlags, 0);\n  pos.z += 2.0 * (1.0 - bit);\n#ifndef OUTSIDE_LABELS_VISIBLE\n  for (int i = 1; i < EFFECT_COUNT + 1; i++) {\n    float bit = getFilterBit(filterFlags, i);\n    pos.z += 2.0 * (1.0 - bit);\n  }\n#endif\n  return pos;\n}",fill:{"common.glsl":"#ifdef PATTERN\nuniform mediump vec2 u_mosaicSize;\n#endif\n#ifdef DOT_DENSITY\nuniform lowp vec4 u_isActive[ 2 ];\nuniform highp float u_dotValue;\nuniform highp float u_tileDotsOverArea;\nuniform highp float u_dotTextureDotCount;\nuniform mediump float u_tileZoomFactor;\n#endif\nvarying vec3 v_pos;\nvarying lowp float v_opacity;\nvarying lowp vec4 v_color;\nvarying highp vec4 v_id;\nvarying highp float v_flags;\n#ifdef PATTERN\nvarying mediump vec4 v_tlbr;\nvarying mediump vec2 v_tileTextureCoord;\n#endif\n#ifdef DOT_DENSITY\nvarying highp vec2 v_dotTextureCoords;\nvarying highp vec4 v_dotThresholds[ 2 ];\n#endif","fill.frag":"precision highp float;\n#include <materials/constants.glsl>\n#include <materials/utils.glsl>\n#include <materials/fill/common.glsl>\n#ifdef DOT_DENSITY\n#include <materials/effects.glsl>\n#endif\n#ifdef PATTERN\nuniform lowp sampler2D u_texture;\n#endif\n#ifdef DOT_DENSITY\nuniform mediump mat4 u_dotColors[ 2 ];\nuniform sampler2D u_dotTextures[ 2 ];\nuniform vec4 u_dotBackgroundColor;\n#endif\nvoid main() {\n#ifdef ID\n  gl_FragColor = v_id;\n#elif defined(PATTERN)\n  mediump vec2 normalizedTextureCoord = mod(v_tileTextureCoord, 1.0);\n  mediump vec2 samplePos = mix(v_tlbr.xy, v_tlbr.zw, normalizedTextureCoord);\n  lowp vec4 color = texture2D(u_texture, samplePos);\n  gl_FragColor = v_opacity * v_color * color;\n#elif defined(DOT_DENSITY) && !defined(HIGHLIGHT)\n  vec4 textureThresholds0 = texture2D(u_dotTextures[0], v_dotTextureCoords);\n  vec4 textureThresholds1 = texture2D(u_dotTextures[1], v_dotTextureCoords);\n  vec4 difference0 = v_dotThresholds[0] - textureThresholds0;\n  vec4 difference1 = v_dotThresholds[1] - textureThresholds1;\n#ifdef DD_DOT_BLENDING\n  vec4 isPositive0 = step(0.0, difference0);\n  vec4 isPositive1 = step(0.0, difference1);\n  float weightSum = dot(isPositive0, difference0) + dot(isPositive1, difference1);\n  float lessThanEqZero = step(weightSum, 0.0);\n  float greaterThanZero = 1.0 - lessThanEqZero ;\n  float divisor = (weightSum + lessThanEqZero);\n  vec4 weights0 = difference0 * isPositive0 / divisor;\n  vec4 weights1 = difference1 * isPositive1 / divisor;\n  vec4 dotColor = u_dotColors[0] * weights0 + u_dotColors[1] * weights1;\n  vec4 preEffectColor = greaterThanZero * dotColor + lessThanEqZero * u_dotBackgroundColor;\n#else\n  float diffMax = max(max4(difference0), max4(difference1));\n  float lessThanZero = step(diffMax, 0.0);\n  float greaterOrEqZero = 1.0 - lessThanZero;\n  vec4 isMax0 = step(diffMax, difference0);\n  vec4 isMax1 = step(diffMax, difference1);\n  vec4 dotColor = u_dotColors[0] * isMax0 + u_dotColors[1] * isMax1;\n  vec4 preEffectColor = greaterOrEqZero * dotColor + lessThanZero * u_dotBackgroundColor;\n#endif\n  gl_FragColor = getEffectColor(preEffectColor, v_flags);\n#else\n  gl_FragColor = v_opacity * v_color;\n#endif\n#ifdef HIGHLIGHT\n  gl_FragColor.a = 1.0;\n#endif\n}","fill.vert":"precision highp float;\n#ifdef DOT_DENSITY\nattribute float a_inverseArea;\nvec4 a_color = vec4(0.0, 0.0, 0.0, 1.0);\nvec4 a_aux3 = vec4(0.0);\n#else\nattribute vec4 a_color;\nattribute vec4 a_tlbr;\nattribute vec4 a_aux1;\nattribute vec2 a_aux2;\nattribute vec4 a_aux3;\n#endif\n#include <materials/vcommon.glsl>\n#include <materials/fill/common.glsl>\n#ifdef DOT_DENSITY\nvec4 dotThreshold(vec4 featureAttrOverFeatureArea, float dotValue, float tileDotsOverArea) {\n  return featureAttrOverFeatureArea * (1.0 / dotValue)  * (1.0 / tileDotsOverArea);\n}\n#endif\nvoid main()\n{\n  INIT;\n  float a_bitSet = a_aux3.a;\n  v_color     = getColor(a_color, a_bitSet, 0);\n  v_opacity   = getOpacity();\n  v_id        = norm(a_id);\n  v_pos       = u_dvsMat3 * vec3(a_pos * FILL_POSITION_PRECISION, 1.);\n  v_flags     = getFilterFlags();\n#ifdef PATTERN\n  vec2 aux2 = (1.0 / SIGNED_BYTE_TO_UNSIGNED) * a_aux2;\n  float width = u_zoomFactor * a_aux1.x * aux2.x;\n  float height = u_zoomFactor * a_aux1.y * aux2.y;\n  float angle = C_256_TO_RAD * a_aux3.z;\n  float sinA = sin(angle);\n  float cosA = cos(angle);\n  mat3 patternMatrix = mat3(cosA / width, sinA / height, 0,\n                           -sinA / width, cosA / height, 0,\n                            0,            0,             1);\n  vec2 symbolOffset = (a_aux1.zw - SIGNED_BYTE_TO_UNSIGNED) / vec2(width, height);\n  v_tileTextureCoord = (patternMatrix * vec3(a_pos * FILL_POSITION_PRECISION, 1.0)).xy - symbolOffset;\n  v_tlbr = a_tlbr / u_mosaicSize.xyxy;\n#elif defined(DOT_DENSITY)\n  vec4 ddAttributeData0 = getAttributeData2(a_id) * u_isActive[0] * a_inverseArea;\n  vec4 ddAttributeData1 = getAttributeData3(a_id) * u_isActive[1] * a_inverseArea;\n  float size = u_tileZoomFactor * 512.0 * 1.0 / u_pixelRatio;\n  v_dotThresholds[0] = dotThreshold(ddAttributeData0, u_dotValue, u_tileDotsOverArea);\n  v_dotThresholds[1] = dotThreshold(ddAttributeData1, u_dotValue, u_tileDotsOverArea);\n  v_dotTextureCoords = (a_pos * FILL_POSITION_PRECISION + 0.5) / size;\n#endif\n  gl_Position = vec4(applyFilter(v_color, v_pos, v_flags), 1.0);\n}"},icon:{"common.glsl":"uniform lowp vec2 u_mosaicSize;\nvarying lowp vec4 v_color;\nvarying highp vec4 v_id;\nvarying highp vec4 v_sizeTex;\nvarying mediump vec3 v_pos;\nvarying highp float v_filters;\nvarying lowp float v_opacity;\n#ifdef SDF\nvarying lowp vec4 v_outlineColor;\nvarying mediump float v_outlineWidth;\nvarying mediump float v_distRatio;\nvarying mediump float v_overridingOutlineColor;\nvarying mediump float v_isThin;\n#endif","icon.frag":"precision mediump float;\n#include <materials/constants.glsl>\n#include <materials/utils.glsl>\n#include <util/encoding.glsl>\n#include <materials/effects.glsl>\n#include <materials/constants.glsl>\n#include <materials/icon/common.glsl>\nuniform lowp sampler2D u_texture;\nvoid main()\n{\n  vec2 v_size = v_sizeTex.xy;\n  vec2 v_tex  = v_sizeTex.zw;\n#ifdef SDF\n  lowp vec4 fillPixelColor = v_color;\n  float d = 0.5 - rgba2float(texture2D(u_texture, v_tex));\n  float size = max(v_size.x, v_size.y);\n  float dist = d * size * SOFT_EDGE_RATIO * v_distRatio;\n  fillPixelColor *= clamp(0.5 - dist, 0.0, 1.0);\n  float outlineWidth = v_outlineWidth;\n  #ifdef HIGHLIGHT\n    outlineWidth = max(outlineWidth, 4.0 * v_isThin);\n  #endif\n  if (outlineWidth > 0.25) {\n    lowp vec4 outlinePixelColor = v_overridingOutlineColor * v_color + (1.0 - v_overridingOutlineColor) * v_outlineColor;\n    float clampedOutlineSize = min(outlineWidth, size);\n    outlinePixelColor *= clamp(0.5 - abs(dist) + clampedOutlineSize * 0.5, 0.0, 1.0);\n    gl_FragColor = v_opacity * ((1.0 - outlinePixelColor.a) * fillPixelColor + outlinePixelColor);\n  }\n  else {\n    gl_FragColor = v_opacity * fillPixelColor;\n  }\n#else\n   lowp vec4 texColor = texture2D(u_texture, v_tex);\n   gl_FragColor = v_opacity * getEffectColor(texColor, v_filters);\n#endif\n#ifdef HIGHLIGHT\n  gl_FragColor.a = step(1.0 / 255.0, gl_FragColor.a);\n#endif\n#ifdef ID\n  if (gl_FragColor.a < 1.0 / 255.0) {\n    discard;\n  }\n  gl_FragColor = v_id;\n#endif\n}","icon.vert":"precision highp float;\nattribute vec4 a_color;\nattribute vec4 a_outlineColor;\nattribute vec4 a_sizeAndOutlineWidth;\nattribute vec2 a_vertexOffset;\nattribute vec2 a_texCoords;\nattribute vec4 a_bitSetAndDistRatio;\n#include <materials/vcommon.glsl>\n#include <materials/icon/common.glsl>\nvec2 getMarkerSize(inout vec2 offset, inout vec2 baseSize, inout float outlineSize, in float referenceSize, in float bitSet) {\n#ifdef VV_SIZE\n  float r = getSize(baseSize.y) / referenceSize;\n  baseSize.xy *= r;\n  offset.xy *= r;\n  float scaleSymbolProportionally = getBit(bitSet, 3);\n  outlineSize *= scaleSymbolProportionally * (r - 1.0) + 1.0;\n#endif\n  return baseSize;\n}\nvec3 getOffset(in vec2 in_offset, float a_bitSet) {\n  float isMapAligned = getBit(a_bitSet, 0);\n  vec3  offset       = getRotation() * vec3(in_offset, 0.0);\n  return getMatrix(isMapAligned) * offset;\n}\nvoid main()\n{\n  INIT;\n  vec2  a_size   = a_sizeAndOutlineWidth.xy * a_sizeAndOutlineWidth.xy / 128.0;\n  vec2  a_offset = a_vertexOffset / 16.0;\n  float a_outlineSize = a_sizeAndOutlineWidth.z * a_sizeAndOutlineWidth.z / 128.0;\n  float a_bitSet = a_bitSetAndDistRatio.z;\n  vec2 v_size = getMarkerSize(a_offset, a_size, a_outlineSize, a_sizeAndOutlineWidth.w * a_sizeAndOutlineWidth.w / 128.0, a_bitSet);\n  vec2 v_tex      = a_texCoords / u_mosaicSize;\n  v_color    = getColor(a_color, a_bitSet, 1);\n  v_opacity  = getOpacity();\n  v_id       = norm(a_id);\n  v_filters  = getFilterFlags();\n  v_pos      = u_dvsMat3 * vec3(a_pos * POSITION_PRECISION, 1.0) + getOffset(a_offset, a_bitSet);\n  v_sizeTex  = vec4(v_size.xy, v_tex.xy);\n#ifdef SDF\n  v_isThin   = getBit(a_bitSet, 2);\n  #ifdef VV_COLOR\n    v_overridingOutlineColor = v_isThin;\n  #else\n    v_overridingOutlineColor = 0.0;\n  #endif\n  v_outlineWidth = min(a_outlineSize, max(max(v_size.x, v_size.y) - 0.99, 0.0));\n  v_outlineColor = getEffectColor(a_outlineColor, v_filters);\n  v_distRatio = a_bitSetAndDistRatio.w / 126.0;\n#endif\n  gl_Position = vec4(applyFilter(v_color, v_pos, v_filters), 1.0);\n}"},label:{"common.glsl":"uniform mediump float u_zoomLevel;\nuniform mediump float u_mapRotation;\nuniform mediump float u_mapAligned;\nuniform mediump vec2 u_mosaicSize;\nvarying mediump float v_antialiasingWidth;\nvarying mediump float v_edgeDistanceOffset;\nvarying mediump vec2 v_tex;\nvarying mediump vec4 v_color;\nvarying lowp vec4 v_animation;","label.frag":"#include <materials/text/text.frag>","label.vert":"precision highp float;\n#include <materials/vcommon.glsl>\n#include <materials/text/common.glsl>\nattribute vec4 a_color;\nattribute vec4 a_haloColor;\nattribute vec4 a_texAndSize;\nattribute vec4 a_refSymbolAndPlacementOffset;\nattribute vec4 a_glyphData;\nattribute vec2 a_vertexOffset;\nattribute vec2 a_texCoords;\nuniform float u_isHalo;\nuniform float u_zoomLevel;\nuniform float u_mapRotation;\nuniform float u_mapAligned;\nfloat getZ(in float minZoom, in float maxZoom, in float angle) {\n  float glyphAngle = angle * 360.0 / 254.0;\n  float mapAngle = u_mapRotation * 360.0 / 254.0;\n  float diffAngle = min(360.0 - abs(mapAngle - glyphAngle), abs(mapAngle - glyphAngle));\n  float z = 0.0;\n  z += u_mapAligned * (2.0 * (1.0 - step(minZoom, u_zoomLevel)));\n  z += u_mapAligned * 2.0 * step(90.0, diffAngle);\n  z += 2.0 * (1.0 - step(u_zoomLevel, maxZoom));\n  return z;\n}\nvoid main()\n{\n  INIT;\n  float groupMinZoom    = getMinZoom();\n  float glyphMinZoom    = a_glyphData.x;\n  float glyphMaxZoom    = a_glyphData.y;\n  float glyphAngle      = a_glyphData.z;\n  float a_minZoom          = max(groupMinZoom, glyphMinZoom);\n  float a_placementPadding = a_refSymbolAndPlacementOffset.x * EXTRUDE_SCALE_PLACEMENT_PADDING;\n  vec2  a_placementDir     = unpack_u8_nf32(a_refSymbolAndPlacementOffset.zw);\n  float a_refSymbolSize    = a_refSymbolAndPlacementOffset.y;\n  float fontSize           = a_texAndSize.z;\n  float haloSize           = a_texAndSize.w * OUTLINE_SCALE;\n  vec2  vertexOffset = a_vertexOffset * OFFSET_PRECISION;\n  vec3  pos          = vec3(a_pos * POSITION_PRECISION, 1.0);\n  float z            = getZ(a_minZoom, glyphMaxZoom, glyphAngle);\n  float fontScale    = fontSize / SDF_FONT_SIZE;\n  float halfSize     = getSize(a_refSymbolSize) / 2.0;\n  float animation    = pow(getAnimationState(), vec4(2.0)).r;\n  v_color     = animation * ((1.0 - u_isHalo) * a_color + (u_isHalo * a_haloColor));\n  v_opacity   = 1.0;\n  v_tex       = a_texCoords / u_mosaicSize;\n  v_edgeDistanceOffset = u_isHalo * haloSize / fontScale / MAX_SDF_DISTANCE;\n  v_antialiasingWidth  = 0.105 * SDF_FONT_SIZE / fontSize / u_pixelRatio;\n  vec2 placementOffset = a_placementDir * (halfSize + a_placementPadding);\n  vec3 glyphOffset     = u_displayMat3 * vec3(vertexOffset + placementOffset, 0.0);\n  vec3 v_pos           = vec3((u_dvsMat3 * pos + glyphOffset).xy, z);\n  gl_Position = vec4(applyFilterLabels(v_color, v_pos, getFilterFlags()), 1.0);\n#ifdef DEBUG\n  v_color = vec4(a_color.rgb, z == 0.0 ? 1.0 : 0.645);\n#endif\n}"},line:{"common.glsl":"varying lowp vec4 v_color;\nvarying highp vec4 v_id;\nvarying mediump vec2 v_normal;\nvarying mediump float v_lineHalfWidth;\nvarying lowp float v_opacity;\nvarying highp vec3 v_pos;\n#ifdef PATTERN\nuniform mediump vec2 u_mosaicSize;\nvarying mediump vec4 v_tlbr;\nvarying mediump vec2 v_patternSize;\n#endif\n#if defined(PATTERN) || defined(SDF)\nvarying highp float v_accumulatedDistance;\n#endif","line.frag":"precision lowp float;\n#include <util/encoding.glsl>\n#include <materials/constants.glsl>\n#include <materials/line/common.glsl>\nuniform lowp float u_blur;\nuniform mediump float u_zoomFactor;\n#if defined(PATTERN) || defined(SDF)\nuniform sampler2D u_texture;\n#endif\n#ifdef SDF\nconst float sdfPatternHalfWidth = 15.5;\nconst float widthFactor = 2.0;\n#endif\nvoid main()\n{\n  mediump float thinLineFactor = max(THIN_LINE_WIDTH_FACTOR * step(v_lineHalfWidth, THIN_LINE_HALF_WIDTH), 1.0);\n  mediump float fragDist = length(v_normal) * v_lineHalfWidth;\n  lowp float alpha = clamp(thinLineFactor * (v_lineHalfWidth - fragDist) / (u_blur + thinLineFactor - 1.0), 0.0, 1.0);\n#if defined(SDF) && !defined(HIGHLIGHT)\n  mediump float lineHalfWidth = widthFactor * v_lineHalfWidth;\n  mediump float lineWidthRatio = lineHalfWidth / sdfPatternHalfWidth;\n  mediump float relativeTexX = mod((u_zoomFactor * v_accumulatedDistance + v_normal.x * lineHalfWidth) / (lineWidthRatio * v_patternSize.x), 1.0);\n  mediump float relativeTexY = 0.5 + 0.5 * v_normal.y;\n  mediump vec2 texCoord = mix(v_tlbr.xy, v_tlbr.zw, vec2(relativeTexX, relativeTexY));\n  mediump float d = rgba2float(texture2D(u_texture, texCoord)) - 0.5;\n  float dist = d * lineHalfWidth;\n  lowp vec4 fillPixelColor = v_opacity * alpha * clamp(0.5 - dist, 0.0, 1.0) * v_color;\n  gl_FragColor = fillPixelColor;\n#elif defined(PATTERN) && !defined(HIGHLIGHT)\n  mediump float lineHalfWidth = v_lineHalfWidth;\n  mediump float adjustedPatternWidth = v_patternSize.x * 2.0 * lineHalfWidth / v_patternSize.y;\n  mediump float relativeTexX = mod((u_zoomFactor * v_accumulatedDistance + v_normal.x * lineHalfWidth) / adjustedPatternWidth, 1.0);\n  mediump float relativeTexY = 0.5 + 0.5 * v_normal.y;\n  mediump vec2 texCoord = mix(v_tlbr.xy, v_tlbr.zw, vec2(relativeTexY, relativeTexX));\n  lowp vec4 color = texture2D(u_texture, texCoord);\n  gl_FragColor = v_opacity * alpha * v_color * color;\n#else\n  gl_FragColor = v_opacity * alpha * v_color;\n#endif\n#ifdef HIGHLIGHT\n  gl_FragColor.a = step(1.0 / 255.0, gl_FragColor.a);\n#endif\n#ifdef ID\n  if (gl_FragColor.a < 1.0 / 255.0) {\n    discard;\n  }\n  gl_FragColor = v_id;\n#endif\n}","line.vert":"precision highp float;\nattribute vec4 a_color;\nattribute vec4 a_offsetAndNormal;\nattribute vec2 a_accumulatedDistanceAndHalfWidth;\nattribute vec4 a_tlbr;\nattribute vec4 a_segmentDirection;\nattribute vec2 a_aux;\n#include <materials/vcommon.glsl>\n#include <materials/line/common.glsl>\nconst float SCALE = 1.0 / 31.0;\nconst float WIDTH_SCALE = 1.0 / 1024.0;\nfloat getBaseLineHalfWidth(in float in_lineHalfWidth) {\n#ifdef VV_SIZE\n  float referenceHalfWidth = a_aux.x * WIDTH_SCALE;\n  float lineWidth = 2.0 * in_lineHalfWidth;\n  return 0.5 * (in_lineHalfWidth / referenceHalfWidth) * getSize(lineWidth);\n#else\n  return in_lineHalfWidth;\n#endif\n}\nfloat getLineHalfWidth(in float baseWidth, in float aa) {\n  float halfWidth = max(baseWidth + aa, 0.45) + 0.1 * aa;\n#ifdef HIGHLIGHT\n  halfWidth = max(halfWidth, 2.0);\n#endif\n  return halfWidth;\n}\nvec2 getDist(in vec2 offset, in float halfWidth) {\n  float thinLineFactor = max(THIN_LINE_WIDTH_FACTOR * step(halfWidth, THIN_LINE_HALF_WIDTH), 1.0);\n#if defined(SDF) && !defined(HIGHLIGHT)\n  thinLineFactor *= 2.0;\n#endif\n  return thinLineFactor * halfWidth * offset * SCALE;\n}\nvoid main()\n{\n  INIT;\n  float a_bitSet          = a_segmentDirection.w;\n  float a_accumulatedDist = a_accumulatedDistanceAndHalfWidth.x;\n  float a_lineHalfWidth   = a_accumulatedDistanceAndHalfWidth.y * WIDTH_SCALE;\n  float aa                = 0.5 * u_antialiasing;\n  vec2  a_offset          = a_offsetAndNormal.xy;\n  float baseWidth = getBaseLineHalfWidth(a_lineHalfWidth);\n  float halfWidth = getLineHalfWidth(baseWidth, aa);\n  float z         = 2.0 * step(baseWidth, 0.0);\n  vec2  dist      = getDist(a_offset, halfWidth);\n  vec3  offset    = u_displayViewMat3 * vec3(dist, 0.0);\n  vec3  pos       = u_dvsMat3 * vec3(a_pos * POSITION_PRECISION, 1.0) + offset;\n  v_color         = getColor(a_color, a_bitSet, 0);\n  v_opacity       = getOpacity();\n  v_lineHalfWidth = halfWidth;\n  v_id            = norm(a_id);\n  v_normal        = a_offsetAndNormal.zw * SCALE;\n  v_pos           = vec3(pos.xy, z);\n#ifdef PATTERN\n  v_tlbr          = a_tlbr / u_mosaicSize.xyxy;\n  v_patternSize   = vec2(a_tlbr.z - a_tlbr.x, a_tlbr.w - a_tlbr.y);\n#endif\n#if defined(PATTERN) || defined(SDF)\n  v_accumulatedDistance = a_accumulatedDist + dot(SCALE * a_segmentDirection.xy, dist / u_zoomFactor);\n#endif\n  gl_Position = vec4(applyFilter(v_color, v_pos, getFilterFlags()), 1.0);\n}"},text:{"common.glsl":"uniform highp vec2 u_mosaicSize;\nvarying highp vec4 v_id;\nvarying mediump vec3 v_pos;\nvarying lowp float v_opacity;\nvarying lowp vec4 v_color;\nvarying highp vec2 v_tex;\nvarying mediump float v_antialiasingWidth;\nvarying mediump float v_edgeDistanceOffset;\nvarying lowp float v_transparency;","text.frag":"precision mediump float;\n#include <materials/text/common.glsl>\nuniform lowp sampler2D u_texture;\nvoid main()\n{\n  float SDF_CUTOFF = (2.0 / 8.0);\n  float SDF_BASE_EDGE_DIST = 1.0 - SDF_CUTOFF;\n  lowp float dist = texture2D(u_texture, v_tex).a;\n  mediump float edge = SDF_BASE_EDGE_DIST - v_edgeDistanceOffset;\n#ifdef HIGHLIGHT\n  edge /= 2.0;\n#endif\n  lowp float aa = v_antialiasingWidth;\n  lowp float alpha = smoothstep(edge - aa, edge + aa, dist);\n  gl_FragColor = alpha * v_color * v_opacity;\n#ifdef ID\n  if (gl_FragColor.a < 1.0 / 255.0) {\n    discard;\n  }\n  gl_FragColor = v_id;\n#endif\n}","text.vert":"precision highp float;\n#include <materials/utils.glsl>\n#include <materials/vcommon.glsl>\n#include <materials/text/common.glsl>\nattribute vec4 a_color;\nattribute vec4 a_haloColor;\nattribute vec4 a_texFontSize;\nattribute vec4 a_aux;\nattribute vec2 a_vertexOffset;\nattribute vec2 a_texCoords;\nuniform float u_isHalo;\nfloat getTextSize(inout vec2 offset, in float baseSize, in float referenceSize) {\n#ifdef VV_SIZE\n   float ratio = baseSize / referenceSize;\n   baseSize = ratio * getSize(baseSize);\n#endif\n  return baseSize;\n}\nvoid main()\n{\n  INIT;\n  float a_bitSet      = a_aux.w;\n  float a_fontSize    = a_texFontSize.z;\n  vec2  a_offset      = a_vertexOffset * OFFSET_PRECISION;\n  vec3  in_pos        = vec3(a_pos * POSITION_PRECISION, 1.0);\n  float fontSize      = getTextSize(a_offset, a_fontSize, a_aux.z * a_aux.z / 256.0);\n  float scaleFactor   = fontSize / a_fontSize;\n  float fontScale     = fontSize / SDF_FONT_SIZE;\n  vec3  offset        = getRotation() * vec3(scaleFactor * a_offset, 0.0);\n  mat3  extrudeMatrix = getBit(a_bitSet, 0) == 1.0 ? u_displayViewMat3 : u_displayMat3;\n  v_color   = u_isHalo * a_haloColor + (1.0 - u_isHalo) * getColor(a_color, a_bitSet, 1);\n  v_opacity = getOpacity();\n  v_id      = norm(a_id);\n  v_tex     = a_texCoords / u_mosaicSize;\n  v_pos     = u_dvsMat3 * in_pos + extrudeMatrix * offset;\n  v_edgeDistanceOffset = u_isHalo * OUTLINE_SCALE * a_texFontSize.w / fontScale / MAX_SDF_DISTANCE;\n  v_antialiasingWidth  = 0.105 * SDF_FONT_SIZE / fontSize / u_pixelRatio;\n  gl_Position =  vec4(applyFilter(v_color, v_pos, getFilterFlags()), 1.0);\n}"},"utils.glsl":"float rshift(in float u32, in int amount) {\n  return floor(u32 / pow(2.0, float(amount)));\n}\nfloat getBit(in float bitset, in int bitIndex) {\n  float offset = pow(2.0, float(bitIndex));\n  return mod(floor(bitset / offset), 2.0);\n}\nfloat getFilterBit(in float bitset, in int bitIndex) {\n  return getBit(bitset, bitIndex + 1);\n}\nfloat getHighlightBit(in float bitset) {\n  return getBit(bitset, 0);\n}\nhighp vec4 unpackDisplayIdTexel(in highp vec4 bitset) {\n  float isAggregate = getBit(bitset.a, 7);\n  return (1.0 - isAggregate) * bitset + isAggregate * (vec4(bitset.rgba) - vec4(0.0, 0.0, 0.0, float(0x80)));\n}\nvec4 unpack(in float u32) {\n  float r = mod(rshift(u32, 0), 255.0);\n  float g = mod(rshift(u32, 8), 255.0);\n  float b = mod(rshift(u32, 16), 255.0);\n  float a = mod(rshift(u32, 24), 255.0);\n  return vec4(r, g, b, a);\n}\nvec4 norm(in vec4 v) {\n  return v /= 255.0;\n}\nfloat max4(vec4 target) {\n  return max(max(max(target.x, target.y), target.z), target.w);\n}\nvec2 unpack_u8_nf32(vec2 bytes) {\n  return (bytes - 127.0) / 127.0;\n}","vcommon.glsl":"#include <materials/constants.glsl>\n#include <materials/utils.glsl>\n#include <materials/attributeData.glsl>\n#include <materials/vv.glsl>\n#include <materials/effects.glsl>\nattribute vec2 a_pos;\nattribute highp vec4 a_id;\nuniform highp mat3 u_dvsMat3;\nuniform highp mat3 u_displayMat3;\nuniform highp mat3 u_displayViewMat3;\nuniform highp float u_pixelRatio;\nuniform mediump float u_zoomFactor;\nuniform mediump float u_antialiasing;\nvec4 VV_ADATA = vec4(0.0);\nvoid loadVisualVariableData(inout vec4 target) {\n#ifdef OES_TEXTURE_FLOAT\n  target.rgba = getAttributeData2(a_id);\n#else\n  vec4 data0 = getAttributeData2(a_id);\n  vec4 data1 = getAttributeData3(a_id);\n  target.r = u88VVToFloat(data0.rg * 255.0);\n  target.g = u88VVToFloat(data0.ba * 255.0);\n  target.b = u88VVToFloat(data1.rg * 255.0);\n  target.a = u88VVToFloat(data1.ba * 255.0);\n#endif\n}\n#ifdef VV\n  #define INIT loadVisualVariableData(VV_ADATA)\n#else\n  #define INIT\n#endif\nvec4 getColor(in vec4 a_color, in float a_bitSet, int index) {\n#ifdef VV_COLOR\n  float isColorLocked   = getBit(a_bitSet, index);\n  return getVVColor(VV_ADATA[ATTR_VV_COLOR], a_color, isColorLocked);\n#else\n  return a_color;\n#endif\n}\nfloat getOpacity() {\n#ifdef VV_OPACITY\n  return getVVOpacity(VV_ADATA[ATTR_VV_OPACITY]);\n#else\n  return 1.0;\n#endif\n}\nfloat getSize(in float in_size) {\n#ifdef VV_SIZE\n  return getVVSize(in_size, VV_ADATA[ATTR_VV_SIZE]);\n#else\n  return in_size;\n#endif\n}\nmat3 getRotation() {\n#ifdef VV_ROTATION\n  return getVVRotationMat3(mod(VV_ADATA[ATTR_VV_ROTATION], 360.0));\n#else\n  return mat3(1.0);\n#endif\n}\nfloat getFilterFlags() {\n#ifdef IGNORES_SAMPLER_PRECISION\n  return ceil(getAttributeData0(a_id).x * 255.0);\n#else\n  return getAttributeData0(a_id).x * 255.0;\n#endif\n}\nvec4 getAnimationState() {\n  return getAttributeData1(a_id);\n}\nfloat getMinZoom() {\n  vec4 data0 = getAttributeData0(a_id) * 255.0;\n  return data0.g;\n}\nmat3 getMatrix(float isMapAligned) {\n  return isMapAligned * u_displayViewMat3 + (1.0 - isMapAligned) * u_displayMat3;\n}","vv.glsl":"#if defined(VV_SIZE_MIN_MAX_VALUE) || defined(VV_SIZE_SCALE_STOPS) || defined(VV_SIZE_FIELD_STOPS) || defined(VV_SIZE_UNIT_VALUE)\n  #define VV_SIZE\n#endif\n#if defined(VV_COLOR) || defined(VV_SIZE) || defined(VV_OPACITY) || defined(VV_ROTATION)\n  #define VV\n#endif\n#ifdef VV_COLOR\nuniform highp float u_vvColorValues[8];\nuniform vec4 u_vvColors[8];\n#endif\n#ifdef VV_SIZE_MIN_MAX_VALUE\nuniform highp vec4 u_vvSizeMinMaxValue;\n#endif\n#ifdef VV_SIZE_SCALE_STOPS\nuniform highp float u_vvSizeScaleStopsValue;\n#endif\n#ifdef VV_SIZE_FIELD_STOPS\nuniform highp float u_vvSizeFieldStopsValues[6];\nuniform float u_vvSizeFieldStopsSizes[6];\n#endif\n#ifdef VV_SIZE_UNIT_VALUE\nuniform highp float u_vvSizeUnitValueWorldToPixelsRatio;\n#endif\n#ifdef VV_OPACITY\nuniform highp float u_vvOpacityValues[8];\nuniform float u_vvOpacities[8];\n#endif\n#ifdef VV_ROTATION\nuniform lowp float u_vvRotationType;\n#endif\nbool isNan(float val) {\n  return (val == NAN_MAGIC_NUMBER);\n}\n#ifdef VV_SIZE_MIN_MAX_VALUE\nfloat getVVMinMaxSize(float sizeValue, float fallback) {\n  if (isNan(sizeValue)) {\n    return fallback;\n  }\n  float interpolationRatio = (sizeValue  - u_vvSizeMinMaxValue.x) / (u_vvSizeMinMaxValue.y - u_vvSizeMinMaxValue.x);\n  interpolationRatio = clamp(interpolationRatio, 0.0, 1.0);\n  return u_vvSizeMinMaxValue.z + interpolationRatio * (u_vvSizeMinMaxValue.w - u_vvSizeMinMaxValue.z);\n}\n#endif\n#ifdef VV_SIZE_FIELD_STOPS\nconst int VV_SIZE_N = 6;\nfloat getVVStopsSize(float sizeValue, float fallback) {\n  if (isNan(sizeValue)) {\n    return fallback;\n  }\n  if (sizeValue <= u_vvSizeFieldStopsValues[0]) {\n    return u_vvSizeFieldStopsSizes[0];\n  }\n  for (int i = 1; i < VV_SIZE_N; ++i) {\n    if (u_vvSizeFieldStopsValues[i] >= sizeValue) {\n      float f = (sizeValue - u_vvSizeFieldStopsValues[i-1]) / (u_vvSizeFieldStopsValues[i] - u_vvSizeFieldStopsValues[i-1]);\n      return mix(u_vvSizeFieldStopsSizes[i-1], u_vvSizeFieldStopsSizes[i], f);\n    }\n  }\n  return u_vvSizeFieldStopsSizes[VV_SIZE_N - 1];\n}\n#endif\n#ifdef VV_SIZE_UNIT_VALUE\nfloat getVVUnitValue(float sizeValue, float fallback) {\n  if (isNan(sizeValue)) {\n    return fallback;\n  }\n  return u_vvSizeUnitValueWorldToPixelsRatio * sizeValue;\n}\n#endif\n#ifdef VV_OPACITY\nconst int VV_OPACITY_N = 8;\nfloat getVVOpacity(float opacityValue) {\n  if (isNan(opacityValue)) {\n    return 1.0;\n  }\n  if (opacityValue <= u_vvOpacityValues[0]) {\n    return u_vvOpacities[0];\n  }\n  for (int i = 1; i < VV_OPACITY_N; ++i) {\n    if (u_vvOpacityValues[i] >= opacityValue) {\n      float f = (opacityValue - u_vvOpacityValues[i-1]) / (u_vvOpacityValues[i] - u_vvOpacityValues[i-1]);\n      return mix(u_vvOpacities[i-1], u_vvOpacities[i], f);\n    }\n  }\n  return u_vvOpacities[VV_OPACITY_N - 1];\n}\n#endif\n#ifdef VV_ROTATION\nmat4 getVVRotation(float rotationValue) {\n  if (isNan(rotationValue)) {\n    return mat4(1, 0, 0, 0,\n                0, 1, 0, 0,\n                0, 0, 1, 0,\n                0, 0, 0, 1);\n  }\n  float rotation = rotationValue;\n  if (u_vvRotationType == 1.0) {\n    rotation = 90.0 - rotation;\n  }\n  float angle = C_DEG_TO_RAD * rotation;\n  float sinA = sin(angle);\n  float cosA = cos(angle);\n  return mat4(cosA, sinA, 0, 0,\n              -sinA,  cosA, 0, 0,\n              0,     0, 1, 0,\n              0,     0, 0, 1);\n}\nmat3 getVVRotationMat3(float rotationValue) {\n  if (isNan(rotationValue)) {\n    return mat3(1, 0, 0,\n                0, 1, 0,\n                0, 0, 1);\n  }\n  float rotation = rotationValue;\n  if (u_vvRotationType == 1.0) {\n    rotation = 90.0 - rotation;\n  }\n  float angle = C_DEG_TO_RAD * -rotation;\n  float sinA = sin(angle);\n  float cosA = cos(angle);\n  return mat3(cosA, -sinA, 0,\n             sinA, cosA, 0,\n              0,    0,    1);\n}\n#endif\n#ifdef VV_COLOR\nconst int VV_COLOR_N = 8;\nvec4 getVVColor(float colorValue, vec4 fallback, float isColorLocked) {\n  if (isNan(colorValue) || isColorLocked == 1.0) {\n    return fallback;\n  }\n  if (colorValue <= u_vvColorValues[0]) {\n    return u_vvColors[0];\n  }\n  for (int i = 1; i < VV_COLOR_N; ++i) {\n    if (u_vvColorValues[i] >= colorValue) {\n      float f = (colorValue - u_vvColorValues[i-1]) / (u_vvColorValues[i] - u_vvColorValues[i-1]);\n      return mix(u_vvColors[i-1], u_vvColors[i], f);\n    }\n  }\n  return u_vvColors[VV_COLOR_N - 1];\n}\n#endif\nfloat getVVSize(in float size, in float vvSize)  {\n#ifdef VV_SIZE_MIN_MAX_VALUE\n  return getVVMinMaxSize(vvSize, size);\n#elif defined(VV_SIZE_SCALE_STOPS)\n  return u_vvSizeScaleStopsValue;\n#elif defined(VV_SIZE_FIELD_STOPS)\n  float outSize = getVVStopsSize(vvSize, size);\n  return isNan(outSize) ? size : outSize;\n#elif defined(VV_SIZE_UNIT_VALUE)\n  return getVVUnitValue(vvSize, size);\n#else\n  return size;\n#endif\n}"},"post-processing":{blit:{"blit.frag":"precision mediump float;\nuniform sampler2D u_texture;\nvarying vec2 v_uv;\nvoid main() {\n  gl_FragColor = texture2D(u_texture, v_uv);\n}"},bloom:{composite:{"composite.frag":"precision mediump float;\nvarying vec2 v_uv;\nuniform sampler2D u_blurTexture1;\nuniform sampler2D u_blurTexture2;\nuniform sampler2D u_blurTexture3;\nuniform sampler2D u_blurTexture4;\nuniform sampler2D u_blurTexture5;\nuniform float u_bloomStrength;\nuniform float u_bloomRadius;\nuniform float u_bloomFactors[NUMMIPS];\nuniform vec3 u_bloomTintColors[NUMMIPS];\nfloat lerpBloomFactor(const in float factor) {\n  float mirrorFactor = 1.2 - factor;\n  return mix(factor, mirrorFactor, u_bloomRadius);\n}\nvoid main() {\n  gl_FragColor = u_bloomStrength * (\n    lerpBloomFactor(u_bloomFactors[0]) * vec4(u_bloomTintColors[0], 1.0) * texture2D(u_blurTexture1, v_uv) +\n    lerpBloomFactor(u_bloomFactors[1]) * vec4(u_bloomTintColors[1], 1.0) * texture2D(u_blurTexture2, v_uv) +\n    lerpBloomFactor(u_bloomFactors[2]) * vec4(u_bloomTintColors[2], 1.0) * texture2D(u_blurTexture3, v_uv) +\n    lerpBloomFactor(u_bloomFactors[3]) * vec4(u_bloomTintColors[3], 1.0) * texture2D(u_blurTexture4, v_uv) +\n    lerpBloomFactor(u_bloomFactors[4]) * vec4(u_bloomTintColors[4], 1.0) * texture2D(u_blurTexture5, v_uv)\n  );\n}"},gaussianBlur:{"gaussianBlur.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform vec2 u_texSize;\nuniform vec2 u_direction;\nvarying vec2 v_uv;\n#define KERNEL_RADIUS RADIUS\n#define SIGMA RADIUS\nfloat gaussianPdf(in float x, in float sigma) {\n    return 0.39894 * exp(-0.5 * x * x / ( sigma * sigma)) / sigma;\n}\nvoid main() {\n  vec2 invSize = 1.0 / u_texSize;\n  float fSigma = float(SIGMA);\n  float weightSum = gaussianPdf(0.0, fSigma);\n  vec4 pixelColorSum = texture2D(u_colorTexture, v_uv) * weightSum;\n  for (int i = 1; i < KERNEL_RADIUS; i ++) {\n    float x = float(i);\n    float w = gaussianPdf(x, fSigma);\n    vec2 uvOffset = u_direction * invSize * x;\n    vec4 sample1 = texture2D(u_colorTexture, v_uv + uvOffset);\n    vec4 sample2 = texture2D(u_colorTexture, v_uv - uvOffset);\n    pixelColorSum += (sample1 + sample2) * w;\n    weightSum += 2.0 * w;\n  }\n  gl_FragColor = pixelColorSum /weightSum;\n}"},luminosityHighPass:{"luminosityHighPass.frag":"precision mediump float;\nuniform sampler2D u_texture;\nuniform vec3 u_defaultColor;\nuniform float u_defaultOpacity;\nuniform float u_luminosityThreshold;\nuniform float u_smoothWidth;\nvarying vec2 v_uv;\nvoid main() {\n  vec4 texel = texture2D(u_texture, v_uv);\n  vec3 luma = vec3(0.299, 0.587, 0.114);\n  float v = dot(texel.xyz, luma);\n  vec4 outputColor = vec4(u_defaultColor.rgb, u_defaultOpacity);\n  float alpha = smoothstep(u_luminosityThreshold, u_luminosityThreshold + u_smoothWidth, v);\n  gl_FragColor = mix(outputColor, texel, alpha);\n}"}},blur:{gaussianBlur:{"gaussianBlur.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform vec2 u_texSize;\nuniform vec2 u_direction;\nuniform float u_sigma;\nvarying vec2 v_uv;\n#define KERNEL_RADIUS RADIUS\nfloat gaussianPdf(in float x, in float sigma) {\n    return 0.39894 * exp(-0.5 * x * x / ( sigma * sigma)) / sigma;\n}\nvoid main() {\n  vec2 invSize = 1.0 / u_texSize;\n  float fSigma = u_sigma;\n  float weightSum = gaussianPdf(0.0, fSigma);\n  vec4 pixelColorSum = texture2D(u_colorTexture, v_uv) * weightSum;\n  for (int i = 1; i < KERNEL_RADIUS; i ++) {\n    float x = float(i);\n    float w = gaussianPdf(x, fSigma);\n    vec2 uvOffset = u_direction * invSize * x;\n    vec4 sample1 = texture2D(u_colorTexture, v_uv + uvOffset);\n    vec4 sample2 = texture2D(u_colorTexture, v_uv - uvOffset);\n    pixelColorSum += (sample1 + sample2) * w;\n    weightSum += 2.0 * w;\n  }\n  gl_FragColor = pixelColorSum /weightSum;\n}"},"radial-blur":{"radial-blur.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nvarying vec2 v_uv;\nconst float sampleDist = 1.0;\nconst float sampleStrength = 2.2;\nvoid main(void) {\n    float samples[10];\n    samples[0] = -0.08;\n    samples[1] = -0.05;\n    samples[2] = -0.03;\n    samples[3] = -0.02;\n    samples[4] = -0.01;\n    samples[5] =  0.01;\n    samples[6] =  0.02;\n    samples[7] =  0.03;\n    samples[8] =  0.05;\n    samples[9] =  0.08;\n    vec2 dir = 0.5 - v_uv;\n    float dist = sqrt(dir.x * dir.x + dir.y * dir.y);\n    dir = dir / dist;\n    vec4 color = texture2D(u_colorTexture,v_uv);\n    vec4 sum = color;\n    for (int i = 0; i < 10; i++) {\n      sum += texture2D(u_colorTexture, v_uv + dir * samples[i] * sampleDist);\n    }\n    sum *= 1.0 / 11.0;\n    float t = dist * sampleStrength;\n    t = clamp(t, 0.0, 1.0);\n    gl_FragColor = mix(color, sum, t);\n}"}},dra:{"dra.frag":"precision mediump float;\nuniform sampler2D u_minColor;\nuniform sampler2D u_maxColor;\nuniform sampler2D u_texture;\nvarying vec2 v_uv;\nvoid main() {\n  vec4 minColor = texture2D(u_minColor, vec2(0.5));\n  vec4 maxColor = texture2D(u_maxColor, vec2(0.5));\n  vec4 color = texture2D(u_texture, v_uv);\n  vec3 minColorUnpremultiply = minColor.rgb / minColor.a;\n  vec3 maxColorUnpremultiply = maxColor.rgb / maxColor.a;\n  vec3 colorUnpremultiply = color.rgb / color.a;\n  vec3 range = maxColorUnpremultiply - minColorUnpremultiply;\n  gl_FragColor = vec4(color.a * (colorUnpremultiply - minColorUnpremultiply) / range, color.a);\n}","min-max":{"min-max.frag":"#extension GL_EXT_draw_buffers : require\nprecision mediump float;\n#define CELL_SIZE 2\nuniform sampler2D u_minTexture;\nuniform sampler2D u_maxTexture;\nuniform vec2 u_srcResolution;\nuniform vec2 u_dstResolution;\nvarying vec2 v_uv;\nvoid main() {\n  vec2 srcPixel = floor(gl_FragCoord.xy) * float(CELL_SIZE);\n  vec2 onePixel = vec2(1.0) / u_srcResolution;\n  vec2 uv = (srcPixel + 0.5) / u_srcResolution;\n  vec4 minColor = vec4(1.0);\n  vec4 maxColor = vec4(0.0);\n  for (int y = 0; y < CELL_SIZE; ++y) {\n    for (int x = 0; x < CELL_SIZE; ++x) {\n      vec2 offset = uv + vec2(x, y) * onePixel;\n      minColor = min(minColor, texture2D(u_minTexture, offset));\n      maxColor = max(maxColor, texture2D(u_maxTexture, offset));\n    }\n  }\n  gl_FragData[0] = minColor;\n  gl_FragData[1] = maxColor;\n}"}},"drop-shadow":{composite:{"composite.frag":"precision mediump float;\nuniform sampler2D u_layerFBOTexture;\nuniform sampler2D u_blurTexture;\nuniform vec4 u_shadowColor;\nvarying vec2 v_uv;\nvoid main() {\n  vec4 layerColor = texture2D(u_layerFBOTexture, v_uv);\n  vec4 blurColor = texture2D(u_blurTexture, v_uv);\n  gl_FragColor = ((1.0 - layerColor.a) * blurColor.a * u_shadowColor + layerColor);\n}"},"drop-shadow.vert":"precision mediump float;\nattribute vec2 a_position;\nuniform highp mat3 u_displayViewMat3;\nuniform highp vec2 u_offset;\nvarying vec2 v_uv;\nvoid main() {\n  vec3 offset = u_displayViewMat3 * vec3(u_offset, 0.0);\n  gl_Position = vec4(a_position, 0.0, 1.0) + vec4(offset, 0.0);\n  v_uv = (a_position + 1.0) / 2.0;\n}"},"edge-detect":{"frei-chen":{"frei-chen.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform vec2 u_texSize;\nvarying vec2 v_uv;\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\nmat3 G[9];\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\nvoid main() {\n  G[0] = g0,\n  G[1] = g1,\n  G[2] = g2,\n  G[3] = g3,\n  G[4] = g4,\n  G[5] = g5,\n  G[6] = g6,\n  G[7] = g7,\n  G[8] = g8;\n  mat3 I;\n  float cnv[9];\n  vec3 sample;\n  for (float i = 0.0; i < 3.0; i++) {\n    for (float j = 0.0; j < 3.0; j++) {\n      sample = texture2D(u_colorTexture, v_uv + texel * vec2(i - 1.0,j - 1.0)).rgb;\n      I[int(i)][int(j)] = length(sample);\n    }\n  }\n  for (int i = 0; i < 9; i++) {\n    float dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\n    cnv[i] = dp3 * dp3;\n  }\n  float M = (cnv[0] + cnv[1]) + (cnv[2] + cnv[3]);\n  float S = (cnv[4] + cnv[5]) + (cnv[6] + cnv[7]) + (cnv[8] + M);\n  gl_FragColor = vec4(vec3(sqrt(M / S)), texture2D(u_colorTexture, v_uv).a);\n}"},sobel:{"sobel.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nvarying vec2 v_uv;\nuniform vec2 u_texSize;\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\nmat3 G[2];\nconst mat3 g0 = mat3( 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, -1.0, -2.0, -1.0 );\nconst mat3 g1 = mat3( 1.0, 0.0, -1.0, 2.0, 0.0, -2.0, 1.0, 0.0, -1.0 );\nvoid main() {\n  mat3 I;\n  float cnv[2];\n  vec3 sample;\n  G[0] = g0;\n  G[1] = g1;\n  for (float i = 0.0; i < 3.0; i++) {\n    for (float j = 0.0; j < 3.0; j++) {\n      sample = texture2D( u_colorTexture, v_uv + texel * vec2(i-1.0,j-1.0) ).rgb;\n      I[int(i)][int(j)] = length(sample);\n    }\n  }\n  for (int i = 0; i < 2; i++) {\n    float dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\n    cnv[i] = dp3 * dp3;\n  }\n  gl_FragColor = vec4(vec3(0.5 * sqrt(cnv[0] * cnv[0] + cnv[1] * cnv[1])), texture2D(u_colorTexture, v_uv).a);\n}"}},"edge-enhance":{"edge-enhance.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nvarying vec2 v_uv;\nuniform vec2 u_texSize;\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\nmat3 G[2];\nconst mat3 g0 = mat3( 1.0, 0.0, -1.0, 1.0, 0.0, -1.0, 1.0, 0.0, -1.0 );\nconst mat3 g1 = mat3( 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, -1.0, -1.0, -1.0 );\nvoid main() {\n  mat3 I;\n  float cnv[2];\n  vec3 sample;\n  G[0] = g0;\n  G[1] = g1;\n  for (float i = 0.0; i < 3.0; i++) {\n    for (float j = 0.0; j < 3.0; j++) {\n      sample = texture2D( u_colorTexture, v_uv + texel * vec2(i-1.0,j-1.0) ).rgb;\n      I[int(i)][int(j)] = length(sample);\n    }\n  }\n  for (int i = 0; i < 2; i++) {\n    float dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\n    cnv[i] = dp3 * dp3;\n  }\n  vec4 color = texture2D(u_colorTexture, v_uv);\n  gl_FragColor = vec4(0.5 * sqrt(cnv[0] * cnv[0] + cnv[1] * cnv[1]) * color);\n}"},filterEffect:{"filterEffect.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform mat4 u_coefficients;\nvarying vec2 v_uv;\nvoid main() {\n  vec4 color = texture2D(u_colorTexture, v_uv);\n  vec4 rgbw = u_coefficients * vec4(color.a > 0.0 ? color.rgb / color.a : vec3(0.0), 1.0);\n  float a = color.a;\n  gl_FragColor = vec4(a * rgbw.rgb, a);\n}"},pp:{"pp.vert":"precision mediump float;\nattribute vec2 a_position;\nvarying vec2 v_uv;\nvoid main() {\n  gl_Position = vec4(a_position, 0.0, 1.0);\n  v_uv = (a_position + 1.0) / 2.0;\n}"}},raster:{bitmap:{"bitmap.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\nuniform sampler2D u_texture;\nuniform highp vec2 u_coordScale;\nuniform lowp float u_opacity;\n#include <filtering/bicubic.glsl>\nvoid main() {\n#ifdef BICUBIC\n  vec4 color = sampleBicubicBSpline(u_texture, v_texcoord, u_coordScale);\n#else\n  vec4 color = texture2D(u_texture, v_texcoord);\n#endif\n  float alpha = u_opacity * color.a;\n  gl_FragColor = vec4(alpha * color.rgb, alpha);\n}","bitmap.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\n  v_texcoord = a_pos;\n  gl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}"},common:{"common.glsl":"uniform sampler2D u_image;\nuniform int u_bandCount;\nuniform bool u_isFloatTexture;\nuniform bool u_flipY;\nuniform float u_opacity;\nuniform int u_resampling;\nuniform vec2 u_srcImageSize;\n#ifdef APPLY_PROJECTION\n#include <raster/common/projection.glsl>\n#endif\n#ifdef BICUBIC\n#include <filtering/bicubic.glsl>\n#endif\nvec2 getPixelLocation(vec2 coords) {\n  vec2 targetLocation = u_flipY ? vec2(coords.s, 1.0 - coords.t) : coords;\n#ifdef APPLY_PROJECTION\n  targetLocation = projectPixelLocation(targetLocation);\n#endif\n  return targetLocation;\n}\nbool isOutside(vec2 coords){\n   if (coords.t>1.00001 ||coords.t<-0.00001 || coords.s>1.00001 ||coords.s<-0.00001) {\n     return true;\n   } else {\n     return false;\n   }\n}\nvec4 getPixel(vec2 pixelLocation) {\n#ifdef BICUBIC\n  vec4 color = sampleBicubicBSpline(u_image, pixelLocation, u_srcImageSize);\n#else\n  vec4 color = texture2D(u_image, pixelLocation);\n#endif\n  return color;\n}","contrastBrightness.glsl":"uniform float u_contrastOffset;\nuniform float u_brightnessOffset;\nvec4 adjustContrastBrightness(vec4 currentPixel, bool isFloat) {\n  vec4 pixelValue = isFloat ? currentPixel * 255.0 : currentPixel;\n  float maxI = 255.0;\n  float mid = 128.0;\n  float c = u_contrastOffset;\n  float b = u_brightnessOffset;\n  vec4 v;\n  if (c > 0.0 && c < 100.0) {\n    v = (200.0 * pixelValue - 100.0 * maxI + 2.0 * maxI * b) / (2.0 * (100.0 - c)) + mid;\n  } else if (c <= 0.0 && c > -100.0) {\n    v = (200.0 * pixelValue - 100.0 * maxI + 2.0 * maxI * b) * (100.0 + c) / 20000.0 + mid;\n  } else if (c == 100.0) {\n    v = (200.0 * pixelValue - 100.0 * maxI + (maxI + 1.0) * (100.0 - c) + 2.0 * maxI * b);\n    v = (sign(v) + 1.0) / 2.0;\n  } else if (c == -100.0) {\n    v = vec4(mid, mid, mid, currentPixel.a);\n  }\n  return vec4(v.r / 255.0, v.g / 255.0, v.b / 255.0, currentPixel.a);\n}","projection.glsl":"uniform sampler2D u_transformGrid;\nuniform vec2 u_transformSpacing;\nuniform vec2 u_transformGridSize;\nuniform vec2 u_targetImageSize;\nvec2 projectPixelLocation(vec2 coords) {\n  vec2 index_image = floor(coords * u_targetImageSize);\n  vec2 oneTransformPixel = vec2(0.25 / u_transformGridSize.s, 1.0 / u_transformGridSize.t);\n  vec2 index_transform = floor(index_image / u_transformSpacing) / u_transformGridSize;\n  vec2 pos = fract((index_image + vec2(0.5, 0.5)) / u_transformSpacing);\n  vec2 srcLocation;\n  vec2 transform_location = index_transform + oneTransformPixel * 0.5;\n  if (pos.s <= pos.t) {\n    vec4 ll_abc = texture2D(u_transformGrid, vec2(transform_location.s, transform_location.t));\n    vec4 ll_def = texture2D(u_transformGrid, vec2(transform_location.s + oneTransformPixel.s, transform_location.t));\n    srcLocation.s = dot(ll_abc.rgb, vec3(pos, 1.0));\n    srcLocation.t = dot(ll_def.rgb, vec3(pos, 1.0));\n  } else {\n    vec4 ur_abc = texture2D(u_transformGrid, vec2(transform_location.s + 2.0 * oneTransformPixel.s, transform_location.t));\n    vec4 ur_def = texture2D(u_transformGrid, vec2(transform_location.s + 3.0 * oneTransformPixel.s, transform_location.t));\n    srcLocation.s = dot(ur_abc.rgb, vec3(pos, 1.0));\n    srcLocation.t = dot(ur_def.rgb, vec3(pos, 1.0));\n  }\n  return srcLocation;\n}"},hillshade:{"hillshade.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\n#include <raster/common/common.glsl>\nuniform int u_hillshadeType;\nuniform float u_sinZcosAs[6];\nuniform float u_sinZsinAs[6];\nuniform float u_cosZs[6];\nuniform float u_weights[6];\nuniform vec2 u_factor;\nuniform float u_minValue;\nuniform float u_maxValue;\n#include <raster/lut/colorize.glsl>\nfloat getNeighborHoodAlpha(float a, float b, float c, float d, float e, float f, float g, float h, float i){\n  if (a == 0.0 || a == 0.0 || a==0.0 || a == 0.0 || a == 0.0 || a==0.0 || a == 0.0 || a == 0.0 || a==0.0) {\n    return 0.0;\n  }\n  else {\n    return e;\n  }\n}\nvec3 rgb2hsv(vec3 c) {\n  vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n  vec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\n  vec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\n  float d = q.x - min(q.w, q.y);\n  float e = 1.0e-10;\n  return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), min(d / (q.x + e), 1.0), q.x);\n}\nvec3 hsv2rgb(vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nvec4 overlay(float val, float minValue, float maxValue, float hillshade) {\n  val = clamp((val - minValue) / (maxValue - minValue), 0.0, 1.0);\n  vec4 rgb = colorize(vec4(val, val, val, 1.0), 255.0);\n  vec3 hsv = rgb2hsv(rgb.xyz);\n  hsv.z = hillshade;\n  return vec4(hsv2rgb(hsv), 1.0) * rgb.a;\n}\nvoid main() {\n  vec2 pixelLocation = getPixelLocation(v_texcoord);\n  if (isOutside(pixelLocation)) {\n     gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n     return;\n  }\n  vec4 currentPixel = getPixel(pixelLocation);\n  if (currentPixel.a == 0.0) {\n    gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n  }\n  vec2 axy = vec2(-1.0, -1.0);\n  vec2 bxy = vec2(0.0, -1.0);\n  vec2 cxy = vec2(1.0, -1.0);\n  vec2 dxy = vec2(-1.0, 0.0);\n  vec2 fxy = vec2(1.0, 0.0);\n  vec2 gxy = vec2(-1.0, 1.0);\n  vec2 hxy = vec2(0.0, 1.0);\n  vec2 ixy = vec2(1.0, 1.0);\n  vec2 onePixel = 1.0 / u_srcImageSize;\n  if (pixelLocation.s < onePixel.s) {\n    axy[0] = 1.0;\n    dxy[0] = 1.0;\n    gxy[0] = 1.0;\n  }\n  if (pixelLocation.t < onePixel.t) {\n    axy[1] = 1.0;\n    bxy[1] = 1.0;\n    cxy[1] = 1.0;\n  }\n  if (pixelLocation.s > 1.0 - onePixel.s) {\n    cxy[0] = -1.0;\n    fxy[0] = -1.0;\n    ixy[0] = -1.0;\n  }\n  if (pixelLocation.t > 1.0 - onePixel.t) {\n    gxy[1] = -1.0;\n    hxy[1] = -1.0;\n    ixy[1] = -1.0;\n  }\n  vec4 va = texture2D(u_image, pixelLocation + onePixel * axy);\n  vec4 vb = texture2D(u_image, pixelLocation + onePixel * bxy);\n  vec4 vc = texture2D(u_image, pixelLocation + onePixel * cxy);\n  vec4 vd = texture2D(u_image, pixelLocation + onePixel * dxy);\n  vec4 ve = texture2D(u_image, pixelLocation);\n  vec4 vf = texture2D(u_image, pixelLocation + onePixel * fxy);\n  vec4 vg = texture2D(u_image, pixelLocation + onePixel * gxy);\n  vec4 vh = texture2D(u_image, pixelLocation + onePixel * hxy);\n  vec4 vi = texture2D(u_image, pixelLocation + onePixel * ixy);\n  float dzx = (vc + 2.0 * vf + vi - va - 2.0 * vd - vg).r * u_factor.s;\n  float dzy = (vg + 2.0 * vh + vi - va - 2.0 * vb - vc).r * u_factor.t;\n  float dzd = sqrt(1.0 + dzx * dzx + dzy * dzy);\n  float hillshade = 0.0;\n  if (u_hillshadeType == 0){\n\t   float cosDelta = u_sinZsinAs[0] * dzy - u_sinZcosAs[0] * dzx;\n     float z = (u_cosZs[0] + cosDelta) / dzd;\n     if (z < 0.0)  z = 0.0;\n\t   hillshade = z;\n  } else {\n\t  for (int k = 0; k < 6; k++) {\n\t\t float cosDelta = u_sinZsinAs[k] * dzy - u_sinZcosAs[k] * dzx;\n\t\t float z = (u_cosZs[k] + cosDelta) / dzd;\n\t\t if (z < 0.0) z = 0.0;\n     hillshade = hillshade + z * u_weights[k];\n\t\t if (k == 5) break;\n    }\n  }\n  float alpha = getNeighborHoodAlpha(va.a, vb.a, vc.a, vd.a, ve.a, vf.a, vg.a, vh.a, vi.a);\n#ifdef APPLY_COLORMAP\n  gl_FragColor = overlay(ve.r, u_minValue, u_maxValue, hillshade) * alpha * u_opacity;\n#else\n  gl_FragColor = vec4(hillshade, hillshade, hillshade, 1.0) * alpha * u_opacity;\n#endif\n}","hillshade.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\n  v_texcoord = a_pos;\n  gl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}"},lut:{"colorize.glsl":"uniform sampler2D u_colormap;\nuniform float u_colormapOffset;\nuniform float u_colormapMaxIndex;\nvec4 colorize(vec4 currentPixel, float scaleFactor) {\n  float clrIndex = clamp(currentPixel.r * scaleFactor - u_colormapOffset, 0.0, u_colormapMaxIndex);\n  vec2 clrPosition = vec2((clrIndex + 0.5) / (u_colormapMaxIndex + 1.0), 0.0);\n  vec4 color = texture2D(u_colormap, clrPosition);\n  vec4 result = vec4(color.rgb, color.a * currentPixel.a);\n  return result;\n}","lut.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\n#include <raster/common/common.glsl>\n#include <raster/lut/colorize.glsl>\nvoid main() {\n  vec2 pixelLocation = getPixelLocation(v_texcoord);\n  if (isOutside(pixelLocation)) {\n     gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n     return;\n  }\n  vec4 currentPixel = getPixel(pixelLocation);\n  vec4 result = colorize(currentPixel, 1.0);\n  gl_FragColor = vec4(result.xyz, 1.0) * result.a * u_opacity;\n}","lut.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nuniform highp float u_scale;\nuniform highp vec2 u_offset;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\n  v_texcoord = a_pos * u_scale + u_offset;\n  gl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}"},stretch:{"stretch.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\n#include <raster/common/common.glsl>\nuniform float u_minCutOff[3];\nuniform float u_maxCutOff[3];\nuniform float u_minOutput;\nuniform float u_maxOutput;\nuniform float u_factor[3];\nuniform bool u_useGamma;\nuniform float u_gamma[3];\nuniform float u_gammaCorrection[3];\n#include <raster/lut/colorize.glsl>\nfloat stretchOneValue(float val, float minCutOff, float maxCutOff, float minOutput, float maxOutput, float factor, bool useGamma, float gamma, float gammaCorrection) {\n  if (val >= maxCutOff) {\n    return maxOutput;\n  } else if (val <= minCutOff) {\n    return minOutput;\n  }\n  float stretchedVal;\n  if (useGamma) {\n  \tfloat tempf = 1.0;\n\t  float outRange = maxOutput - minOutput;\n\t  float relativeVal = (val - minCutOff) / (maxCutOff - minCutOff);\n\t  if (gamma > 1.0) {\n      tempf -= pow(1.0 / outRange, relativeVal * gammaCorrection);\n    }\n    stretchedVal = (tempf * outRange * pow(relativeVal, 1.0 / gamma) + minOutput) / 255.0;\n  } else {\n    stretchedVal = minOutput + (val - minCutOff) * factor;\n  }\n  return stretchedVal;\n}\nvoid main() {\n  vec2 pixelLocation = getPixelLocation(v_texcoord);\n  if (isOutside(pixelLocation)) {\n     gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n     return;\n  }\n  vec4 currentPixel = getPixel(pixelLocation);\n  if (currentPixel.a == 0.0) {\n    gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n  }\n  if (u_bandCount == 1) {\n    float grayVal = stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_useGamma, u_gamma[0], u_gammaCorrection[0]);\n#ifdef APPLY_COLORMAP\n      vec4 result = colorize(vec4(grayVal, grayVal, grayVal, 1.0), u_useGamma ? 255.0 : 1.0);\n      gl_FragColor = vec4(result.xyz, 1.0) * result.a * currentPixel.a * u_opacity;\n#else\n      gl_FragColor = vec4(grayVal, grayVal, grayVal, 1.0) * currentPixel.a * u_opacity;\n#endif\n  } else {\n    float redVal = stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_useGamma, u_gamma[0], u_gammaCorrection[0]);\n    float greenVal = stretchOneValue(currentPixel.g, u_minCutOff[1], u_maxCutOff[1], u_minOutput, u_maxOutput, u_factor[1], u_useGamma, u_gamma[1], u_gammaCorrection[1]);\n    float blueVal = stretchOneValue(currentPixel.b, u_minCutOff[2], u_maxCutOff[2], u_minOutput, u_maxOutput, u_factor[2], u_useGamma, u_gamma[2], u_gammaCorrection[2]);\n    gl_FragColor = vec4(redVal, greenVal, blueVal, 1.0) * currentPixel.a * u_opacity;\n  }\n}","stretch.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nuniform highp float u_scale;\nuniform highp vec2 u_offset;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\n  v_texcoord = a_pos * u_scale + u_offset;\n  gl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}"}},stencil:{"stencil.frag":"void main() {\n  gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\n}","stencil.vert":"attribute vec2 a_pos;\nvoid main() {\n  gl_Position = vec4(a_pos, 0.0, 1.0);\n}"},tileInfo:{"tileInfo.frag":"uniform mediump sampler2D u_texture;\nvarying mediump vec2 v_tex;\nvoid main(void) {\n  lowp vec4 color = texture2D(u_texture, v_tex);\n  gl_FragColor = 0.75 * color;\n}","tileInfo.vert":"attribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform mediump float u_depth;\nuniform mediump vec2 u_coord_ratio;\nuniform mediump vec2 u_delta;\nuniform mediump vec2 u_dimensions;\nvarying mediump vec2 v_tex;\nvoid main() {\n  mediump vec2 offset = u_coord_ratio * vec2(u_delta + a_pos * u_dimensions);\n  vec3 v_pos = u_dvsMat3 * vec3(offset, 1.0);\n  gl_Position = vec4(v_pos.xy, 0.0, 1.0);\n  v_tex = a_pos;\n}"},util:{"encoding.glsl":"const vec4 rgba2float_factors = vec4(\n    255.0 / (256.0),\n    255.0 / (256.0 * 256.0),\n    255.0 / (256.0 * 256.0 * 256.0),\n    255.0 / (256.0 * 256.0 * 256.0 * 256.0)\n  );\nfloat rgba2float(vec4 rgba) {\n  return dot(rgba, rgba2float_factors);\n}"}};const a=new o.a((function(e){let t=i;return e.split("/").forEach(e=>{t&&(t=t[e])}),t}));function r(e){return a.resolveIncludes(e)}},538:function(e,t,n){"use strict";class o{constructor(){this.objectIdFieldName=null,this.globalIdFieldName=null,this.geohashFieldName=null,this.geometryProperties=null,this.geometryType=null,this.spatialReference=null,this.hasZ=!1,this.hasM=!1,this.features=[],this.fields=[],this.transform=null,this.exceededTransferLimit=!1,this.uniqueIdField=null,this.queryGeometryType=null,this.queryGeometry=null}weakClone(){const e=new o;return e.objectIdFieldName=this.objectIdFieldName,e.globalIdFieldName=this.globalIdFieldName,e.geohashFieldName=this.geohashFieldName,e.geometryProperties=this.geometryProperties,e.geometryType=this.geometryType,e.spatialReference=this.spatialReference,e.hasZ=this.hasZ,e.hasM=this.hasM,e.features=this.features,e.fields=this.fields,e.transform=this.transform,e.exceededTransferLimit=this.exceededTransferLimit,e.uniqueIdField=this.uniqueIdField,e.queryGeometry=this.queryGeometry,e.queryGeometryType=this.queryGeometryType,e}}t.a=o},541:function(e,t,n){"use strict";n.d(t,"a",(function(){return i})),n.d(t,"b",(function(){return a})),n.d(t,"c",(function(){return o})),n.d(t,"d",(function(){return r}));const o=!0,i=32,a=1.5,r=200},570:function(e,t,n){"use strict";t.a=class{constructor(e){this.readFile=e}resolveIncludes(e){return this.resolve(e)}resolve(e,t=new Map){if(t.has(e))return t.get(e);const n=this.read(e);if(!n)throw new Error("cannot find shader file "+e);const o=/^[^\S\n]*#include\s+<(\S+)>[^\S\n]?/gm;let i=o.exec(n);const a=[];for(;null!=i;)a.push({path:i[1],start:i.index,length:i[0].length}),i=o.exec(n);let r=0,l="";return a.forEach(e=>{l+=n.slice(r,e.start),l+=t.has(e.path)?"":this.resolve(e.path,t),r=e.start+e.length}),l+=n.slice(r),t.set(e,l),l}read(e){return this.readFile(e)}}},663:function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var o=n(536);const i={name:"background",shaders:{vertexShader:Object(o.a)("background/background.vert"),fragmentShader:Object(o.a)("background/background.frag")},attributes:{a_pos:0}}},696:function(e,t,n){"use strict";n.d(t,"a",(function(){return r})),n.d(t,"b",(function(){return i})),n.d(t,"c",(function(){return a})),n.d(t,"d",(function(){return c})),n.d(t,"e",(function(){return s})),n.d(t,"f",(function(){return l})),n.d(t,"g",(function(){return f})),n.d(t,"h",(function(){return u})),n.d(t,"i",(function(){return d})),n.d(t,"j",(function(){return _})),n.d(t,"k",(function(){return m}));n(5),n(429);var o=n(438);n(426),n(428);function i(e,t,n="nearest",i=!1){const a=!(i&&"u8"===t.pixelType),r=a?5126:5121,l=null==t.pixels||0===t.pixels.length?null:a?t.getAsRGBAFloat():t.getAsRGBA(),s={width:t.width,height:t.height,target:3553,pixelFormat:6408,internalFormat:6408,samplingMode:"bilinear"===n||"cubic"===n?9729:9728,dataType:r,wrapMode:33071,flipped:!1};return new o.a(e,s,l)}function a(e,t){const n=4*t.size[0],i=t.size[1],a={width:n,height:i,target:3553,pixelFormat:6408,internalFormat:6408,dataType:5126,samplingMode:9728,wrapMode:33071,flipped:!1},r=new Float32Array(n*i*4);let l=0;for(let o=0;o<t.coefficients.length;o++)r[l++]=t.coefficients[o],o%3==2&&(r[l++]=1);return new o.a(e,a,r)}function r(e,t){const n={width:t.length/4,height:1,target:3553,pixelFormat:6408,internalFormat:6408,dataType:5121,samplingMode:9728,wrapMode:33071,flipped:!1};return new o.a(e,n,t)}function l(e,t,n,o=1,i=!0,a=!1){return{u_flipY:i,u_isFloatTexture:a,u_applyTransform:!!e,u_opacity:o,u_transformSpacing:e?e.spacing:null,u_transformGridSize:e?e.size:null,u_targetImageSize:t,u_srcImageSize:n}}function s(e,t){return{u_colormapOffset:t||0,u_colormapMaxIndex:e?e.length/4-1:null}}function c(e,t){return{u_scale:e,u_offset:t}}function u(e){return{u_bandCount:e.bandCount,u_minOutput:e.outMin,u_maxOutput:e.outMax,u_minCutOff:e.minCutOff,u_maxCutOff:e.maxCutOff,u_factor:e.factor,u_useGamma:e.useGamma,u_gamma:e.gamma,u_gammaCorrection:e.gammaCorrection}}function f(e){return{u_hillshadeType:e.hillshadeType,u_sinZcosAs:e.sinZcosAs,u_sinZsinAs:e.sinZsinAs,u_cosZs:e.cosZs,u_weights:e.weights,u_factor:e.factor,u_minValue:e.minValue,u_maxValue:e.maxValue}}function d(e,t){const n=e.gl,o=t.glName,i=n.getProgramParameter(o,n.ACTIVE_UNIFORMS),a=new Map;let r;for(let l=0;l<i;l++)r=n.getActiveUniform(o,l),r&&a.set(r.name,{location:n.getUniformLocation(o,r.name),info:r});return a}function m(e,t,n){Object.keys(n).forEach(o=>{const i=t.get(o)||t.get(o+"[0]");i&&function(e,t,n,o){if(null===o||null==n)return!1;const{info:i}=o;switch(i.type){case 5126:i.size>1?e.setUniform1fv(t,n):e.setUniform1f(t,n);break;case 35664:e.setUniform2fv(t,n);break;case 35665:e.setUniform3fv(t,n);break;case 35666:e.setUniform4fv(t,n);break;case 35675:e.setUniformMatrix3fv(t,n);break;case 35676:e.setUniformMatrix4fv(t,n);break;case 5124:i.size>1?e.setUniform1iv(t,n):e.setUniform1i(t,n);break;case 35670:e.setUniform1i(t,n?1:0);break;case 35667:case 35671:e.setUniform2iv(t,n);break;case 35668:case 35672:e.setUniform3iv(t,n);break;case 35669:case 35673:e.setUniform4iv(t,n);break;default:;}}(e,o,n[o],i)})}function _(e,t,n,o){n.length===o.length&&(o.some(e=>null==e)||n.some(e=>null==e)||n.forEach((n,i)=>{t.setUniform1i(n,i),e.bindTexture(o[i],i)}))}},723:function(e,t,n){"use strict";n.d(t,"a",(function(){return c})),n.d(t,"b",(function(){return f})),n.d(t,"c",(function(){return m})),n.d(t,"d",(function(){return g})),n.d(t,"e",(function(){return x})),n.d(t,"f",(function(){return v})),n.d(t,"g",(function(){return y}));n(5),n(53),n(429),n(426);var o=n(493),i=(n(428),n(570)),a={background:{"background.frag":"#ifdef PATTERN\nuniform lowp float u_opacity;\nuniform mediump vec2 u_pattern_tl;\nuniform mediump vec2 u_pattern_br;\nuniform sampler2D u_texture;\nvarying mediump vec2 v_tileTextureCoord;\n#else\nuniform lowp vec4 u_color;\n#endif\n#ifdef ID\nvarying mediump vec4 v_id;\n#endif\nvoid main() {\n#ifdef PATTERN\n  mediump vec2 normalizedTextureCoord = mod(v_tileTextureCoord, 1.0);\n  mediump vec2 samplePos = mix(u_pattern_tl, u_pattern_br, normalizedTextureCoord);\n  lowp vec4 color = texture2D(u_texture, samplePos);\n  gl_FragColor = u_opacity * color;\n#else\n  gl_FragColor = u_color;\n#endif\n#ifdef ID\n  if (gl_FragColor.a < 1.0 / 255.0) {\n    discard;\n  }\n  gl_FragColor = v_id;\n#endif\n}","background.vert":"precision mediump float;\nattribute vec2 a_pos;\n#ifdef ID\nuniform mediump vec4 u_id;\nvarying mediump vec4 v_id;\n#endif\nuniform highp mat3 u_dvsMat3;\nuniform mediump float u_coord_range;\nuniform mediump float u_depth;\n#ifdef PATTERN\nuniform mediump mat3 u_pattern_matrix;\nvarying mediump vec2 v_tileTextureCoord;\n#endif\nvoid main() {\n  gl_Position = vec4((u_dvsMat3 * vec3(u_coord_range * a_pos, 1.0)).xy, u_depth, 1.0);\n#ifdef PATTERN\n  v_tileTextureCoord = (u_pattern_matrix * vec3(a_pos, 1.0)).xy;\n#endif\n#ifdef ID\n  v_id = u_id / 255.0;\n#endif\n}"},circle:{"circle.frag":"precision lowp float;\nvarying lowp vec4 v_color;\nvarying lowp vec4 v_stroke_color;\nvarying mediump float v_blur;\nvarying mediump float v_stroke_width;\nvarying mediump float v_radius;\nvarying mediump vec2 v_offset;\n#ifdef ID\nvarying mediump vec4 v_id;\n#endif\nvoid main()\n{\n  mediump float dist = length(v_offset);\n  mediump float alpha = smoothstep(0.0, -v_blur, dist - 1.0);\n  lowp float color_mix_ratio = v_stroke_width < 0.01 ? 0.0 : smoothstep(-v_blur, 0.0, dist - v_radius / (v_radius + v_stroke_width));\n  gl_FragColor = alpha * mix(v_color, v_stroke_color, color_mix_ratio);\n#ifdef ID\n  if (gl_FragColor.a < 1.0 / 255.0) {\n    discard;\n  }\n  gl_FragColor = v_id;\n#endif\n}","circle.vert":"precision mediump float;\nattribute vec2 a_pos;\nattribute vec4 a_color;\nattribute vec4 a_stroke_color;\nattribute vec4 a_data;\nconst float sizePrecision = 0.25;\nconst float blurPrecision = 0.03125;\nvarying lowp vec4 v_color;\nvarying lowp vec4 v_stroke_color;\nvarying mediump float v_blur;\nvarying mediump float v_stroke_width;\nvarying mediump float v_radius;\nvarying mediump vec2 v_offset;\n#ifdef ID\nuniform mediump vec4 u_id;\nvarying mediump vec4 v_id;\n#endif\nuniform highp mat3 u_dvsMat3;\nuniform highp mat3 u_displayMat3;\nuniform mediump vec2 u_circleTranslation;\nuniform mediump float u_depth;\nuniform mediump float u_radius;\nuniform lowp vec4 u_color;\nuniform mediump float u_blur;\nuniform mediump float u_stroke_width;\nuniform lowp vec4 u_stroke_color;\nuniform mediump float u_antialiasingWidth;\nvoid main()\n{\n  v_color = a_color * u_color;\n  v_stroke_color = a_stroke_color * u_stroke_color;\n  v_stroke_width = a_data[1] * sizePrecision * u_stroke_width;\n  v_radius = a_data[2] * u_radius;\n  v_blur = max(a_data[0] * blurPrecision + u_blur, u_antialiasingWidth / (v_radius + v_stroke_width));\n  mediump vec2 offset = vec2(mod(a_pos, 2.0) * 2.0 - 1.0);\n  v_offset = offset;\n#ifdef ID\n  v_id = u_id / 255.0;\n#endif\n  mediump vec3 pos = u_dvsMat3 * vec3(a_pos * 0.5, 1.0) + u_displayMat3 * vec3((v_radius + v_stroke_width) * offset + u_circleTranslation, 0.0);\n  gl_Position = vec4(pos.xy, u_depth, 1.0);\n}"},fill:{"fill.frag":"precision lowp float;\n#ifdef PATTERN\nuniform mediump vec2 u_pattern_tl;\nuniform mediump vec2 u_pattern_br;\nuniform lowp sampler2D u_texture;\nvarying mediump vec2 v_tileTextureCoord;\n#endif\n#ifdef ID\nvarying mediump vec4 v_id;\n#endif\nvarying lowp vec4 v_color;\nvec4 mixColors(vec4 color1, vec4 color2) {\n  float compositeAlpha = color2.a + color1.a * (1.0 - color2.a);\n  vec3 compositeColor = color2.rgb + color1.rgb * (1.0 - color2.a);\n  return vec4(compositeColor, compositeAlpha);\n}\nvoid main()\n{\n#ifdef PATTERN\n  mediump vec2 normalizedTextureCoord = fract(v_tileTextureCoord);\n  mediump vec2 samplePos = mix(u_pattern_tl, u_pattern_br, normalizedTextureCoord);\n  lowp vec4 color = texture2D(u_texture, samplePos);\n  gl_FragColor = v_color[3] * color;\n#else\n  gl_FragColor = v_color;\n#endif\n#ifdef ID\n  if (gl_FragColor.a < 1.0 / 255.0) {\n    discard;\n  }\n  gl_FragColor = v_id;\n#endif\n}","fill.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp mat3 u_displayMat3;\nuniform mediump float u_depth;\nuniform mediump vec2 u_fillTranslation;\n#ifdef PATTERN\nuniform mediump mat3 u_pattern_matrix;\nvarying mediump vec2 v_tileTextureCoord;\n#endif\n#ifdef ID\nuniform mediump vec4 u_id;\nvarying mediump vec4 v_id;\n#endif\n#ifdef DD\nattribute vec4 a_color;\n#endif\nuniform lowp vec4 u_color;\nvarying lowp vec4 v_color;\nvoid main()\n{\n#ifdef DD\n  v_color = a_color * u_color;\n#else\n  v_color = u_color;\n#endif\n#ifdef ID\n  v_id = u_id / 255.0;\n#endif\n#ifdef PATTERN\n  v_tileTextureCoord = (u_pattern_matrix * vec3(a_pos, 1.0)).xy;\n#endif\n  vec3 pos = u_dvsMat3 * vec3(a_pos, 1.0) + u_displayMat3 * vec3(u_fillTranslation, 0.0);\n  gl_Position = vec4(pos.xy, u_depth, 1.0);\n}"},icon:{"icon.frag":"precision mediump float;\nuniform lowp sampler2D u_texture;\n#ifdef SDF\nuniform lowp vec4 u_color;\nuniform lowp vec4 u_outlineColor;\nuniform mediump float u_outlineSize;\n#endif\nvarying mediump vec2 v_tex;\nvarying lowp float v_opacity;\nvarying mediump vec2 v_size;\nvarying lowp vec4 v_color;\n#ifdef ID\nvarying mediump vec4 v_id;\n#endif\n#include <util/encoding.glsl>\nvec4 mixColors(vec4 color1, vec4 color2) {\n  float compositeAlpha = color2.a + color1.a * (1.0 - color2.a);\n  vec3 compositeColor = color2.rgb + color1.rgb * (1.0 - color2.a);\n  return vec4(compositeColor, compositeAlpha);\n}\nvoid main()\n{\n#ifdef SDF\n  lowp vec4 fillPixelColor = v_color;\n  float d = rgba2float(texture2D(u_texture, v_tex)) - 0.5;\n  const float sofetEdgeRatio = 0.248062016;\n  float size = max(v_size.x, v_size.y);\n  float dist = d * sofetEdgeRatio * size;\n  fillPixelColor *= clamp(0.5 - dist, 0.0, 1.0);\n  if (u_outlineSize > 0.25) {\n    lowp vec4 outlinePixelColor = u_outlineColor;\n    const float outlineLimitRatio = (16.0 / 86.0);\n    float clampedOutlineSize = sofetEdgeRatio * min(u_outlineSize, outlineLimitRatio * max(v_size.x, v_size.y));\n    outlinePixelColor *= clamp(0.5 - (abs(dist) - clampedOutlineSize), 0.0, 1.0);\n    gl_FragColor = v_opacity * mixColors(fillPixelColor, outlinePixelColor);\n  }\n  else {\n    gl_FragColor = v_opacity * fillPixelColor;\n  }\n#else\n  lowp vec4 texColor = texture2D(u_texture, v_tex);\n  gl_FragColor = v_opacity * texColor;\n#endif\n#ifdef ID\n  if (gl_FragColor.a < 1.0 / 255.0) {\n    discard;\n  }\n  gl_FragColor = v_id;\n#endif\n}","icon.vert":"attribute vec2 a_pos;\nattribute vec2 a_vertexOffset;\nattribute vec4 a_texAngleRange;\nattribute vec4 a_levelInfo;\nattribute float a_opacityInfo;\n#ifdef DD\nattribute vec4 a_color;\nattribute mediump float a_size;\n#endif\nuniform lowp vec4 u_color;\nuniform mediump float u_size;\n#ifdef ID\nuniform mediump vec4 u_id;\nvarying mediump vec4 v_id;\n#endif\nvarying lowp vec4 v_color;\nuniform highp mat3 u_dvsMat3;\nuniform highp mat3 u_displayMat3;\nuniform highp mat3 u_displayViewMat3;\nuniform mediump vec2 u_iconTranslation;\nuniform vec2 u_mosaicSize;\nuniform mediump float u_depth;\nuniform mediump float u_mapRotation;\nuniform mediump float u_level;\nuniform lowp float u_keepUpright;\nuniform mediump float u_opacity;\nuniform mediump float u_fadeDuration;\nvarying mediump vec2 v_tex;\nvarying lowp float v_opacity;\nvarying mediump vec2 v_size;\nconst float C_OFFSET_PRECISION = 1.0 / 8.0;\nconst float C_256_TO_RAD = 3.14159265359 / 128.0;\nconst float C_DEG_TO_RAD = 3.14159265359 / 180.0;\nconst float tileCoordRatio = 1.0 / 8.0;\nuniform highp float u_time;\nvoid main()\n{\n  float modded = mod(a_opacityInfo, 128.0);\n  float targetOpacity = (a_opacityInfo - modded) / 128.0;\n  float startOpacity = modded / 127.0;\n  float interpolatedOpacity = clamp(startOpacity + 2.0 * (targetOpacity - 0.5) * u_time / u_fadeDuration, 0.0, 1.0);\n  v_opacity = u_opacity * interpolatedOpacity;\n  mediump float a_angle         = a_levelInfo[1];\n  mediump float a_minLevel      = a_levelInfo[2];\n  mediump float a_maxLevel      = a_levelInfo[3];\n  mediump vec2 a_tex            = a_texAngleRange.xy;\n  mediump float delta_z = 0.0;\n  mediump float rotated = mod(a_angle + u_mapRotation, 256.0);\n  delta_z += (1.0 - step(u_keepUpright, 0.0)) * step(64.0, rotated) * (1.0 - step(192.0, rotated));\n  delta_z += 1.0 - step(a_minLevel, u_level);\n  delta_z += step(a_maxLevel, u_level);\n  delta_z += step(v_opacity, 0.0);\n  vec2 offset = C_OFFSET_PRECISION * a_vertexOffset;\n  v_size = abs(offset);\n#ifdef SDF\n  offset = (120.0 / 86.0) * offset;\n#endif\n#ifdef DD\n  mediump float icon_size = a_size * u_size;\n#else\n  mediump float icon_size = u_size;\n#endif\n  mediump vec3 pos = u_dvsMat3 * vec3(a_pos, 1.0) + u_displayViewMat3 * vec3(icon_size * offset, 0.0) + u_displayMat3 * vec3(u_iconTranslation, 0.0);\n  gl_Position = vec4(pos.xy, u_depth + delta_z, 1.0);\n#ifdef DD\n  v_color = a_color * u_color;\n#else\n  v_color = u_color;\n#endif\n#ifdef ID\n  v_id = u_id / 255.0;\n#endif\n  v_tex = a_tex.xy / u_mosaicSize;\n  v_opacity *= v_color.w;\n}"},line:{"line.frag":"varying mediump vec2 v_normal;\nvarying highp float v_accumulatedDistance;\nvarying mediump float v_lineHalfWidth;\nvarying lowp vec4 v_color;\nvarying mediump float v_blur;\n#ifdef PATTERN\nuniform mediump vec2 u_pattern_tl;\nuniform mediump vec2 u_pattern_br;\nuniform mediump vec2 u_spriteSize;\nuniform sampler2D u_texture;\nconst mediump float tileCoordRatio = 8.0;\n#else\nvarying mediump vec2 v_dasharray;\n#endif\n#ifdef ID\nvarying mediump vec4 v_id;\n#endif\nvoid main()\n{\n  mediump float fragDist = length(v_normal) * v_lineHalfWidth;\n  lowp float alpha = clamp((v_lineHalfWidth - fragDist) / v_blur, 0.0, 1.0);\n#ifdef PATTERN\n  mediump float relativeTexX = mod((v_accumulatedDistance + v_normal.x * v_lineHalfWidth * tileCoordRatio) / u_spriteSize.x, 1.0);\n  mediump float relativeTexY = 0.5 + (v_normal.y * v_lineHalfWidth / u_spriteSize.y);\n  mediump vec2 texCoord = mix(u_pattern_tl, u_pattern_br, vec2(relativeTexX, relativeTexY));\n  lowp vec4 color = texture2D(u_texture, texCoord);\n  gl_FragColor = alpha * v_color[3] * color;\n#else\n  lowp float dashPos =  mod(v_accumulatedDistance, v_dasharray.x + v_dasharray.y);\n  lowp float dashAlpha = clamp(min(dashPos, v_dasharray.x - dashPos) + 0.5, 0.0, 1.0);\n  dashAlpha = max(sign(-v_dasharray.y), dashAlpha);\n  alpha *= dashAlpha;\n  gl_FragColor = alpha * v_color;\n#endif\n#ifdef ID\n  if (gl_FragColor.a < 1.0 / 255.0) {\n    discard;\n  }\n  gl_FragColor = v_id;\n#endif\n}","line.vert":"attribute vec2 a_pos;\nattribute vec4 a_offsetAndNormal;\nattribute vec2 a_accumulatedDistance;\nuniform highp mat3 u_dvsMat3;\nuniform highp mat3 u_displayMat3;\nuniform highp mat3 u_displayViewMat3;\nuniform mediump vec2 u_lineTranslation;\nuniform mediump float u_blur;\nuniform mediump float u_antialiasing;\nuniform mediump float u_depth;\nvarying mediump vec2 v_normal;\nvarying highp float v_accumulatedDistance;\nconst float scale = 1.0 / 31.0;\n#ifdef DD\nattribute vec4 a_color;\nattribute mediump float a_width;\n#endif\nuniform lowp vec4 u_color;\nuniform mediump float u_width;\n#ifdef ID\nuniform mediump vec4 u_id;\nvarying mediump vec4 v_id;\n#endif\nvarying lowp vec4 v_color;\nvarying mediump float v_lineHalfWidth;\nvarying mediump float v_blur;\n#ifndef PATTERN\nuniform mediump vec2 u_dasharray;\nvarying mediump vec2 v_dasharray;\n#endif\nvoid main()\n{\n  v_normal = a_offsetAndNormal.zw * scale;\n#ifdef DD\n  v_lineHalfWidth = a_width * u_width;\n#else\n  v_lineHalfWidth = u_width;\n#endif\n  v_lineHalfWidth += u_antialiasing;\n  v_lineHalfWidth *= 0.5;\n#ifndef PATTERN\n#ifdef DD\n  v_dasharray = u_dasharray * a_width;\n#else\n  v_dasharray = u_dasharray * u_width;\n#endif\n#endif\n  mediump vec2 dist = v_lineHalfWidth * scale * a_offsetAndNormal.xy;\n  mediump vec3 pos = u_dvsMat3 * vec3(a_pos, 1.0) +  u_displayViewMat3 * vec3(dist, 0.0) + u_displayMat3 * vec3(u_lineTranslation, 0.0);\n  gl_Position = vec4(pos.xy, u_depth, 1.0);\n  v_accumulatedDistance = a_accumulatedDistance.x;\n  v_blur = u_blur + u_antialiasing;\n  #ifdef DD\n    v_color = a_color * u_color;\n  #else\n    v_color = u_color;\n  #endif\n  #ifdef ID\n    v_id = u_id / 255.0;\n  #endif\n}"},outline:{"outline.frag":"varying lowp vec4 v_color;\nvarying mediump vec2 v_normal;\n#ifdef ID\nvarying mediump vec4 v_id;\n#endif\nvoid main()\n{\n  lowp float dist = abs(v_normal.y);\n  lowp float alpha = smoothstep(1.0, 0.0, dist);\n  gl_FragColor = alpha * v_color;\n#ifdef ID\n  if (gl_FragColor.a < 1.0 / 255.0) {\n    discard;\n  }\n  gl_FragColor = v_id;\n#endif\n}","outline.vert":"attribute vec2 a_pos;\nattribute vec2 a_offset;\nattribute vec2 a_xnormal;\n#ifdef DD\nattribute vec4 a_color;\n#endif\nuniform lowp vec4 u_color;\nvarying lowp vec4 v_color;\n#ifdef ID\nuniform mediump vec4 u_id;\nvarying mediump vec4 v_id;\n#endif\nuniform highp mat3 u_dvsMat3;\nuniform highp mat3 u_displayMat3;\nuniform mediump vec2 u_fillTranslation;\nuniform mediump float u_depth;\nuniform mediump float u_outline_width;\nvarying lowp vec2 v_normal;\nconst float scale = 1.0 / 15.0;\nvoid main()\n{\n#ifdef DD\n  v_color = a_color * u_color;\n#else\n  v_color = u_color;\n#endif\n#ifdef ID\n  v_id = u_id / 255.0;\n#endif\n  v_normal = a_xnormal;\n  mediump vec2 dist = u_outline_width * scale * a_offset;\n  mediump vec3 pos = u_dvsMat3 * vec3(a_pos, 1.0) + u_displayMat3 * vec3(dist + u_fillTranslation, 0.0);\n  gl_Position = vec4(pos.xy, u_depth, 1.0);\n}"},text:{"text.frag":"uniform lowp sampler2D u_texture;\nuniform mediump float u_edgeDistance;\nvarying lowp vec2 v_tex;\nvarying lowp float v_opacity;\nvarying lowp vec4 v_color;\nvarying mediump float v_edgeWidth;\nvarying mediump float v_edgeDistance;\n#ifdef ID\nvarying mediump vec4 v_id;\n#endif\nvoid main()\n{\n  lowp float dist = texture2D(u_texture, v_tex).a;\n  mediump float alpha = smoothstep(v_edgeDistance - v_edgeWidth, v_edgeDistance + v_edgeWidth, dist) * v_opacity;\n  gl_FragColor = alpha * v_color;\n#ifdef ID\n  if (gl_FragColor.a < 1.0 / 255.0) {\n    discard;\n  }\n  gl_FragColor = v_id;\n#endif\n}","text.vert":"attribute vec2 a_pos;\nattribute vec2 a_vertexOffset;\nattribute vec4 a_texAngleRange;\nattribute vec4 a_levelInfo;\nattribute float a_opacityInfo;\nuniform lowp vec4 u_color;\n#ifdef DD\nattribute vec4 a_color;\n#endif\nvarying lowp vec4 v_color;\nuniform mediump float u_size;\n#ifdef DD\nattribute mediump float a_size;\n#endif\nvarying mediump float v_size;\n#ifdef ID\nuniform mediump vec4 u_id;\nvarying mediump vec4 v_id;\n#endif\nuniform highp mat3 u_dvsMat3;\nuniform highp mat3 u_displayMat3;\nuniform highp mat3 u_displayViewMat3;\nuniform mediump vec2 u_textTranslation;\nuniform vec2 u_mosaicSize;\nuniform mediump float u_depth;\nuniform mediump float u_mapRotation;\nuniform mediump float u_level;\nuniform lowp float u_keepUpright;\nuniform mediump float u_opacity;\nuniform mediump float u_fadeDuration;\nvarying lowp vec2 v_tex;\nvarying lowp float v_opacity;\nconst float offsetPrecision = 1.0 / 8.0;\nconst mediump float edgePos = 0.75;\nuniform mediump float u_edgeDistance;\nuniform mediump float u_edgeBlur;\nuniform mediump float u_antialiasingWidth;\nvarying mediump float v_edgeDistance;\nvarying mediump float v_edgeWidth;\nuniform lowp float u_halo;\nconst float sdfFontScale = 1.0 / 24.0;\nuniform highp float u_time;\nvoid main()\n{\n  float modded = mod(a_opacityInfo, 128.0);\n  float targetOpacity = (a_opacityInfo - modded) / 128.0;\n  float startOpacity = modded / 127.0;\n  float interpolatedOpacity = clamp(startOpacity + 2.0 * (targetOpacity - 0.5) * u_time / u_fadeDuration, 0.0, 1.0);\n  v_opacity = u_opacity * interpolatedOpacity;\n  mediump float a_angle       = a_levelInfo[1];\n  mediump float a_minLevel    = a_levelInfo[2];\n  mediump float a_maxLevel    = a_levelInfo[3];\n  mediump vec2 a_tex           = a_texAngleRange.xy;\n  mediump float a_visMinAngle    = a_texAngleRange.z;\n  mediump float a_visMaxAngle    = a_texAngleRange.w;\n  mediump float delta_z = 0.0;\n  mediump float angle = mod(a_angle + u_mapRotation, 256.0);\n  if (a_visMinAngle < a_visMaxAngle)\n  {\n    delta_z += (1.0 - step(u_keepUpright, 0.0)) * (step(a_visMaxAngle, angle) + (1.0 - step(a_visMinAngle, angle)));\n  }\n  else\n  {\n    delta_z += (1.0 - step(u_keepUpright, 0.0)) * (step(a_visMaxAngle, angle) * (1.0 - step(a_visMinAngle, angle)));\n  }\n  delta_z += 1.0 - step(a_minLevel, u_level);\n  delta_z += step(a_maxLevel, u_level);\n  delta_z += step(v_opacity, 0.0);\n  v_tex = a_tex.xy / u_mosaicSize;\n#ifdef DD\n  if (u_halo > 0.5)\n  {\n    v_color = u_color;\n  }\n  else\n  {\n    v_color = a_color * u_color;\n  }\n#else\n  v_color = u_color;\n#endif\n#ifdef DD\n  v_size = a_size * u_size;\n#else\n  v_size = u_size;\n#endif\n#ifdef ID\n  v_id = u_id / 255.0;\n#endif\n  v_edgeDistance = edgePos - u_edgeDistance / v_size;\n  v_edgeWidth = (u_antialiasingWidth + u_edgeBlur) / v_size;\n  mediump vec3 pos = u_dvsMat3 * vec3(a_pos, 1.0) + sdfFontScale * u_displayViewMat3 * vec3(offsetPrecision * v_size * a_vertexOffset, 0.0) + u_displayMat3 * vec3(u_textTranslation, 0.0);\n  gl_Position = vec4(pos.xy, u_depth + delta_z, 1.0);\n}"},util:{"encoding.glsl":"const vec4 rgba2float_factors = vec4(\n    255.0 / (256.0),\n    255.0 / (256.0 * 256.0),\n    255.0 / (256.0 * 256.0 * 256.0),\n    255.0 / (256.0 * 256.0 * 256.0 * 256.0)\n  );\nfloat rgba2float(vec4 rgba) {\n  return dot(rgba, rgba2float_factors);\n}"}};const r=new i.a((function(e){let t=a;return e.split("/").forEach(e=>{t&&(t=t[e])}),t}));function l(e){return r.resolveIncludes(e)}const s=e=>Object(o.b)({ID:e.id,PATTERN:e.pattern}),c={name:"background",shaders:e=>({vertexShader:s(e)+l("background/background.vert"),fragmentShader:s(e)+l("background/background.frag")}),attributes:{a_pos:0}},u=e=>Object(o.b)({ID:e.id}),f={name:"circle",shaders:e=>({vertexShader:u(e)+l("circle/circle.vert"),fragmentShader:u(e)+l("circle/circle.frag")}),attributes:{a_pos:0,a_color:1,a_stroke_color:2,a_data:3}},d=e=>Object(o.b)({ID:e.id,DD:e.dd,PATTERN:e.pattern}),m={name:"fill",shaders:e=>({vertexShader:d(e)+l("fill/fill.vert"),fragmentShader:d(e)+l("fill/fill.frag")}),attributes:{a_pos:0,a_color:1}},_=e=>Object(o.b)({ID:e.id,DD:e.dd}),v={name:"outline",shaders:e=>({vertexShader:_(e)+l("outline/outline.vert"),fragmentShader:_(e)+l("outline/outline.frag")}),attributes:{a_pos:0,a_offset:1,a_xnormal:2,a_color:3}},p=e=>Object(o.b)({ID:e.id,DD:e.dd,SDF:e.sdf}),g={name:"icon",shaders:e=>({vertexShader:p(e)+l("icon/icon.vert"),fragmentShader:p(e)+l("icon/icon.frag")}),attributes:{a_pos:0,a_vertexOffset:1,a_texAngleRange:2,a_levelInfo:3,a_color:4,a_size:5,a_opacityInfo:6}},h=e=>Object(o.b)({ID:e.id,DD:e.dd,PATTERN:e.pattern}),x={name:"line",shaders:e=>({vertexShader:h(e)+l("line/line.vert"),fragmentShader:h(e)+l("line/line.frag")}),attributes:{a_pos:0,a_offsetAndNormal:1,a_accumulatedDistance:2,a_color:3,a_width:4}},b=e=>Object(o.b)({ID:e.id,DD:e.dd}),y={name:"text",shaders:e=>({vertexShader:b(e)+l("text/text.vert"),fragmentShader:b(e)+l("text/text.frag")}),attributes:{a_pos:0,a_vertexOffset:1,a_texAngleRange:2,a_levelInfo:3,a_color:4,a_size:5,a_opacityInfo:6}}}}]);
//# sourceMappingURL=3.13db4c24.chunk.js.map